// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: dota_gcmessages_common_overworld.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EOverworldNodeState int32

const (
	EOverworldNodeState_k_eOverworldNodeState_Invalid  EOverworldNodeState = 0
	EOverworldNodeState_k_eOverworldNodeState_Locked   EOverworldNodeState = 1
	EOverworldNodeState_k_eOverworldNodeState_Unlocked EOverworldNodeState = 2
)

// Enum value maps for EOverworldNodeState.
var (
	EOverworldNodeState_name = map[int32]string{
		0: "k_eOverworldNodeState_Invalid",
		1: "k_eOverworldNodeState_Locked",
		2: "k_eOverworldNodeState_Unlocked",
	}
	EOverworldNodeState_value = map[string]int32{
		"k_eOverworldNodeState_Invalid":  0,
		"k_eOverworldNodeState_Locked":   1,
		"k_eOverworldNodeState_Unlocked": 2,
	}
)

func (x EOverworldNodeState) Enum() *EOverworldNodeState {
	p := new(EOverworldNodeState)
	*p = x
	return p
}

func (x EOverworldNodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverworldNodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[0].Descriptor()
}

func (EOverworldNodeState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[0]
}

func (x EOverworldNodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverworldNodeState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverworldNodeState(num)
	return nil
}

// Deprecated: Use EOverworldNodeState.Descriptor instead.
func (EOverworldNodeState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{0}
}

type EOverworldPathState int32

const (
	EOverworldPathState_k_eOverworldPathState_Invalid    EOverworldPathState = 0
	EOverworldPathState_k_eOverworldPathState_Incomplete EOverworldPathState = 1
	EOverworldPathState_k_eOverworldPathState_Complete   EOverworldPathState = 2
)

// Enum value maps for EOverworldPathState.
var (
	EOverworldPathState_name = map[int32]string{
		0: "k_eOverworldPathState_Invalid",
		1: "k_eOverworldPathState_Incomplete",
		2: "k_eOverworldPathState_Complete",
	}
	EOverworldPathState_value = map[string]int32{
		"k_eOverworldPathState_Invalid":    0,
		"k_eOverworldPathState_Incomplete": 1,
		"k_eOverworldPathState_Complete":   2,
	}
)

func (x EOverworldPathState) Enum() *EOverworldPathState {
	p := new(EOverworldPathState)
	*p = x
	return p
}

func (x EOverworldPathState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverworldPathState) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[1].Descriptor()
}

func (EOverworldPathState) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[1]
}

func (x EOverworldPathState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverworldPathState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverworldPathState(num)
	return nil
}

// Deprecated: Use EOverworldPathState.Descriptor instead.
func (EOverworldPathState) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{1}
}

type EOverworldAuditAction int32

const (
	EOverworldAuditAction_k_eOverworldAuditAction_Invalid                    EOverworldAuditAction = 0
	EOverworldAuditAction_k_eOverworldAuditAction_DevModifyTokens            EOverworldAuditAction = 1
	EOverworldAuditAction_k_eOverworldAuditAction_DevClearInventory          EOverworldAuditAction = 2
	EOverworldAuditAction_k_eOverworldAuditAction_DevGrantTokens             EOverworldAuditAction = 3
	EOverworldAuditAction_k_eOverworldAuditAction_CompletePath               EOverworldAuditAction = 4
	EOverworldAuditAction_k_eOverworldAuditAction_ClaimEncounterReward       EOverworldAuditAction = 5
	EOverworldAuditAction_k_eOverworldAuditAction_DevResetNode               EOverworldAuditAction = 6
	EOverworldAuditAction_k_eOverworldAuditAction_DevResetPath               EOverworldAuditAction = 7
	EOverworldAuditAction_k_eOverworldAuditAction_MatchRewardsFull           EOverworldAuditAction = 8
	EOverworldAuditAction_k_eOverworldAuditAction_MatchRewardsHalf           EOverworldAuditAction = 9
	EOverworldAuditAction_k_eOverworldAuditAction_EventActionTokenGrant      EOverworldAuditAction = 10
	EOverworldAuditAction_k_eOverworldAuditAction_TokenTraderLost            EOverworldAuditAction = 11
	EOverworldAuditAction_k_eOverworldAuditAction_TokenTraderGained          EOverworldAuditAction = 12
	EOverworldAuditAction_k_eOverworldAuditAction_EncounterRewardTokenCost   EOverworldAuditAction = 13
	EOverworldAuditAction_k_eOverworldAuditAction_EncounterRewardTokenReward EOverworldAuditAction = 14
	EOverworldAuditAction_k_eOverworldAuditAction_SupportGrantTokens         EOverworldAuditAction = 16
	EOverworldAuditAction_k_eOverworldAuditAction_TokenGiftSent              EOverworldAuditAction = 17
)

// Enum value maps for EOverworldAuditAction.
var (
	EOverworldAuditAction_name = map[int32]string{
		0:  "k_eOverworldAuditAction_Invalid",
		1:  "k_eOverworldAuditAction_DevModifyTokens",
		2:  "k_eOverworldAuditAction_DevClearInventory",
		3:  "k_eOverworldAuditAction_DevGrantTokens",
		4:  "k_eOverworldAuditAction_CompletePath",
		5:  "k_eOverworldAuditAction_ClaimEncounterReward",
		6:  "k_eOverworldAuditAction_DevResetNode",
		7:  "k_eOverworldAuditAction_DevResetPath",
		8:  "k_eOverworldAuditAction_MatchRewardsFull",
		9:  "k_eOverworldAuditAction_MatchRewardsHalf",
		10: "k_eOverworldAuditAction_EventActionTokenGrant",
		11: "k_eOverworldAuditAction_TokenTraderLost",
		12: "k_eOverworldAuditAction_TokenTraderGained",
		13: "k_eOverworldAuditAction_EncounterRewardTokenCost",
		14: "k_eOverworldAuditAction_EncounterRewardTokenReward",
		16: "k_eOverworldAuditAction_SupportGrantTokens",
		17: "k_eOverworldAuditAction_TokenGiftSent",
	}
	EOverworldAuditAction_value = map[string]int32{
		"k_eOverworldAuditAction_Invalid":                    0,
		"k_eOverworldAuditAction_DevModifyTokens":            1,
		"k_eOverworldAuditAction_DevClearInventory":          2,
		"k_eOverworldAuditAction_DevGrantTokens":             3,
		"k_eOverworldAuditAction_CompletePath":               4,
		"k_eOverworldAuditAction_ClaimEncounterReward":       5,
		"k_eOverworldAuditAction_DevResetNode":               6,
		"k_eOverworldAuditAction_DevResetPath":               7,
		"k_eOverworldAuditAction_MatchRewardsFull":           8,
		"k_eOverworldAuditAction_MatchRewardsHalf":           9,
		"k_eOverworldAuditAction_EventActionTokenGrant":      10,
		"k_eOverworldAuditAction_TokenTraderLost":            11,
		"k_eOverworldAuditAction_TokenTraderGained":          12,
		"k_eOverworldAuditAction_EncounterRewardTokenCost":   13,
		"k_eOverworldAuditAction_EncounterRewardTokenReward": 14,
		"k_eOverworldAuditAction_SupportGrantTokens":         16,
		"k_eOverworldAuditAction_TokenGiftSent":              17,
	}
)

func (x EOverworldAuditAction) Enum() *EOverworldAuditAction {
	p := new(EOverworldAuditAction)
	*p = x
	return p
}

func (x EOverworldAuditAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverworldAuditAction) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[2].Descriptor()
}

func (EOverworldAuditAction) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[2]
}

func (x EOverworldAuditAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverworldAuditAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverworldAuditAction(num)
	return nil
}

// Deprecated: Use EOverworldAuditAction.Descriptor instead.
func (EOverworldAuditAction) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{2}
}

type EOverworldMinigameAction int32

const (
	EOverworldMinigameAction_k_eOverworldMinigameAction_Invalid              EOverworldMinigameAction = 0
	EOverworldMinigameAction_k_eOverworldMinigameAction_DevReset             EOverworldMinigameAction = 1
	EOverworldMinigameAction_k_eOverworldMinigameAction_DevGiveCurrency      EOverworldMinigameAction = 2
	EOverworldMinigameAction_k_eOverworldMinigameAction_Purchase             EOverworldMinigameAction = 3
	EOverworldMinigameAction_k_eOverworldMinigameAction_SetOption            EOverworldMinigameAction = 4
	EOverworldMinigameAction_k_eOverworldMinigameAction_ReportCurrencyGained EOverworldMinigameAction = 5
	EOverworldMinigameAction_k_eOverworldMinigameAction_UnlockDifficulty     EOverworldMinigameAction = 6
)

// Enum value maps for EOverworldMinigameAction.
var (
	EOverworldMinigameAction_name = map[int32]string{
		0: "k_eOverworldMinigameAction_Invalid",
		1: "k_eOverworldMinigameAction_DevReset",
		2: "k_eOverworldMinigameAction_DevGiveCurrency",
		3: "k_eOverworldMinigameAction_Purchase",
		4: "k_eOverworldMinigameAction_SetOption",
		5: "k_eOverworldMinigameAction_ReportCurrencyGained",
		6: "k_eOverworldMinigameAction_UnlockDifficulty",
	}
	EOverworldMinigameAction_value = map[string]int32{
		"k_eOverworldMinigameAction_Invalid":              0,
		"k_eOverworldMinigameAction_DevReset":             1,
		"k_eOverworldMinigameAction_DevGiveCurrency":      2,
		"k_eOverworldMinigameAction_Purchase":             3,
		"k_eOverworldMinigameAction_SetOption":            4,
		"k_eOverworldMinigameAction_ReportCurrencyGained": 5,
		"k_eOverworldMinigameAction_UnlockDifficulty":     6,
	}
)

func (x EOverworldMinigameAction) Enum() *EOverworldMinigameAction {
	p := new(EOverworldMinigameAction)
	*p = x
	return p
}

func (x EOverworldMinigameAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverworldMinigameAction) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[3].Descriptor()
}

func (EOverworldMinigameAction) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[3]
}

func (x EOverworldMinigameAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverworldMinigameAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverworldMinigameAction(num)
	return nil
}

// Deprecated: Use EOverworldMinigameAction.Descriptor instead.
func (EOverworldMinigameAction) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{3}
}

type CMsgClientToGCOverworldGetUserDataResponse_EResponse int32

const (
	CMsgClientToGCOverworldGetUserDataResponse_k_eInternalError    CMsgClientToGCOverworldGetUserDataResponse_EResponse = 0
	CMsgClientToGCOverworldGetUserDataResponse_k_eSuccess          CMsgClientToGCOverworldGetUserDataResponse_EResponse = 1
	CMsgClientToGCOverworldGetUserDataResponse_k_eTooBusy          CMsgClientToGCOverworldGetUserDataResponse_EResponse = 2
	CMsgClientToGCOverworldGetUserDataResponse_k_eDisabled         CMsgClientToGCOverworldGetUserDataResponse_EResponse = 3
	CMsgClientToGCOverworldGetUserDataResponse_k_eTimeout          CMsgClientToGCOverworldGetUserDataResponse_EResponse = 4
	CMsgClientToGCOverworldGetUserDataResponse_k_eInvalidOverworld CMsgClientToGCOverworldGetUserDataResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCOverworldGetUserDataResponse_EResponse.
var (
	CMsgClientToGCOverworldGetUserDataResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidOverworld",
	}
	CMsgClientToGCOverworldGetUserDataResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eInvalidOverworld": 5,
	}
)

func (x CMsgClientToGCOverworldGetUserDataResponse_EResponse) Enum() *CMsgClientToGCOverworldGetUserDataResponse_EResponse {
	p := new(CMsgClientToGCOverworldGetUserDataResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldGetUserDataResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldGetUserDataResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[4].Descriptor()
}

func (CMsgClientToGCOverworldGetUserDataResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[4]
}

func (x CMsgClientToGCOverworldGetUserDataResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldGetUserDataResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldGetUserDataResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldGetUserDataResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldGetUserDataResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{15, 0}
}

type CMsgClientToGCOverworldCompletePathResponse_EResponse int32

const (
	CMsgClientToGCOverworldCompletePathResponse_k_eInternalError       CMsgClientToGCOverworldCompletePathResponse_EResponse = 0
	CMsgClientToGCOverworldCompletePathResponse_k_eSuccess             CMsgClientToGCOverworldCompletePathResponse_EResponse = 1
	CMsgClientToGCOverworldCompletePathResponse_k_eTooBusy             CMsgClientToGCOverworldCompletePathResponse_EResponse = 2
	CMsgClientToGCOverworldCompletePathResponse_k_eDisabled            CMsgClientToGCOverworldCompletePathResponse_EResponse = 3
	CMsgClientToGCOverworldCompletePathResponse_k_eTimeout             CMsgClientToGCOverworldCompletePathResponse_EResponse = 4
	CMsgClientToGCOverworldCompletePathResponse_k_eInvalidOverworld    CMsgClientToGCOverworldCompletePathResponse_EResponse = 5
	CMsgClientToGCOverworldCompletePathResponse_k_eInvalidPath         CMsgClientToGCOverworldCompletePathResponse_EResponse = 6
	CMsgClientToGCOverworldCompletePathResponse_k_eNotEnoughTokens     CMsgClientToGCOverworldCompletePathResponse_EResponse = 7
	CMsgClientToGCOverworldCompletePathResponse_k_ePathIsLocked        CMsgClientToGCOverworldCompletePathResponse_EResponse = 8
	CMsgClientToGCOverworldCompletePathResponse_k_ePathAlreadyUnlocked CMsgClientToGCOverworldCompletePathResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCOverworldCompletePathResponse_EResponse.
var (
	CMsgClientToGCOverworldCompletePathResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidOverworld",
		6: "k_eInvalidPath",
		7: "k_eNotEnoughTokens",
		8: "k_ePathIsLocked",
		9: "k_ePathAlreadyUnlocked",
	}
	CMsgClientToGCOverworldCompletePathResponse_EResponse_value = map[string]int32{
		"k_eInternalError":       0,
		"k_eSuccess":             1,
		"k_eTooBusy":             2,
		"k_eDisabled":            3,
		"k_eTimeout":             4,
		"k_eInvalidOverworld":    5,
		"k_eInvalidPath":         6,
		"k_eNotEnoughTokens":     7,
		"k_ePathIsLocked":        8,
		"k_ePathAlreadyUnlocked": 9,
	}
)

func (x CMsgClientToGCOverworldCompletePathResponse_EResponse) Enum() *CMsgClientToGCOverworldCompletePathResponse_EResponse {
	p := new(CMsgClientToGCOverworldCompletePathResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldCompletePathResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldCompletePathResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[5].Descriptor()
}

func (CMsgClientToGCOverworldCompletePathResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[5]
}

func (x CMsgClientToGCOverworldCompletePathResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldCompletePathResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldCompletePathResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldCompletePathResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldCompletePathResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{18, 0}
}

type CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse int32

const (
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInternalError               CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 0
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eSuccess                     CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 1
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eTooBusy                     CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 2
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eDisabled                    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 3
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eTimeout                     CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 4
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInvalidOverworld            CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 5
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInvalidNode                 CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 6
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eNodeLocked                  CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 7
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eRewardAlreadyClaimed        CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 8
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eNodeNotEncounter            CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 9
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eEncounterMissingRewards     CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 10
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInvalidEncounterRewardStyle CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 11
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInvalidEncounterData        CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 12
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eNotEnoughTokensForReward    CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 13
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eNotEnoughResourceForReward  CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 14
	CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInvalidRewardData           CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse = 15
)

// Enum value maps for CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.
var (
	CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooBusy",
		3:  "k_eDisabled",
		4:  "k_eTimeout",
		5:  "k_eInvalidOverworld",
		6:  "k_eInvalidNode",
		7:  "k_eNodeLocked",
		8:  "k_eRewardAlreadyClaimed",
		9:  "k_eNodeNotEncounter",
		10: "k_eEncounterMissingRewards",
		11: "k_eInvalidEncounterRewardStyle",
		12: "k_eInvalidEncounterData",
		13: "k_eNotEnoughTokensForReward",
		14: "k_eNotEnoughResourceForReward",
		15: "k_eInvalidRewardData",
	}
	CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse_value = map[string]int32{
		"k_eInternalError":               0,
		"k_eSuccess":                     1,
		"k_eTooBusy":                     2,
		"k_eDisabled":                    3,
		"k_eTimeout":                     4,
		"k_eInvalidOverworld":            5,
		"k_eInvalidNode":                 6,
		"k_eNodeLocked":                  7,
		"k_eRewardAlreadyClaimed":        8,
		"k_eNodeNotEncounter":            9,
		"k_eEncounterMissingRewards":     10,
		"k_eInvalidEncounterRewardStyle": 11,
		"k_eInvalidEncounterData":        12,
		"k_eNotEnoughTokensForReward":    13,
		"k_eNotEnoughResourceForReward":  14,
		"k_eInvalidRewardData":           15,
	}
)

func (x CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) Enum() *CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse {
	p := new(CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[6].Descriptor()
}

func (CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[6]
}

func (x CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{21, 0}
}

type CMsgClientToGCOverworldVisitEncounterResponse_EResponse int32

const (
	CMsgClientToGCOverworldVisitEncounterResponse_k_eInternalError    CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 0
	CMsgClientToGCOverworldVisitEncounterResponse_k_eSuccess          CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 1
	CMsgClientToGCOverworldVisitEncounterResponse_k_eTooBusy          CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 2
	CMsgClientToGCOverworldVisitEncounterResponse_k_eDisabled         CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 3
	CMsgClientToGCOverworldVisitEncounterResponse_k_eTimeout          CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 4
	CMsgClientToGCOverworldVisitEncounterResponse_k_eInvalidOverworld CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 5
	CMsgClientToGCOverworldVisitEncounterResponse_k_eInvalidNode      CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 6
	CMsgClientToGCOverworldVisitEncounterResponse_k_eNodeLocked       CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 7
	CMsgClientToGCOverworldVisitEncounterResponse_k_eNodeNotEncounter CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 8
	CMsgClientToGCOverworldVisitEncounterResponse_k_eAlreadyVisited   CMsgClientToGCOverworldVisitEncounterResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCOverworldVisitEncounterResponse_EResponse.
var (
	CMsgClientToGCOverworldVisitEncounterResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidOverworld",
		6: "k_eInvalidNode",
		7: "k_eNodeLocked",
		8: "k_eNodeNotEncounter",
		9: "k_eAlreadyVisited",
	}
	CMsgClientToGCOverworldVisitEncounterResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eInvalidOverworld": 5,
		"k_eInvalidNode":      6,
		"k_eNodeLocked":       7,
		"k_eNodeNotEncounter": 8,
		"k_eAlreadyVisited":   9,
	}
)

func (x CMsgClientToGCOverworldVisitEncounterResponse_EResponse) Enum() *CMsgClientToGCOverworldVisitEncounterResponse_EResponse {
	p := new(CMsgClientToGCOverworldVisitEncounterResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldVisitEncounterResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldVisitEncounterResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[7].Descriptor()
}

func (CMsgClientToGCOverworldVisitEncounterResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[7]
}

func (x CMsgClientToGCOverworldVisitEncounterResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldVisitEncounterResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldVisitEncounterResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldVisitEncounterResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldVisitEncounterResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{23, 0}
}

type CMsgClientToGCOverworldMoveToNodeResponse_EResponse int32

const (
	CMsgClientToGCOverworldMoveToNodeResponse_k_eInternalError    CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 0
	CMsgClientToGCOverworldMoveToNodeResponse_k_eSuccess          CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 1
	CMsgClientToGCOverworldMoveToNodeResponse_k_eTooBusy          CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 2
	CMsgClientToGCOverworldMoveToNodeResponse_k_eDisabled         CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 3
	CMsgClientToGCOverworldMoveToNodeResponse_k_eTimeout          CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 4
	CMsgClientToGCOverworldMoveToNodeResponse_k_eInvalidOverworld CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 5
	CMsgClientToGCOverworldMoveToNodeResponse_k_eInvalidNode      CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 6
	CMsgClientToGCOverworldMoveToNodeResponse_k_eNodeLocked       CMsgClientToGCOverworldMoveToNodeResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCOverworldMoveToNodeResponse_EResponse.
var (
	CMsgClientToGCOverworldMoveToNodeResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidOverworld",
		6: "k_eInvalidNode",
		7: "k_eNodeLocked",
	}
	CMsgClientToGCOverworldMoveToNodeResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eInvalidOverworld": 5,
		"k_eInvalidNode":      6,
		"k_eNodeLocked":       7,
	}
)

func (x CMsgClientToGCOverworldMoveToNodeResponse_EResponse) Enum() *CMsgClientToGCOverworldMoveToNodeResponse_EResponse {
	p := new(CMsgClientToGCOverworldMoveToNodeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldMoveToNodeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldMoveToNodeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[8].Descriptor()
}

func (CMsgClientToGCOverworldMoveToNodeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[8]
}

func (x CMsgClientToGCOverworldMoveToNodeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldMoveToNodeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldMoveToNodeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldMoveToNodeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldMoveToNodeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{25, 0}
}

type CMsgClientToGCOverworldTradeTokensResponse_EResponse int32

const (
	CMsgClientToGCOverworldTradeTokensResponse_k_eInternalError            CMsgClientToGCOverworldTradeTokensResponse_EResponse = 0
	CMsgClientToGCOverworldTradeTokensResponse_k_eSuccess                  CMsgClientToGCOverworldTradeTokensResponse_EResponse = 1
	CMsgClientToGCOverworldTradeTokensResponse_k_eTooBusy                  CMsgClientToGCOverworldTradeTokensResponse_EResponse = 2
	CMsgClientToGCOverworldTradeTokensResponse_k_eDisabled                 CMsgClientToGCOverworldTradeTokensResponse_EResponse = 3
	CMsgClientToGCOverworldTradeTokensResponse_k_eTimeout                  CMsgClientToGCOverworldTradeTokensResponse_EResponse = 4
	CMsgClientToGCOverworldTradeTokensResponse_k_eNotAllowed               CMsgClientToGCOverworldTradeTokensResponse_EResponse = 5
	CMsgClientToGCOverworldTradeTokensResponse_k_eNodeLocked               CMsgClientToGCOverworldTradeTokensResponse_EResponse = 6
	CMsgClientToGCOverworldTradeTokensResponse_k_eInvalidOverworld         CMsgClientToGCOverworldTradeTokensResponse_EResponse = 7
	CMsgClientToGCOverworldTradeTokensResponse_k_eInvalidOffer             CMsgClientToGCOverworldTradeTokensResponse_EResponse = 8
	CMsgClientToGCOverworldTradeTokensResponse_k_eNotEnoughTokens          CMsgClientToGCOverworldTradeTokensResponse_EResponse = 9
	CMsgClientToGCOverworldTradeTokensResponse_k_eInvalidNode              CMsgClientToGCOverworldTradeTokensResponse_EResponse = 10
	CMsgClientToGCOverworldTradeTokensResponse_k_eInvalidEncounter         CMsgClientToGCOverworldTradeTokensResponse_EResponse = 11
	CMsgClientToGCOverworldTradeTokensResponse_k_eRewardDoesNotMatchRecipe CMsgClientToGCOverworldTradeTokensResponse_EResponse = 12
)

// Enum value maps for CMsgClientToGCOverworldTradeTokensResponse_EResponse.
var (
	CMsgClientToGCOverworldTradeTokensResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooBusy",
		3:  "k_eDisabled",
		4:  "k_eTimeout",
		5:  "k_eNotAllowed",
		6:  "k_eNodeLocked",
		7:  "k_eInvalidOverworld",
		8:  "k_eInvalidOffer",
		9:  "k_eNotEnoughTokens",
		10: "k_eInvalidNode",
		11: "k_eInvalidEncounter",
		12: "k_eRewardDoesNotMatchRecipe",
	}
	CMsgClientToGCOverworldTradeTokensResponse_EResponse_value = map[string]int32{
		"k_eInternalError":            0,
		"k_eSuccess":                  1,
		"k_eTooBusy":                  2,
		"k_eDisabled":                 3,
		"k_eTimeout":                  4,
		"k_eNotAllowed":               5,
		"k_eNodeLocked":               6,
		"k_eInvalidOverworld":         7,
		"k_eInvalidOffer":             8,
		"k_eNotEnoughTokens":          9,
		"k_eInvalidNode":              10,
		"k_eInvalidEncounter":         11,
		"k_eRewardDoesNotMatchRecipe": 12,
	}
)

func (x CMsgClientToGCOverworldTradeTokensResponse_EResponse) Enum() *CMsgClientToGCOverworldTradeTokensResponse_EResponse {
	p := new(CMsgClientToGCOverworldTradeTokensResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldTradeTokensResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldTradeTokensResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[9].Descriptor()
}

func (CMsgClientToGCOverworldTradeTokensResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[9]
}

func (x CMsgClientToGCOverworldTradeTokensResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldTradeTokensResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldTradeTokensResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldTradeTokensResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldTradeTokensResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{27, 0}
}

type CMsgClientToGCOverworldGiftTokensResponse_EResponse int32

const (
	CMsgClientToGCOverworldGiftTokensResponse_k_eInternalError             CMsgClientToGCOverworldGiftTokensResponse_EResponse = 0
	CMsgClientToGCOverworldGiftTokensResponse_k_eSuccess                   CMsgClientToGCOverworldGiftTokensResponse_EResponse = 1
	CMsgClientToGCOverworldGiftTokensResponse_k_eTooBusy                   CMsgClientToGCOverworldGiftTokensResponse_EResponse = 2
	CMsgClientToGCOverworldGiftTokensResponse_k_eDisabled                  CMsgClientToGCOverworldGiftTokensResponse_EResponse = 3
	CMsgClientToGCOverworldGiftTokensResponse_k_eTimeout                   CMsgClientToGCOverworldGiftTokensResponse_EResponse = 4
	CMsgClientToGCOverworldGiftTokensResponse_k_eNotAllowed                CMsgClientToGCOverworldGiftTokensResponse_EResponse = 5
	CMsgClientToGCOverworldGiftTokensResponse_k_eNodeLocked                CMsgClientToGCOverworldGiftTokensResponse_EResponse = 6
	CMsgClientToGCOverworldGiftTokensResponse_k_eInvalidOverworld          CMsgClientToGCOverworldGiftTokensResponse_EResponse = 7
	CMsgClientToGCOverworldGiftTokensResponse_k_eInvalidGift               CMsgClientToGCOverworldGiftTokensResponse_EResponse = 8
	CMsgClientToGCOverworldGiftTokensResponse_k_eNotEnoughTokens           CMsgClientToGCOverworldGiftTokensResponse_EResponse = 9
	CMsgClientToGCOverworldGiftTokensResponse_k_eInvalidRecipient          CMsgClientToGCOverworldGiftTokensResponse_EResponse = 10
	CMsgClientToGCOverworldGiftTokensResponse_k_eNotEnoughPeriodicResource CMsgClientToGCOverworldGiftTokensResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCOverworldGiftTokensResponse_EResponse.
var (
	CMsgClientToGCOverworldGiftTokensResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooBusy",
		3:  "k_eDisabled",
		4:  "k_eTimeout",
		5:  "k_eNotAllowed",
		6:  "k_eNodeLocked",
		7:  "k_eInvalidOverworld",
		8:  "k_eInvalidGift",
		9:  "k_eNotEnoughTokens",
		10: "k_eInvalidRecipient",
		11: "k_eNotEnoughPeriodicResource",
	}
	CMsgClientToGCOverworldGiftTokensResponse_EResponse_value = map[string]int32{
		"k_eInternalError":             0,
		"k_eSuccess":                   1,
		"k_eTooBusy":                   2,
		"k_eDisabled":                  3,
		"k_eTimeout":                   4,
		"k_eNotAllowed":                5,
		"k_eNodeLocked":                6,
		"k_eInvalidOverworld":          7,
		"k_eInvalidGift":               8,
		"k_eNotEnoughTokens":           9,
		"k_eInvalidRecipient":          10,
		"k_eNotEnoughPeriodicResource": 11,
	}
)

func (x CMsgClientToGCOverworldGiftTokensResponse_EResponse) Enum() *CMsgClientToGCOverworldGiftTokensResponse_EResponse {
	p := new(CMsgClientToGCOverworldGiftTokensResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldGiftTokensResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldGiftTokensResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[10].Descriptor()
}

func (CMsgClientToGCOverworldGiftTokensResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[10]
}

func (x CMsgClientToGCOverworldGiftTokensResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldGiftTokensResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldGiftTokensResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldGiftTokensResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldGiftTokensResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{29, 0}
}

type CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse int32

const (
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eInternalError    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 0
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eSuccess          CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 1
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eTooBusy          CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 2
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eDisabled         CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 3
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eTimeout          CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 4
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eNotAllowed       CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 5
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eNodeLocked       CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 6
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eInvalidOverworld CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 7
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eInvalidFriend    CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 8
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eTooManyRequests  CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse = 9
)

// Enum value maps for CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.
var (
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eNotAllowed",
		6: "k_eNodeLocked",
		7: "k_eInvalidOverworld",
		8: "k_eInvalidFriend",
		9: "k_eTooManyRequests",
	}
	CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eNotAllowed":       5,
		"k_eNodeLocked":       6,
		"k_eInvalidOverworld": 7,
		"k_eInvalidFriend":    8,
		"k_eTooManyRequests":  9,
	}
)

func (x CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) Enum() *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse {
	p := new(CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[11].Descriptor()
}

func (CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[11]
}

func (x CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{31, 0}
}

type CMsgClientToGCOverworldDevResetAllResponse_EResponse int32

const (
	CMsgClientToGCOverworldDevResetAllResponse_k_eInternalError    CMsgClientToGCOverworldDevResetAllResponse_EResponse = 0
	CMsgClientToGCOverworldDevResetAllResponse_k_eSuccess          CMsgClientToGCOverworldDevResetAllResponse_EResponse = 1
	CMsgClientToGCOverworldDevResetAllResponse_k_eTooBusy          CMsgClientToGCOverworldDevResetAllResponse_EResponse = 2
	CMsgClientToGCOverworldDevResetAllResponse_k_eDisabled         CMsgClientToGCOverworldDevResetAllResponse_EResponse = 3
	CMsgClientToGCOverworldDevResetAllResponse_k_eTimeout          CMsgClientToGCOverworldDevResetAllResponse_EResponse = 4
	CMsgClientToGCOverworldDevResetAllResponse_k_eNotAllowed       CMsgClientToGCOverworldDevResetAllResponse_EResponse = 5
	CMsgClientToGCOverworldDevResetAllResponse_k_eInvalidOverworld CMsgClientToGCOverworldDevResetAllResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCOverworldDevResetAllResponse_EResponse.
var (
	CMsgClientToGCOverworldDevResetAllResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eNotAllowed",
		6: "k_eInvalidOverworld",
	}
	CMsgClientToGCOverworldDevResetAllResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eNotAllowed":       5,
		"k_eInvalidOverworld": 6,
	}
)

func (x CMsgClientToGCOverworldDevResetAllResponse_EResponse) Enum() *CMsgClientToGCOverworldDevResetAllResponse_EResponse {
	p := new(CMsgClientToGCOverworldDevResetAllResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldDevResetAllResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldDevResetAllResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[12].Descriptor()
}

func (CMsgClientToGCOverworldDevResetAllResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[12]
}

func (x CMsgClientToGCOverworldDevResetAllResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldDevResetAllResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldDevResetAllResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldDevResetAllResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldDevResetAllResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{33, 0}
}

type CMsgClientToGCOverworldDevResetNodeResponse_EResponse int32

const (
	CMsgClientToGCOverworldDevResetNodeResponse_k_eInternalError    CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 0
	CMsgClientToGCOverworldDevResetNodeResponse_k_eSuccess          CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 1
	CMsgClientToGCOverworldDevResetNodeResponse_k_eTooBusy          CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 2
	CMsgClientToGCOverworldDevResetNodeResponse_k_eDisabled         CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 3
	CMsgClientToGCOverworldDevResetNodeResponse_k_eTimeout          CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 4
	CMsgClientToGCOverworldDevResetNodeResponse_k_eNotAllowed       CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 5
	CMsgClientToGCOverworldDevResetNodeResponse_k_eInvalidOverworld CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 6
	CMsgClientToGCOverworldDevResetNodeResponse_k_eInvalidNode      CMsgClientToGCOverworldDevResetNodeResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCOverworldDevResetNodeResponse_EResponse.
var (
	CMsgClientToGCOverworldDevResetNodeResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eNotAllowed",
		6: "k_eInvalidOverworld",
		7: "k_eInvalidNode",
	}
	CMsgClientToGCOverworldDevResetNodeResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eNotAllowed":       5,
		"k_eInvalidOverworld": 6,
		"k_eInvalidNode":      7,
	}
)

func (x CMsgClientToGCOverworldDevResetNodeResponse_EResponse) Enum() *CMsgClientToGCOverworldDevResetNodeResponse_EResponse {
	p := new(CMsgClientToGCOverworldDevResetNodeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldDevResetNodeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldDevResetNodeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[13].Descriptor()
}

func (CMsgClientToGCOverworldDevResetNodeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[13]
}

func (x CMsgClientToGCOverworldDevResetNodeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldDevResetNodeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldDevResetNodeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldDevResetNodeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldDevResetNodeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{35, 0}
}

type CMsgClientToGCOverworldDevGrantTokensResponse_EResponse int32

const (
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eInternalError    CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 0
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eSuccess          CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 1
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eTooBusy          CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 2
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eDisabled         CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 3
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eTimeout          CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 4
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eNotAllowed       CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 5
	CMsgClientToGCOverworldDevGrantTokensResponse_k_eInvalidOverworld CMsgClientToGCOverworldDevGrantTokensResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.
var (
	CMsgClientToGCOverworldDevGrantTokensResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eNotAllowed",
		6: "k_eInvalidOverworld",
	}
	CMsgClientToGCOverworldDevGrantTokensResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eNotAllowed":       5,
		"k_eInvalidOverworld": 6,
	}
)

func (x CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) Enum() *CMsgClientToGCOverworldDevGrantTokensResponse_EResponse {
	p := new(CMsgClientToGCOverworldDevGrantTokensResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[14].Descriptor()
}

func (CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[14]
}

func (x CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldDevGrantTokensResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldDevGrantTokensResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldDevGrantTokensResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{37, 0}
}

type CMsgClientToGCOverworldDevClearInventoryResponse_EResponse int32

const (
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eInternalError    CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 0
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eSuccess          CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 1
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eTooBusy          CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 2
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eDisabled         CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 3
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eTimeout          CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 4
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eNotAllowed       CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 5
	CMsgClientToGCOverworldDevClearInventoryResponse_k_eInvalidOverworld CMsgClientToGCOverworldDevClearInventoryResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.
var (
	CMsgClientToGCOverworldDevClearInventoryResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eNotAllowed",
		6: "k_eInvalidOverworld",
	}
	CMsgClientToGCOverworldDevClearInventoryResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eNotAllowed":       5,
		"k_eInvalidOverworld": 6,
	}
)

func (x CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) Enum() *CMsgClientToGCOverworldDevClearInventoryResponse_EResponse {
	p := new(CMsgClientToGCOverworldDevClearInventoryResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[15].Descriptor()
}

func (CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[15]
}

func (x CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldDevClearInventoryResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldDevClearInventoryResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldDevClearInventoryResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{39, 0}
}

type CMsgClientToGCOverworldFeedbackResponse_EResponse int32

const (
	CMsgClientToGCOverworldFeedbackResponse_k_eInternalError    CMsgClientToGCOverworldFeedbackResponse_EResponse = 0
	CMsgClientToGCOverworldFeedbackResponse_k_eSuccess          CMsgClientToGCOverworldFeedbackResponse_EResponse = 1
	CMsgClientToGCOverworldFeedbackResponse_k_eTooBusy          CMsgClientToGCOverworldFeedbackResponse_EResponse = 2
	CMsgClientToGCOverworldFeedbackResponse_k_eDisabled         CMsgClientToGCOverworldFeedbackResponse_EResponse = 3
	CMsgClientToGCOverworldFeedbackResponse_k_eTimeout          CMsgClientToGCOverworldFeedbackResponse_EResponse = 4
	CMsgClientToGCOverworldFeedbackResponse_k_eNotAllowed       CMsgClientToGCOverworldFeedbackResponse_EResponse = 5
	CMsgClientToGCOverworldFeedbackResponse_k_eInvalidOverworld CMsgClientToGCOverworldFeedbackResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCOverworldFeedbackResponse_EResponse.
var (
	CMsgClientToGCOverworldFeedbackResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eNotAllowed",
		6: "k_eInvalidOverworld",
	}
	CMsgClientToGCOverworldFeedbackResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eNotAllowed":       5,
		"k_eInvalidOverworld": 6,
	}
)

func (x CMsgClientToGCOverworldFeedbackResponse_EResponse) Enum() *CMsgClientToGCOverworldFeedbackResponse_EResponse {
	p := new(CMsgClientToGCOverworldFeedbackResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldFeedbackResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldFeedbackResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[16].Descriptor()
}

func (CMsgClientToGCOverworldFeedbackResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[16]
}

func (x CMsgClientToGCOverworldFeedbackResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldFeedbackResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldFeedbackResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldFeedbackResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldFeedbackResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{41, 0}
}

type CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat int32

const (
	CMsgClientToGCOverworldGetDynamicImageResponse_k_eUnknown CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat = 0
	CMsgClientToGCOverworldGetDynamicImageResponse_k_ePNG     CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat = 1
	CMsgClientToGCOverworldGetDynamicImageResponse_k_eData    CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat = 2
)

// Enum value maps for CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.
var (
	CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat_name = map[int32]string{
		0: "k_eUnknown",
		1: "k_ePNG",
		2: "k_eData",
	}
	CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat_value = map[string]int32{
		"k_eUnknown": 0,
		"k_ePNG":     1,
		"k_eData":    2,
	}
)

func (x CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) Enum() *CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat {
	p := new(CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[17].Descriptor()
}

func (CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[17]
}

func (x CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat.Descriptor instead.
func (CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{43, 0}
}

type CMsgClientToGCOverworldMinigameActionResponse_EResponse int32

const (
	CMsgClientToGCOverworldMinigameActionResponse_k_eInternalError             CMsgClientToGCOverworldMinigameActionResponse_EResponse = 0
	CMsgClientToGCOverworldMinigameActionResponse_k_eSuccess                   CMsgClientToGCOverworldMinigameActionResponse_EResponse = 1
	CMsgClientToGCOverworldMinigameActionResponse_k_eTooBusy                   CMsgClientToGCOverworldMinigameActionResponse_EResponse = 2
	CMsgClientToGCOverworldMinigameActionResponse_k_eDisabled                  CMsgClientToGCOverworldMinigameActionResponse_EResponse = 3
	CMsgClientToGCOverworldMinigameActionResponse_k_eTimeout                   CMsgClientToGCOverworldMinigameActionResponse_EResponse = 4
	CMsgClientToGCOverworldMinigameActionResponse_k_eInvalidOverworld          CMsgClientToGCOverworldMinigameActionResponse_EResponse = 5
	CMsgClientToGCOverworldMinigameActionResponse_k_eInvalidNode               CMsgClientToGCOverworldMinigameActionResponse_EResponse = 6
	CMsgClientToGCOverworldMinigameActionResponse_k_eNodeLocked                CMsgClientToGCOverworldMinigameActionResponse_EResponse = 7
	CMsgClientToGCOverworldMinigameActionResponse_k_eInvalidSelection          CMsgClientToGCOverworldMinigameActionResponse_EResponse = 8
	CMsgClientToGCOverworldMinigameActionResponse_k_eNotEnoughTokens           CMsgClientToGCOverworldMinigameActionResponse_EResponse = 9
	CMsgClientToGCOverworldMinigameActionResponse_k_eNotEnoughMinigameCurrency CMsgClientToGCOverworldMinigameActionResponse_EResponse = 10
	CMsgClientToGCOverworldMinigameActionResponse_k_eNotAllowed                CMsgClientToGCOverworldMinigameActionResponse_EResponse = 11
)

// Enum value maps for CMsgClientToGCOverworldMinigameActionResponse_EResponse.
var (
	CMsgClientToGCOverworldMinigameActionResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTooBusy",
		3:  "k_eDisabled",
		4:  "k_eTimeout",
		5:  "k_eInvalidOverworld",
		6:  "k_eInvalidNode",
		7:  "k_eNodeLocked",
		8:  "k_eInvalidSelection",
		9:  "k_eNotEnoughTokens",
		10: "k_eNotEnoughMinigameCurrency",
		11: "k_eNotAllowed",
	}
	CMsgClientToGCOverworldMinigameActionResponse_EResponse_value = map[string]int32{
		"k_eInternalError":             0,
		"k_eSuccess":                   1,
		"k_eTooBusy":                   2,
		"k_eDisabled":                  3,
		"k_eTimeout":                   4,
		"k_eInvalidOverworld":          5,
		"k_eInvalidNode":               6,
		"k_eNodeLocked":                7,
		"k_eInvalidSelection":          8,
		"k_eNotEnoughTokens":           9,
		"k_eNotEnoughMinigameCurrency": 10,
		"k_eNotAllowed":                11,
	}
)

func (x CMsgClientToGCOverworldMinigameActionResponse_EResponse) Enum() *CMsgClientToGCOverworldMinigameActionResponse_EResponse {
	p := new(CMsgClientToGCOverworldMinigameActionResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOverworldMinigameActionResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOverworldMinigameActionResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_overworld_proto_enumTypes[18].Descriptor()
}

func (CMsgClientToGCOverworldMinigameActionResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_overworld_proto_enumTypes[18]
}

func (x CMsgClientToGCOverworldMinigameActionResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOverworldMinigameActionResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOverworldMinigameActionResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOverworldMinigameActionResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOverworldMinigameActionResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{45, 0}
}

type CMsgOverworldTokenCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenId       *uint32                `protobuf:"varint,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	TokenCount    *uint32                `protobuf:"varint,2,opt,name=token_count,json=tokenCount" json:"token_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldTokenCount) Reset() {
	*x = CMsgOverworldTokenCount{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldTokenCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldTokenCount) ProtoMessage() {}

func (x *CMsgOverworldTokenCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldTokenCount.ProtoReflect.Descriptor instead.
func (*CMsgOverworldTokenCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgOverworldTokenCount) GetTokenId() uint32 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CMsgOverworldTokenCount) GetTokenCount() uint32 {
	if x != nil && x.TokenCount != nil {
		return *x.TokenCount
	}
	return 0
}

type CMsgOverworldTokenQuantity struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	TokenCounts   []*CMsgOverworldTokenCount `protobuf:"bytes,1,rep,name=token_counts,json=tokenCounts" json:"token_counts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldTokenQuantity) Reset() {
	*x = CMsgOverworldTokenQuantity{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldTokenQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldTokenQuantity) ProtoMessage() {}

func (x *CMsgOverworldTokenQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldTokenQuantity.ProtoReflect.Descriptor instead.
func (*CMsgOverworldTokenQuantity) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgOverworldTokenQuantity) GetTokenCounts() []*CMsgOverworldTokenCount {
	if x != nil {
		return x.TokenCounts
	}
	return nil
}

type CMsgOverworldEncounterTokenTreasureData struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	RewardOptions []*CMsgOverworldEncounterTokenTreasureData_RewardOption `protobuf:"bytes,1,rep,name=reward_options,json=rewardOptions" json:"reward_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterTokenTreasureData) Reset() {
	*x = CMsgOverworldEncounterTokenTreasureData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterTokenTreasureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterTokenTreasureData) ProtoMessage() {}

func (x *CMsgOverworldEncounterTokenTreasureData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterTokenTreasureData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterTokenTreasureData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgOverworldEncounterTokenTreasureData) GetRewardOptions() []*CMsgOverworldEncounterTokenTreasureData_RewardOption {
	if x != nil {
		return x.RewardOptions
	}
	return nil
}

type CMsgOverworldEncounterTokenQuestData struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Quests        []*CMsgOverworldEncounterTokenQuestData_Quest `protobuf:"bytes,1,rep,name=quests" json:"quests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterTokenQuestData) Reset() {
	*x = CMsgOverworldEncounterTokenQuestData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterTokenQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterTokenQuestData) ProtoMessage() {}

func (x *CMsgOverworldEncounterTokenQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterTokenQuestData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterTokenQuestData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgOverworldEncounterTokenQuestData) GetQuests() []*CMsgOverworldEncounterTokenQuestData_Quest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type CMsgOverworldHeroList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroIds       []int32                `protobuf:"varint,1,rep,name=hero_ids,json=heroIds" json:"hero_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldHeroList) Reset() {
	*x = CMsgOverworldHeroList{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldHeroList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldHeroList) ProtoMessage() {}

func (x *CMsgOverworldHeroList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldHeroList.ProtoReflect.Descriptor instead.
func (*CMsgOverworldHeroList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgOverworldHeroList) GetHeroIds() []int32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

type CMsgOverworldEncounterChooseHeroData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroList      *CMsgOverworldHeroList `protobuf:"bytes,1,opt,name=hero_list,json=heroList" json:"hero_list,omitempty"`
	Additive      *bool                  `protobuf:"varint,2,opt,name=additive" json:"additive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterChooseHeroData) Reset() {
	*x = CMsgOverworldEncounterChooseHeroData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterChooseHeroData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterChooseHeroData) ProtoMessage() {}

func (x *CMsgOverworldEncounterChooseHeroData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterChooseHeroData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterChooseHeroData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgOverworldEncounterChooseHeroData) GetHeroList() *CMsgOverworldHeroList {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *CMsgOverworldEncounterChooseHeroData) GetAdditive() bool {
	if x != nil && x.Additive != nil {
		return *x.Additive
	}
	return false
}

type CMsgOverworldEncounterProgressData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Choice        *int32                 `protobuf:"varint,1,opt,name=choice" json:"choice,omitempty"`
	Progress      *int32                 `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	MaxProgress   *int32                 `protobuf:"varint,3,opt,name=max_progress,json=maxProgress" json:"max_progress,omitempty"`
	Visited       *bool                  `protobuf:"varint,4,opt,name=visited" json:"visited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterProgressData) Reset() {
	*x = CMsgOverworldEncounterProgressData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterProgressData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterProgressData) ProtoMessage() {}

func (x *CMsgOverworldEncounterProgressData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterProgressData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterProgressData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgOverworldEncounterProgressData) GetChoice() int32 {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return 0
}

func (x *CMsgOverworldEncounterProgressData) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CMsgOverworldEncounterProgressData) GetMaxProgress() int32 {
	if x != nil && x.MaxProgress != nil {
		return *x.MaxProgress
	}
	return 0
}

func (x *CMsgOverworldEncounterProgressData) GetVisited() bool {
	if x != nil && x.Visited != nil {
		return *x.Visited
	}
	return false
}

type CMsgOverworldEncounterData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ExtraEncounterData []*CExtraMsgBlock      `protobuf:"bytes,1,rep,name=extra_encounter_data,json=extraEncounterData" json:"extra_encounter_data,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterData) Reset() {
	*x = CMsgOverworldEncounterData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterData) ProtoMessage() {}

func (x *CMsgOverworldEncounterData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgOverworldEncounterData) GetExtraEncounterData() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraEncounterData
	}
	return nil
}

type CMsgOverworldNode struct {
	state             protoimpl.MessageState      `protogen:"open.v1"`
	NodeId            *uint32                     `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NodeState         *EOverworldNodeState        `protobuf:"varint,2,opt,name=node_state,json=nodeState,enum=protocol.EOverworldNodeState,def=0" json:"node_state,omitempty"`
	NodeEncounterData *CMsgOverworldEncounterData `protobuf:"bytes,3,opt,name=node_encounter_data,json=nodeEncounterData" json:"node_encounter_data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgOverworldNode fields.
const (
	Default_CMsgOverworldNode_NodeState = EOverworldNodeState_k_eOverworldNodeState_Invalid
)

func (x *CMsgOverworldNode) Reset() {
	*x = CMsgOverworldNode{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldNode) ProtoMessage() {}

func (x *CMsgOverworldNode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldNode.ProtoReflect.Descriptor instead.
func (*CMsgOverworldNode) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgOverworldNode) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgOverworldNode) GetNodeState() EOverworldNodeState {
	if x != nil && x.NodeState != nil {
		return *x.NodeState
	}
	return Default_CMsgOverworldNode_NodeState
}

func (x *CMsgOverworldNode) GetNodeEncounterData() *CMsgOverworldEncounterData {
	if x != nil {
		return x.NodeEncounterData
	}
	return nil
}

type CMsgOverworldPath struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	PathId        *uint32                     `protobuf:"varint,1,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	PathCost      *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=path_cost,json=pathCost" json:"path_cost,omitempty"`
	PathState     *EOverworldPathState        `protobuf:"varint,3,opt,name=path_state,json=pathState,enum=protocol.EOverworldPathState,def=0" json:"path_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgOverworldPath fields.
const (
	Default_CMsgOverworldPath_PathState = EOverworldPathState_k_eOverworldPathState_Invalid
)

func (x *CMsgOverworldPath) Reset() {
	*x = CMsgOverworldPath{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldPath) ProtoMessage() {}

func (x *CMsgOverworldPath) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldPath.ProtoReflect.Descriptor instead.
func (*CMsgOverworldPath) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgOverworldPath) GetPathId() uint32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

func (x *CMsgOverworldPath) GetPathCost() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.PathCost
	}
	return nil
}

func (x *CMsgOverworldPath) GetPathState() EOverworldPathState {
	if x != nil && x.PathState != nil {
		return *x.PathState
	}
	return Default_CMsgOverworldPath_PathState
}

type CMsgOverworldMinigameCustomData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MinigameType:
	//
	//	*CMsgOverworldMinigameCustomData_SurvivorsData
	MinigameType  isCMsgOverworldMinigameCustomData_MinigameType `protobuf_oneof:"minigame_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldMinigameCustomData) Reset() {
	*x = CMsgOverworldMinigameCustomData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldMinigameCustomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldMinigameCustomData) ProtoMessage() {}

func (x *CMsgOverworldMinigameCustomData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldMinigameCustomData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldMinigameCustomData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgOverworldMinigameCustomData) GetMinigameType() isCMsgOverworldMinigameCustomData_MinigameType {
	if x != nil {
		return x.MinigameType
	}
	return nil
}

func (x *CMsgOverworldMinigameCustomData) GetSurvivorsData() *CMsgSurvivorsUserData {
	if x != nil {
		if x, ok := x.MinigameType.(*CMsgOverworldMinigameCustomData_SurvivorsData); ok {
			return x.SurvivorsData
		}
	}
	return nil
}

type isCMsgOverworldMinigameCustomData_MinigameType interface {
	isCMsgOverworldMinigameCustomData_MinigameType()
}

type CMsgOverworldMinigameCustomData_SurvivorsData struct {
	SurvivorsData *CMsgSurvivorsUserData `protobuf:"bytes,1,opt,name=survivors_data,json=survivorsData,oneof"`
}

func (*CMsgOverworldMinigameCustomData_SurvivorsData) isCMsgOverworldMinigameCustomData_MinigameType() {
}

type CMsgOverworldMinigameUserData struct {
	state          protoimpl.MessageState           `protogen:"open.v1"`
	NodeId         *uint32                          `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	CurrencyAmount *uint32                          `protobuf:"varint,2,opt,name=currency_amount,json=currencyAmount" json:"currency_amount,omitempty"`
	CustomData     *CMsgOverworldMinigameCustomData `protobuf:"bytes,3,opt,name=custom_data,json=customData" json:"custom_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgOverworldMinigameUserData) Reset() {
	*x = CMsgOverworldMinigameUserData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldMinigameUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldMinigameUserData) ProtoMessage() {}

func (x *CMsgOverworldMinigameUserData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldMinigameUserData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldMinigameUserData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgOverworldMinigameUserData) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgOverworldMinigameUserData) GetCurrencyAmount() uint32 {
	if x != nil && x.CurrencyAmount != nil {
		return *x.CurrencyAmount
	}
	return 0
}

func (x *CMsgOverworldMinigameUserData) GetCustomData() *CMsgOverworldMinigameCustomData {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type CMsgOverworldUserData struct {
	state          protoimpl.MessageState                     `protogen:"open.v1"`
	TokenInventory *CMsgOverworldTokenQuantity                `protobuf:"bytes,1,opt,name=token_inventory,json=tokenInventory" json:"token_inventory,omitempty"`
	OverworldNodes []*CMsgOverworldNode                       `protobuf:"bytes,2,rep,name=overworld_nodes,json=overworldNodes" json:"overworld_nodes,omitempty"`
	OverworldPaths []*CMsgOverworldPath                       `protobuf:"bytes,3,rep,name=overworld_paths,json=overworldPaths" json:"overworld_paths,omitempty"`
	CurrentNodeId  *uint32                                    `protobuf:"varint,4,opt,name=current_node_id,json=currentNodeId" json:"current_node_id,omitempty"`
	MinigameData   []*CMsgOverworldUserData_MinigameDataEntry `protobuf:"bytes,5,rep,name=minigame_data,json=minigameData" json:"minigame_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgOverworldUserData) Reset() {
	*x = CMsgOverworldUserData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldUserData) ProtoMessage() {}

func (x *CMsgOverworldUserData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldUserData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldUserData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgOverworldUserData) GetTokenInventory() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenInventory
	}
	return nil
}

func (x *CMsgOverworldUserData) GetOverworldNodes() []*CMsgOverworldNode {
	if x != nil {
		return x.OverworldNodes
	}
	return nil
}

func (x *CMsgOverworldUserData) GetOverworldPaths() []*CMsgOverworldPath {
	if x != nil {
		return x.OverworldPaths
	}
	return nil
}

func (x *CMsgOverworldUserData) GetCurrentNodeId() uint32 {
	if x != nil && x.CurrentNodeId != nil {
		return *x.CurrentNodeId
	}
	return 0
}

func (x *CMsgOverworldUserData) GetMinigameData() []*CMsgOverworldUserData_MinigameDataEntry {
	if x != nil {
		return x.MinigameData
	}
	return nil
}

type CMsgOverworldMatchRewards struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Players       []*CMsgOverworldMatchRewards_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldMatchRewards) Reset() {
	*x = CMsgOverworldMatchRewards{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldMatchRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldMatchRewards) ProtoMessage() {}

func (x *CMsgOverworldMatchRewards) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldMatchRewards.ProtoReflect.Descriptor instead.
func (*CMsgOverworldMatchRewards) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgOverworldMatchRewards) GetPlayers() []*CMsgOverworldMatchRewards_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgClientToGCOverworldGetUserData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldGetUserData) Reset() {
	*x = CMsgClientToGCOverworldGetUserData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGetUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGetUserData) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGetUserData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGetUserData.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGetUserData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientToGCOverworldGetUserData) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

type CMsgClientToGCOverworldGetUserDataResponse struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldGetUserDataResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldGetUserDataResponse_EResponse,def=0" json:"response,omitempty"`
	UserData      *CMsgOverworldUserData                                `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldGetUserDataResponse fields.
const (
	Default_CMsgClientToGCOverworldGetUserDataResponse_Response = CMsgClientToGCOverworldGetUserDataResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldGetUserDataResponse) Reset() {
	*x = CMsgClientToGCOverworldGetUserDataResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGetUserDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGetUserDataResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGetUserDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGetUserDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGetUserDataResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgClientToGCOverworldGetUserDataResponse) GetResponse() CMsgClientToGCOverworldGetUserDataResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldGetUserDataResponse_Response
}

func (x *CMsgClientToGCOverworldGetUserDataResponse) GetUserData() *CMsgOverworldUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type CMsgGCToClientOverworldUserDataUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	UserData      *CMsgOverworldUserData `protobuf:"bytes,2,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientOverworldUserDataUpdated) Reset() {
	*x = CMsgGCToClientOverworldUserDataUpdated{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientOverworldUserDataUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientOverworldUserDataUpdated) ProtoMessage() {}

func (x *CMsgGCToClientOverworldUserDataUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientOverworldUserDataUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientOverworldUserDataUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgGCToClientOverworldUserDataUpdated) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgGCToClientOverworldUserDataUpdated) GetUserData() *CMsgOverworldUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type CMsgClientToGCOverworldCompletePath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	PathId        *uint32                `protobuf:"varint,2,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldCompletePath) Reset() {
	*x = CMsgClientToGCOverworldCompletePath{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldCompletePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldCompletePath) ProtoMessage() {}

func (x *CMsgClientToGCOverworldCompletePath) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldCompletePath.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldCompletePath) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientToGCOverworldCompletePath) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldCompletePath) GetPathId() uint32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

type CMsgClientToGCOverworldCompletePathResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldCompletePathResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldCompletePathResponse_EResponse,def=0" json:"response,omitempty"`
	ClaimResponse *CMsgDOTAClaimEventActionResponse                      `protobuf:"bytes,2,opt,name=claim_response,json=claimResponse" json:"claim_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldCompletePathResponse fields.
const (
	Default_CMsgClientToGCOverworldCompletePathResponse_Response = CMsgClientToGCOverworldCompletePathResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldCompletePathResponse) Reset() {
	*x = CMsgClientToGCOverworldCompletePathResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldCompletePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldCompletePathResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldCompletePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldCompletePathResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldCompletePathResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgClientToGCOverworldCompletePathResponse) GetResponse() CMsgClientToGCOverworldCompletePathResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldCompletePathResponse_Response
}

func (x *CMsgClientToGCOverworldCompletePathResponse) GetClaimResponse() *CMsgDOTAClaimEventActionResponse {
	if x != nil {
		return x.ClaimResponse
	}
	return nil
}

type CMsgOverworldEncounterPitFighterRewardData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenId       *uint32                `protobuf:"varint,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	Choice        *uint32                `protobuf:"varint,2,opt,name=choice" json:"choice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterPitFighterRewardData) Reset() {
	*x = CMsgOverworldEncounterPitFighterRewardData{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterPitFighterRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterPitFighterRewardData) ProtoMessage() {}

func (x *CMsgOverworldEncounterPitFighterRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterPitFighterRewardData.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterPitFighterRewardData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgOverworldEncounterPitFighterRewardData) GetTokenId() uint32 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CMsgOverworldEncounterPitFighterRewardData) GetChoice() uint32 {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return 0
}

type CMsgClientToGCOverworldClaimEncounterReward struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	OverworldId        *uint32                     `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	NodeId             *uint32                     `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	RewardData         *uint32                     `protobuf:"varint,3,opt,name=reward_data,json=rewardData" json:"reward_data,omitempty"`
	PeriodicResourceId *uint32                     `protobuf:"varint,4,opt,name=periodic_resource_id,json=periodicResourceId" json:"periodic_resource_id,omitempty"`
	ExtraRewardData    *CMsgOverworldEncounterData `protobuf:"bytes,5,opt,name=extra_reward_data,json=extraRewardData" json:"extra_reward_data,omitempty"`
	LeaderboardData    *uint32                     `protobuf:"varint,6,opt,name=leaderboard_data,json=leaderboardData" json:"leaderboard_data,omitempty"`
	LeaderboardIndex   *uint32                     `protobuf:"varint,7,opt,name=leaderboard_index,json=leaderboardIndex" json:"leaderboard_index,omitempty"`
	ShouldClaimReward  *bool                       `protobuf:"varint,8,opt,name=should_claim_reward,json=shouldClaimReward" json:"should_claim_reward,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) Reset() {
	*x = CMsgClientToGCOverworldClaimEncounterReward{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldClaimEncounterReward) ProtoMessage() {}

func (x *CMsgClientToGCOverworldClaimEncounterReward) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldClaimEncounterReward.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldClaimEncounterReward) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetRewardData() uint32 {
	if x != nil && x.RewardData != nil {
		return *x.RewardData
	}
	return 0
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetPeriodicResourceId() uint32 {
	if x != nil && x.PeriodicResourceId != nil {
		return *x.PeriodicResourceId
	}
	return 0
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetExtraRewardData() *CMsgOverworldEncounterData {
	if x != nil {
		return x.ExtraRewardData
	}
	return nil
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetLeaderboardData() uint32 {
	if x != nil && x.LeaderboardData != nil {
		return *x.LeaderboardData
	}
	return 0
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetLeaderboardIndex() uint32 {
	if x != nil && x.LeaderboardIndex != nil {
		return *x.LeaderboardIndex
	}
	return 0
}

func (x *CMsgClientToGCOverworldClaimEncounterReward) GetShouldClaimReward() bool {
	if x != nil && x.ShouldClaimReward != nil {
		return *x.ShouldClaimReward
	}
	return false
}

type CMsgClientToGCOverworldClaimEncounterRewardResponse struct {
	state          protoimpl.MessageState                                         `protogen:"open.v1"`
	Response       *CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse,def=0" json:"response,omitempty"`
	ClaimResponse  *CMsgDOTAClaimEventActionResponse                              `protobuf:"bytes,2,opt,name=claim_response,json=claimResponse" json:"claim_response,omitempty"`
	TokensReceived *CMsgOverworldTokenQuantity                                    `protobuf:"bytes,3,opt,name=tokens_received,json=tokensReceived" json:"tokens_received,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldClaimEncounterRewardResponse fields.
const (
	Default_CMsgClientToGCOverworldClaimEncounterRewardResponse_Response = CMsgClientToGCOverworldClaimEncounterRewardResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse) Reset() {
	*x = CMsgClientToGCOverworldClaimEncounterRewardResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldClaimEncounterRewardResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldClaimEncounterRewardResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldClaimEncounterRewardResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse) GetResponse() CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldClaimEncounterRewardResponse_Response
}

func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse) GetClaimResponse() *CMsgDOTAClaimEventActionResponse {
	if x != nil {
		return x.ClaimResponse
	}
	return nil
}

func (x *CMsgClientToGCOverworldClaimEncounterRewardResponse) GetTokensReceived() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokensReceived
	}
	return nil
}

type CMsgClientToGCOverworldVisitEncounter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	NodeId        *uint32                `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldVisitEncounter) Reset() {
	*x = CMsgClientToGCOverworldVisitEncounter{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldVisitEncounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldVisitEncounter) ProtoMessage() {}

func (x *CMsgClientToGCOverworldVisitEncounter) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldVisitEncounter.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldVisitEncounter) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgClientToGCOverworldVisitEncounter) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldVisitEncounter) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type CMsgClientToGCOverworldVisitEncounterResponse struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldVisitEncounterResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldVisitEncounterResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldVisitEncounterResponse fields.
const (
	Default_CMsgClientToGCOverworldVisitEncounterResponse_Response = CMsgClientToGCOverworldVisitEncounterResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldVisitEncounterResponse) Reset() {
	*x = CMsgClientToGCOverworldVisitEncounterResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldVisitEncounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldVisitEncounterResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldVisitEncounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldVisitEncounterResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldVisitEncounterResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientToGCOverworldVisitEncounterResponse) GetResponse() CMsgClientToGCOverworldVisitEncounterResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldVisitEncounterResponse_Response
}

type CMsgClientToGCOverworldMoveToNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	NodeId        *uint32                `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldMoveToNode) Reset() {
	*x = CMsgClientToGCOverworldMoveToNode{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldMoveToNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldMoveToNode) ProtoMessage() {}

func (x *CMsgClientToGCOverworldMoveToNode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldMoveToNode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldMoveToNode) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientToGCOverworldMoveToNode) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldMoveToNode) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type CMsgClientToGCOverworldMoveToNodeResponse struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldMoveToNodeResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldMoveToNodeResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldMoveToNodeResponse fields.
const (
	Default_CMsgClientToGCOverworldMoveToNodeResponse_Response = CMsgClientToGCOverworldMoveToNodeResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldMoveToNodeResponse) Reset() {
	*x = CMsgClientToGCOverworldMoveToNodeResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldMoveToNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldMoveToNodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldMoveToNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldMoveToNodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldMoveToNodeResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgClientToGCOverworldMoveToNodeResponse) GetResponse() CMsgClientToGCOverworldMoveToNodeResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldMoveToNodeResponse_Response
}

type CMsgClientToGCOverworldTradeTokens struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	OverworldId   *uint32                     `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	TokenOffer    *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=token_offer,json=tokenOffer" json:"token_offer,omitempty"`
	TokenRequest  *CMsgOverworldTokenQuantity `protobuf:"bytes,3,opt,name=token_request,json=tokenRequest" json:"token_request,omitempty"`
	Recipe        *uint32                     `protobuf:"varint,4,opt,name=recipe" json:"recipe,omitempty"`
	EncounterId   *uint32                     `protobuf:"varint,5,opt,name=encounter_id,json=encounterId" json:"encounter_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldTradeTokens) Reset() {
	*x = CMsgClientToGCOverworldTradeTokens{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldTradeTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldTradeTokens) ProtoMessage() {}

func (x *CMsgClientToGCOverworldTradeTokens) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldTradeTokens.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldTradeTokens) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgClientToGCOverworldTradeTokens) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldTradeTokens) GetTokenOffer() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenOffer
	}
	return nil
}

func (x *CMsgClientToGCOverworldTradeTokens) GetTokenRequest() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenRequest
	}
	return nil
}

func (x *CMsgClientToGCOverworldTradeTokens) GetRecipe() uint32 {
	if x != nil && x.Recipe != nil {
		return *x.Recipe
	}
	return 0
}

func (x *CMsgClientToGCOverworldTradeTokens) GetEncounterId() uint32 {
	if x != nil && x.EncounterId != nil {
		return *x.EncounterId
	}
	return 0
}

type CMsgClientToGCOverworldTradeTokensResponse struct {
	state          protoimpl.MessageState                                `protogen:"open.v1"`
	Response       *CMsgClientToGCOverworldTradeTokensResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldTradeTokensResponse_EResponse,def=0" json:"response,omitempty"`
	TokensReceived *CMsgOverworldTokenQuantity                           `protobuf:"bytes,2,opt,name=tokens_received,json=tokensReceived" json:"tokens_received,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldTradeTokensResponse fields.
const (
	Default_CMsgClientToGCOverworldTradeTokensResponse_Response = CMsgClientToGCOverworldTradeTokensResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldTradeTokensResponse) Reset() {
	*x = CMsgClientToGCOverworldTradeTokensResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldTradeTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldTradeTokensResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldTradeTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldTradeTokensResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldTradeTokensResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgClientToGCOverworldTradeTokensResponse) GetResponse() CMsgClientToGCOverworldTradeTokensResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldTradeTokensResponse_Response
}

func (x *CMsgClientToGCOverworldTradeTokensResponse) GetTokensReceived() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokensReceived
	}
	return nil
}

type CMsgClientToGCOverworldGiftTokens struct {
	state              protoimpl.MessageState   `protogen:"open.v1"`
	OverworldId        *uint32                  `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	TokenGift          *CMsgOverworldTokenCount `protobuf:"bytes,2,opt,name=token_gift,json=tokenGift" json:"token_gift,omitempty"`
	RecipientAccountId *uint32                  `protobuf:"varint,3,opt,name=recipient_account_id,json=recipientAccountId" json:"recipient_account_id,omitempty"`
	PeriodicResourceId *uint32                  `protobuf:"varint,4,opt,name=periodic_resource_id,json=periodicResourceId" json:"periodic_resource_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldGiftTokens) Reset() {
	*x = CMsgClientToGCOverworldGiftTokens{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGiftTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGiftTokens) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGiftTokens) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGiftTokens.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGiftTokens) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgClientToGCOverworldGiftTokens) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldGiftTokens) GetTokenGift() *CMsgOverworldTokenCount {
	if x != nil {
		return x.TokenGift
	}
	return nil
}

func (x *CMsgClientToGCOverworldGiftTokens) GetRecipientAccountId() uint32 {
	if x != nil && x.RecipientAccountId != nil {
		return *x.RecipientAccountId
	}
	return 0
}

func (x *CMsgClientToGCOverworldGiftTokens) GetPeriodicResourceId() uint32 {
	if x != nil && x.PeriodicResourceId != nil {
		return *x.PeriodicResourceId
	}
	return 0
}

type CMsgClientToGCOverworldGiftTokensResponse struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldGiftTokensResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldGiftTokensResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldGiftTokensResponse fields.
const (
	Default_CMsgClientToGCOverworldGiftTokensResponse_Response = CMsgClientToGCOverworldGiftTokensResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldGiftTokensResponse) Reset() {
	*x = CMsgClientToGCOverworldGiftTokensResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGiftTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGiftTokensResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGiftTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGiftTokensResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGiftTokensResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgClientToGCOverworldGiftTokensResponse) GetResponse() CMsgClientToGCOverworldGiftTokensResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldGiftTokensResponse_Response
}

type CMsgClientToGCOverworldRequestTokensNeededByFriend struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FriendAccountId *uint32                `protobuf:"varint,1,opt,name=friend_account_id,json=friendAccountId" json:"friend_account_id,omitempty"`
	OverworldId     *uint32                `protobuf:"varint,2,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriend) Reset() {
	*x = CMsgClientToGCOverworldRequestTokensNeededByFriend{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldRequestTokensNeededByFriend) ProtoMessage() {}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriend) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldRequestTokensNeededByFriend.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldRequestTokensNeededByFriend) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriend) GetFriendAccountId() uint32 {
	if x != nil && x.FriendAccountId != nil {
		return *x.FriendAccountId
	}
	return 0
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriend) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

type CMsgClientToGCOverworldRequestTokensNeededByFriendResponse struct {
	state         protoimpl.MessageState                                                `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse,def=0" json:"response,omitempty"`
	TokenQuantity *CMsgOverworldTokenQuantity                                           `protobuf:"bytes,2,opt,name=token_quantity,json=tokenQuantity" json:"token_quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldRequestTokensNeededByFriendResponse fields.
const (
	Default_CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_Response = CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) Reset() {
	*x = CMsgClientToGCOverworldRequestTokensNeededByFriendResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) GetResponse() CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_Response
}

func (x *CMsgClientToGCOverworldRequestTokensNeededByFriendResponse) GetTokenQuantity() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenQuantity
	}
	return nil
}

type CMsgClientToGCOverworldDevResetAll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldDevResetAll) Reset() {
	*x = CMsgClientToGCOverworldDevResetAll{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevResetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevResetAll) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevResetAll) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevResetAll.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevResetAll) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgClientToGCOverworldDevResetAll) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

type CMsgClientToGCOverworldDevResetAllResponse struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldDevResetAllResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldDevResetAllResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldDevResetAllResponse fields.
const (
	Default_CMsgClientToGCOverworldDevResetAllResponse_Response = CMsgClientToGCOverworldDevResetAllResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldDevResetAllResponse) Reset() {
	*x = CMsgClientToGCOverworldDevResetAllResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevResetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevResetAllResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevResetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevResetAllResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevResetAllResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgClientToGCOverworldDevResetAllResponse) GetResponse() CMsgClientToGCOverworldDevResetAllResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldDevResetAllResponse_Response
}

type CMsgClientToGCOverworldDevResetNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	NodeId        *uint32                `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldDevResetNode) Reset() {
	*x = CMsgClientToGCOverworldDevResetNode{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevResetNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevResetNode) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevResetNode) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevResetNode.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevResetNode) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgClientToGCOverworldDevResetNode) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldDevResetNode) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

type CMsgClientToGCOverworldDevResetNodeResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldDevResetNodeResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldDevResetNodeResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldDevResetNodeResponse fields.
const (
	Default_CMsgClientToGCOverworldDevResetNodeResponse_Response = CMsgClientToGCOverworldDevResetNodeResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldDevResetNodeResponse) Reset() {
	*x = CMsgClientToGCOverworldDevResetNodeResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevResetNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevResetNodeResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevResetNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevResetNodeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevResetNodeResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgClientToGCOverworldDevResetNodeResponse) GetResponse() CMsgClientToGCOverworldDevResetNodeResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldDevResetNodeResponse_Response
}

type CMsgClientToGCOverworldDevGrantTokens struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	OverworldId   *uint32                     `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	TokenQuantity *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=token_quantity,json=tokenQuantity" json:"token_quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldDevGrantTokens) Reset() {
	*x = CMsgClientToGCOverworldDevGrantTokens{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevGrantTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevGrantTokens) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevGrantTokens) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevGrantTokens.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevGrantTokens) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgClientToGCOverworldDevGrantTokens) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldDevGrantTokens) GetTokenQuantity() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenQuantity
	}
	return nil
}

type CMsgClientToGCOverworldDevGrantTokensResponse struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldDevGrantTokensResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldDevGrantTokensResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldDevGrantTokensResponse fields.
const (
	Default_CMsgClientToGCOverworldDevGrantTokensResponse_Response = CMsgClientToGCOverworldDevGrantTokensResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldDevGrantTokensResponse) Reset() {
	*x = CMsgClientToGCOverworldDevGrantTokensResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevGrantTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevGrantTokensResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevGrantTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevGrantTokensResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevGrantTokensResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgClientToGCOverworldDevGrantTokensResponse) GetResponse() CMsgClientToGCOverworldDevGrantTokensResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldDevGrantTokensResponse_Response
}

type CMsgClientToGCOverworldDevClearInventory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OverworldId   *uint32                `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldDevClearInventory) Reset() {
	*x = CMsgClientToGCOverworldDevClearInventory{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevClearInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevClearInventory) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevClearInventory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevClearInventory.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevClearInventory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgClientToGCOverworldDevClearInventory) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

type CMsgClientToGCOverworldDevClearInventoryResponse struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldDevClearInventoryResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldDevClearInventoryResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldDevClearInventoryResponse fields.
const (
	Default_CMsgClientToGCOverworldDevClearInventoryResponse_Response = CMsgClientToGCOverworldDevClearInventoryResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldDevClearInventoryResponse) Reset() {
	*x = CMsgClientToGCOverworldDevClearInventoryResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldDevClearInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldDevClearInventoryResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldDevClearInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldDevClearInventoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldDevClearInventoryResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgClientToGCOverworldDevClearInventoryResponse) GetResponse() CMsgClientToGCOverworldDevClearInventoryResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldDevClearInventoryResponse_Response
}

type CMsgClientToGCOverworldFeedback struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Language      *uint32                `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	OverworldId   *uint32                `protobuf:"varint,2,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	Feedback      *string                `protobuf:"bytes,3,opt,name=feedback" json:"feedback,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldFeedback) Reset() {
	*x = CMsgClientToGCOverworldFeedback{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldFeedback) ProtoMessage() {}

func (x *CMsgClientToGCOverworldFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldFeedback.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldFeedback) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgClientToGCOverworldFeedback) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CMsgClientToGCOverworldFeedback) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldFeedback) GetFeedback() string {
	if x != nil && x.Feedback != nil {
		return *x.Feedback
	}
	return ""
}

type CMsgClientToGCOverworldFeedbackResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldFeedbackResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldFeedbackResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldFeedbackResponse fields.
const (
	Default_CMsgClientToGCOverworldFeedbackResponse_Response = CMsgClientToGCOverworldFeedbackResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldFeedbackResponse) Reset() {
	*x = CMsgClientToGCOverworldFeedbackResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldFeedbackResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldFeedbackResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgClientToGCOverworldFeedbackResponse) GetResponse() CMsgClientToGCOverworldFeedbackResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldFeedbackResponse_Response
}

type CMsgClientToGCOverworldGetDynamicImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Magic         *uint32                `protobuf:"varint,1,opt,name=magic" json:"magic,omitempty"`
	ImageId       *uint32                `protobuf:"varint,2,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	Language      *uint32                `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldGetDynamicImage) Reset() {
	*x = CMsgClientToGCOverworldGetDynamicImage{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGetDynamicImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGetDynamicImage) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGetDynamicImage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGetDynamicImage.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGetDynamicImage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgClientToGCOverworldGetDynamicImage) GetMagic() uint32 {
	if x != nil && x.Magic != nil {
		return *x.Magic
	}
	return 0
}

func (x *CMsgClientToGCOverworldGetDynamicImage) GetImageId() uint32 {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return 0
}

func (x *CMsgClientToGCOverworldGetDynamicImage) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CMsgClientToGCOverworldGetDynamicImageResponse struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	ImageId       *uint32                                                 `protobuf:"varint,1,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
	Images        []*CMsgClientToGCOverworldGetDynamicImageResponse_Image `protobuf:"bytes,2,rep,name=images" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse) Reset() {
	*x = CMsgClientToGCOverworldGetDynamicImageResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGetDynamicImageResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGetDynamicImageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGetDynamicImageResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse) GetImageId() uint32 {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return 0
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse) GetImages() []*CMsgClientToGCOverworldGetDynamicImageResponse_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type CMsgClientToGCOverworldMinigameAction struct {
	state          protoimpl.MessageState    `protogen:"open.v1"`
	OverworldId    *uint32                   `protobuf:"varint,1,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	NodeId         *uint32                   `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Action         *EOverworldMinigameAction `protobuf:"varint,3,opt,name=action,enum=protocol.EOverworldMinigameAction,def=0" json:"action,omitempty"`
	Selection      *uint32                   `protobuf:"varint,4,opt,name=selection" json:"selection,omitempty"`
	OptionValue    *uint32                   `protobuf:"varint,5,opt,name=option_value,json=optionValue" json:"option_value,omitempty"`
	CurrencyAmount *uint32                   `protobuf:"varint,6,opt,name=currency_amount,json=currencyAmount" json:"currency_amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldMinigameAction fields.
const (
	Default_CMsgClientToGCOverworldMinigameAction_Action = EOverworldMinigameAction_k_eOverworldMinigameAction_Invalid
)

func (x *CMsgClientToGCOverworldMinigameAction) Reset() {
	*x = CMsgClientToGCOverworldMinigameAction{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldMinigameAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldMinigameAction) ProtoMessage() {}

func (x *CMsgClientToGCOverworldMinigameAction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldMinigameAction.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldMinigameAction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgClientToGCOverworldMinigameAction) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

func (x *CMsgClientToGCOverworldMinigameAction) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgClientToGCOverworldMinigameAction) GetAction() EOverworldMinigameAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CMsgClientToGCOverworldMinigameAction_Action
}

func (x *CMsgClientToGCOverworldMinigameAction) GetSelection() uint32 {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return 0
}

func (x *CMsgClientToGCOverworldMinigameAction) GetOptionValue() uint32 {
	if x != nil && x.OptionValue != nil {
		return *x.OptionValue
	}
	return 0
}

func (x *CMsgClientToGCOverworldMinigameAction) GetCurrencyAmount() uint32 {
	if x != nil && x.CurrencyAmount != nil {
		return *x.CurrencyAmount
	}
	return 0
}

type CMsgClientToGCOverworldMinigameActionResponse struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Response      *CMsgClientToGCOverworldMinigameActionResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOverworldMinigameActionResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldMinigameActionResponse fields.
const (
	Default_CMsgClientToGCOverworldMinigameActionResponse_Response = CMsgClientToGCOverworldMinigameActionResponse_k_eInternalError
)

func (x *CMsgClientToGCOverworldMinigameActionResponse) Reset() {
	*x = CMsgClientToGCOverworldMinigameActionResponse{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldMinigameActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldMinigameActionResponse) ProtoMessage() {}

func (x *CMsgClientToGCOverworldMinigameActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldMinigameActionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldMinigameActionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgClientToGCOverworldMinigameActionResponse) GetResponse() CMsgClientToGCOverworldMinigameActionResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOverworldMinigameActionResponse_Response
}

type CMsgOverworldEncounterTokenTreasureData_RewardOption struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	RewardData    *uint32                     `protobuf:"varint,1,opt,name=reward_data,json=rewardData" json:"reward_data,omitempty"`
	TokenCost     *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=token_cost,json=tokenCost" json:"token_cost,omitempty"`
	TokenReward   *CMsgOverworldTokenQuantity `protobuf:"bytes,3,opt,name=token_reward,json=tokenReward" json:"token_reward,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterTokenTreasureData_RewardOption) Reset() {
	*x = CMsgOverworldEncounterTokenTreasureData_RewardOption{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterTokenTreasureData_RewardOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterTokenTreasureData_RewardOption) ProtoMessage() {}

func (x *CMsgOverworldEncounterTokenTreasureData_RewardOption) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterTokenTreasureData_RewardOption.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterTokenTreasureData_RewardOption) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgOverworldEncounterTokenTreasureData_RewardOption) GetRewardData() uint32 {
	if x != nil && x.RewardData != nil {
		return *x.RewardData
	}
	return 0
}

func (x *CMsgOverworldEncounterTokenTreasureData_RewardOption) GetTokenCost() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenCost
	}
	return nil
}

func (x *CMsgOverworldEncounterTokenTreasureData_RewardOption) GetTokenReward() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenReward
	}
	return nil
}

type CMsgOverworldEncounterTokenQuestData_Quest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	RewardData    *uint32                     `protobuf:"varint,1,opt,name=reward_data,json=rewardData" json:"reward_data,omitempty"`
	TokenCost     *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=token_cost,json=tokenCost" json:"token_cost,omitempty"`
	TokenReward   *CMsgOverworldTokenQuantity `protobuf:"bytes,3,opt,name=token_reward,json=tokenReward" json:"token_reward,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldEncounterTokenQuestData_Quest) Reset() {
	*x = CMsgOverworldEncounterTokenQuestData_Quest{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldEncounterTokenQuestData_Quest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldEncounterTokenQuestData_Quest) ProtoMessage() {}

func (x *CMsgOverworldEncounterTokenQuestData_Quest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldEncounterTokenQuestData_Quest.ProtoReflect.Descriptor instead.
func (*CMsgOverworldEncounterTokenQuestData_Quest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgOverworldEncounterTokenQuestData_Quest) GetRewardData() uint32 {
	if x != nil && x.RewardData != nil {
		return *x.RewardData
	}
	return 0
}

func (x *CMsgOverworldEncounterTokenQuestData_Quest) GetTokenCost() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenCost
	}
	return nil
}

func (x *CMsgOverworldEncounterTokenQuestData_Quest) GetTokenReward() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.TokenReward
	}
	return nil
}

type CMsgOverworldUserData_MinigameDataEntry struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Key           *uint32                        `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value         *CMsgOverworldMinigameUserData `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldUserData_MinigameDataEntry) Reset() {
	*x = CMsgOverworldUserData_MinigameDataEntry{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldUserData_MinigameDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldUserData_MinigameDataEntry) ProtoMessage() {}

func (x *CMsgOverworldUserData_MinigameDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldUserData_MinigameDataEntry.ProtoReflect.Descriptor instead.
func (*CMsgOverworldUserData_MinigameDataEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgOverworldUserData_MinigameDataEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CMsgOverworldUserData_MinigameDataEntry) GetValue() *CMsgOverworldMinigameUserData {
	if x != nil {
		return x.Value
	}
	return nil
}

type CMsgOverworldMatchRewards_Player struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	PlayerSlot    *uint32                     `protobuf:"varint,1,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	Tokens        *CMsgOverworldTokenQuantity `protobuf:"bytes,2,opt,name=tokens" json:"tokens,omitempty"`
	OverworldId   *uint32                     `protobuf:"varint,3,opt,name=overworld_id,json=overworldId" json:"overworld_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgOverworldMatchRewards_Player) Reset() {
	*x = CMsgOverworldMatchRewards_Player{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgOverworldMatchRewards_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgOverworldMatchRewards_Player) ProtoMessage() {}

func (x *CMsgOverworldMatchRewards_Player) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgOverworldMatchRewards_Player.ProtoReflect.Descriptor instead.
func (*CMsgOverworldMatchRewards_Player) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CMsgOverworldMatchRewards_Player) GetPlayerSlot() uint32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return 0
}

func (x *CMsgOverworldMatchRewards_Player) GetTokens() *CMsgOverworldTokenQuantity {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *CMsgOverworldMatchRewards_Player) GetOverworldId() uint32 {
	if x != nil && x.OverworldId != nil {
		return *x.OverworldId
	}
	return 0
}

type CMsgClientToGCOverworldGetDynamicImageResponse_Image struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	Width         *uint32                                                             `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height        *uint32                                                             `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Format        *CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat `protobuf:"varint,3,opt,name=format,enum=protocol.CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat,def=0" json:"format,omitempty"`
	ImageBytes    []byte                                                              `protobuf:"bytes,4,opt,name=image_bytes,json=imageBytes" json:"image_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOverworldGetDynamicImageResponse_Image fields.
const (
	Default_CMsgClientToGCOverworldGetDynamicImageResponse_Image_Format = CMsgClientToGCOverworldGetDynamicImageResponse_k_eUnknown
)

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) Reset() {
	*x = CMsgClientToGCOverworldGetDynamicImageResponse_Image{}
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverworldGetDynamicImageResponse_Image) ProtoMessage() {}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_overworld_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverworldGetDynamicImageResponse_Image.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverworldGetDynamicImageResponse_Image) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_overworld_proto_rawDescGZIP(), []int{43, 0}
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) GetFormat() CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CMsgClientToGCOverworldGetDynamicImageResponse_Image_Format
}

func (x *CMsgClientToGCOverworldGetDynamicImageResponse_Image) GetImageBytes() []byte {
	if x != nil {
		return x.ImageBytes
	}
	return nil
}

var File_dota_gcmessages_common_overworld_proto protoreflect.FileDescriptor

var file_dota_gcmessages_common_overworld_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x6f, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55,
	0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x27, 0x43, 0x4d,
	0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbd, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xad, 0x02, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x1a, 0xb6, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x32, 0x0a, 0x15,
	0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x48, 0x65, 0x72,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x09, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x68,
	0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x14, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x54, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1d, 0x6b, 0x5f,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09, 0x70, 0x61, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x75, 0x72,
	0x76, 0x69, 0x76, 0x6f, 0x72, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x75, 0x72, 0x76, 0x69, 0x76, 0x6f, 0x72, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x6f, 0x72, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x03, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d,
	0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a,
	0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x56, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x64, 0x0a, 0x11, 0x4d, 0x69, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xee, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x2a, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10,
	0x05, 0x22, 0x89, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64,
	0x22, 0xca, 0x03, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x6b, 0x5f, 0x65, 0x50, 0x61, 0x74, 0x68, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x50, 0x61, 0x74, 0x68, 0x41, 0x6c, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x09, 0x22, 0x5f, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x96,
	0x03, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xe8, 0x05, 0x0a, 0x33, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x75, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0x97, 0x03, 0x0a, 0x09, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x0f, 0x22, 0x63, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x56, 0x69, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x10, 0x09, 0x22,
	0x5f, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0xbd, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x09,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x07,
	0x22, 0x94, 0x02, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f,
	0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x10, 0x0c, 0x22, 0xec, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x69,
	0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0xa3, 0x03, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x69, 0x66,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x47, 0x69, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x02, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x69,
	0x66, 0x74, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x10, 0x0b, 0x22, 0x83, 0x01, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xd9, 0x03,
	0x0a, 0x3a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x42, 0x79, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x10, 0x09, 0x22, 0x47, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65,
	0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73,
	0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x06,
	0x22, 0x61, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44,
	0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x07, 0x22, 0x97, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0xb1, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x76,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65,
	0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x10, 0x06, 0x22, 0x4d, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x44, 0x65, 0x76, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x49, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x44, 0x65, 0x76, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65,
	0x76, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x06, 0x22, 0x7c,
	0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xa5, 0x02, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f,
	0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x10, 0x06, 0x22, 0x75, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47,
	0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xae, 0x03, 0x0a, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x65, 0x74, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x70, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x47, 0x65, 0x74, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x0a, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x13,
	0x45, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x5f, 0x65, 0x50, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0x02, 0x22, 0xad, 0x02, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x5e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xab, 0x03, 0x0a,
	0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x88, 0x02, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73,
	0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45,
	0x6e, 0x6f, 0x75, 0x67, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x0b, 0x2a, 0x7e, 0x0a, 0x13, 0x45, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x13, 0x45,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x2a,
	0xa8, 0x06, 0x0a, 0x15, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x6b,
	0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x10, 0x04,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65,
	0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x75,
	0x6c, 0x6c, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x61, 0x6c, 0x66,
	0x10, 0x09, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x73, 0x74,
	0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x0c, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x0e, 0x12,
	0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x10, 0x10, 0x12,
	0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x47, 0x69, 0x66, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x10, 0x11, 0x2a, 0xd4, 0x02, 0x0a, 0x18, 0x45,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d,
	0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65,
	0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x76, 0x47, 0x69, 0x76, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x10,
	0x03, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x6b,
	0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x67,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x10,
	0x06, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
})

var (
	file_dota_gcmessages_common_overworld_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_overworld_proto_rawDescData []byte
)

func file_dota_gcmessages_common_overworld_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_overworld_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_overworld_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_common_overworld_proto_rawDesc), len(file_dota_gcmessages_common_overworld_proto_rawDesc)))
	})
	return file_dota_gcmessages_common_overworld_proto_rawDescData
}

var file_dota_gcmessages_common_overworld_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_dota_gcmessages_common_overworld_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_dota_gcmessages_common_overworld_proto_goTypes = []any{
	(EOverworldNodeState)(0),                                                  // 0: protocol.EOverworldNodeState
	(EOverworldPathState)(0),                                                  // 1: protocol.EOverworldPathState
	(EOverworldAuditAction)(0),                                                // 2: protocol.EOverworldAuditAction
	(EOverworldMinigameAction)(0),                                             // 3: protocol.EOverworldMinigameAction
	(CMsgClientToGCOverworldGetUserDataResponse_EResponse)(0),                 // 4: protocol.CMsgClientToGCOverworldGetUserDataResponse.EResponse
	(CMsgClientToGCOverworldCompletePathResponse_EResponse)(0),                // 5: protocol.CMsgClientToGCOverworldCompletePathResponse.EResponse
	(CMsgClientToGCOverworldClaimEncounterRewardResponse_EResponse)(0),        // 6: protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse.EResponse
	(CMsgClientToGCOverworldVisitEncounterResponse_EResponse)(0),              // 7: protocol.CMsgClientToGCOverworldVisitEncounterResponse.EResponse
	(CMsgClientToGCOverworldMoveToNodeResponse_EResponse)(0),                  // 8: protocol.CMsgClientToGCOverworldMoveToNodeResponse.EResponse
	(CMsgClientToGCOverworldTradeTokensResponse_EResponse)(0),                 // 9: protocol.CMsgClientToGCOverworldTradeTokensResponse.EResponse
	(CMsgClientToGCOverworldGiftTokensResponse_EResponse)(0),                  // 10: protocol.CMsgClientToGCOverworldGiftTokensResponse.EResponse
	(CMsgClientToGCOverworldRequestTokensNeededByFriendResponse_EResponse)(0), // 11: protocol.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.EResponse
	(CMsgClientToGCOverworldDevResetAllResponse_EResponse)(0),                 // 12: protocol.CMsgClientToGCOverworldDevResetAllResponse.EResponse
	(CMsgClientToGCOverworldDevResetNodeResponse_EResponse)(0),                // 13: protocol.CMsgClientToGCOverworldDevResetNodeResponse.EResponse
	(CMsgClientToGCOverworldDevGrantTokensResponse_EResponse)(0),              // 14: protocol.CMsgClientToGCOverworldDevGrantTokensResponse.EResponse
	(CMsgClientToGCOverworldDevClearInventoryResponse_EResponse)(0),           // 15: protocol.CMsgClientToGCOverworldDevClearInventoryResponse.EResponse
	(CMsgClientToGCOverworldFeedbackResponse_EResponse)(0),                    // 16: protocol.CMsgClientToGCOverworldFeedbackResponse.EResponse
	(CMsgClientToGCOverworldGetDynamicImageResponse_EDynamicImageFormat)(0),   // 17: protocol.CMsgClientToGCOverworldGetDynamicImageResponse.EDynamicImageFormat
	(CMsgClientToGCOverworldMinigameActionResponse_EResponse)(0),              // 18: protocol.CMsgClientToGCOverworldMinigameActionResponse.EResponse
	(*CMsgOverworldTokenCount)(nil),                                           // 19: protocol.CMsgOverworldTokenCount
	(*CMsgOverworldTokenQuantity)(nil),                                        // 20: protocol.CMsgOverworldTokenQuantity
	(*CMsgOverworldEncounterTokenTreasureData)(nil),                           // 21: protocol.CMsgOverworldEncounterTokenTreasureData
	(*CMsgOverworldEncounterTokenQuestData)(nil),                              // 22: protocol.CMsgOverworldEncounterTokenQuestData
	(*CMsgOverworldHeroList)(nil),                                             // 23: protocol.CMsgOverworldHeroList
	(*CMsgOverworldEncounterChooseHeroData)(nil),                              // 24: protocol.CMsgOverworldEncounterChooseHeroData
	(*CMsgOverworldEncounterProgressData)(nil),                                // 25: protocol.CMsgOverworldEncounterProgressData
	(*CMsgOverworldEncounterData)(nil),                                        // 26: protocol.CMsgOverworldEncounterData
	(*CMsgOverworldNode)(nil),                                                 // 27: protocol.CMsgOverworldNode
	(*CMsgOverworldPath)(nil),                                                 // 28: protocol.CMsgOverworldPath
	(*CMsgOverworldMinigameCustomData)(nil),                                   // 29: protocol.CMsgOverworldMinigameCustomData
	(*CMsgOverworldMinigameUserData)(nil),                                     // 30: protocol.CMsgOverworldMinigameUserData
	(*CMsgOverworldUserData)(nil),                                             // 31: protocol.CMsgOverworldUserData
	(*CMsgOverworldMatchRewards)(nil),                                         // 32: protocol.CMsgOverworldMatchRewards
	(*CMsgClientToGCOverworldGetUserData)(nil),                                // 33: protocol.CMsgClientToGCOverworldGetUserData
	(*CMsgClientToGCOverworldGetUserDataResponse)(nil),                        // 34: protocol.CMsgClientToGCOverworldGetUserDataResponse
	(*CMsgGCToClientOverworldUserDataUpdated)(nil),                            // 35: protocol.CMsgGCToClientOverworldUserDataUpdated
	(*CMsgClientToGCOverworldCompletePath)(nil),                               // 36: protocol.CMsgClientToGCOverworldCompletePath
	(*CMsgClientToGCOverworldCompletePathResponse)(nil),                       // 37: protocol.CMsgClientToGCOverworldCompletePathResponse
	(*CMsgOverworldEncounterPitFighterRewardData)(nil),                        // 38: protocol.CMsgOverworldEncounterPitFighterRewardData
	(*CMsgClientToGCOverworldClaimEncounterReward)(nil),                       // 39: protocol.CMsgClientToGCOverworldClaimEncounterReward
	(*CMsgClientToGCOverworldClaimEncounterRewardResponse)(nil),               // 40: protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse
	(*CMsgClientToGCOverworldVisitEncounter)(nil),                             // 41: protocol.CMsgClientToGCOverworldVisitEncounter
	(*CMsgClientToGCOverworldVisitEncounterResponse)(nil),                     // 42: protocol.CMsgClientToGCOverworldVisitEncounterResponse
	(*CMsgClientToGCOverworldMoveToNode)(nil),                                 // 43: protocol.CMsgClientToGCOverworldMoveToNode
	(*CMsgClientToGCOverworldMoveToNodeResponse)(nil),                         // 44: protocol.CMsgClientToGCOverworldMoveToNodeResponse
	(*CMsgClientToGCOverworldTradeTokens)(nil),                                // 45: protocol.CMsgClientToGCOverworldTradeTokens
	(*CMsgClientToGCOverworldTradeTokensResponse)(nil),                        // 46: protocol.CMsgClientToGCOverworldTradeTokensResponse
	(*CMsgClientToGCOverworldGiftTokens)(nil),                                 // 47: protocol.CMsgClientToGCOverworldGiftTokens
	(*CMsgClientToGCOverworldGiftTokensResponse)(nil),                         // 48: protocol.CMsgClientToGCOverworldGiftTokensResponse
	(*CMsgClientToGCOverworldRequestTokensNeededByFriend)(nil),                // 49: protocol.CMsgClientToGCOverworldRequestTokensNeededByFriend
	(*CMsgClientToGCOverworldRequestTokensNeededByFriendResponse)(nil),        // 50: protocol.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse
	(*CMsgClientToGCOverworldDevResetAll)(nil),                                // 51: protocol.CMsgClientToGCOverworldDevResetAll
	(*CMsgClientToGCOverworldDevResetAllResponse)(nil),                        // 52: protocol.CMsgClientToGCOverworldDevResetAllResponse
	(*CMsgClientToGCOverworldDevResetNode)(nil),                               // 53: protocol.CMsgClientToGCOverworldDevResetNode
	(*CMsgClientToGCOverworldDevResetNodeResponse)(nil),                       // 54: protocol.CMsgClientToGCOverworldDevResetNodeResponse
	(*CMsgClientToGCOverworldDevGrantTokens)(nil),                             // 55: protocol.CMsgClientToGCOverworldDevGrantTokens
	(*CMsgClientToGCOverworldDevGrantTokensResponse)(nil),                     // 56: protocol.CMsgClientToGCOverworldDevGrantTokensResponse
	(*CMsgClientToGCOverworldDevClearInventory)(nil),                          // 57: protocol.CMsgClientToGCOverworldDevClearInventory
	(*CMsgClientToGCOverworldDevClearInventoryResponse)(nil),                  // 58: protocol.CMsgClientToGCOverworldDevClearInventoryResponse
	(*CMsgClientToGCOverworldFeedback)(nil),                                   // 59: protocol.CMsgClientToGCOverworldFeedback
	(*CMsgClientToGCOverworldFeedbackResponse)(nil),                           // 60: protocol.CMsgClientToGCOverworldFeedbackResponse
	(*CMsgClientToGCOverworldGetDynamicImage)(nil),                            // 61: protocol.CMsgClientToGCOverworldGetDynamicImage
	(*CMsgClientToGCOverworldGetDynamicImageResponse)(nil),                    // 62: protocol.CMsgClientToGCOverworldGetDynamicImageResponse
	(*CMsgClientToGCOverworldMinigameAction)(nil),                             // 63: protocol.CMsgClientToGCOverworldMinigameAction
	(*CMsgClientToGCOverworldMinigameActionResponse)(nil),                     // 64: protocol.CMsgClientToGCOverworldMinigameActionResponse
	(*CMsgOverworldEncounterTokenTreasureData_RewardOption)(nil),              // 65: protocol.CMsgOverworldEncounterTokenTreasureData.RewardOption
	(*CMsgOverworldEncounterTokenQuestData_Quest)(nil),                        // 66: protocol.CMsgOverworldEncounterTokenQuestData.Quest
	(*CMsgOverworldUserData_MinigameDataEntry)(nil),                           // 67: protocol.CMsgOverworldUserData.MinigameDataEntry
	(*CMsgOverworldMatchRewards_Player)(nil),                                  // 68: protocol.CMsgOverworldMatchRewards.Player
	(*CMsgClientToGCOverworldGetDynamicImageResponse_Image)(nil),              // 69: protocol.CMsgClientToGCOverworldGetDynamicImageResponse.Image
	(*CExtraMsgBlock)(nil),                                                    // 70: protocol.CExtraMsgBlock
	(*CMsgSurvivorsUserData)(nil),                                             // 71: protocol.CMsgSurvivorsUserData
	(*CMsgDOTAClaimEventActionResponse)(nil),                                  // 72: protocol.CMsgDOTAClaimEventActionResponse
}
var file_dota_gcmessages_common_overworld_proto_depIdxs = []int32{
	19, // 0: protocol.CMsgOverworldTokenQuantity.token_counts:type_name -> protocol.CMsgOverworldTokenCount
	65, // 1: protocol.CMsgOverworldEncounterTokenTreasureData.reward_options:type_name -> protocol.CMsgOverworldEncounterTokenTreasureData.RewardOption
	66, // 2: protocol.CMsgOverworldEncounterTokenQuestData.quests:type_name -> protocol.CMsgOverworldEncounterTokenQuestData.Quest
	23, // 3: protocol.CMsgOverworldEncounterChooseHeroData.hero_list:type_name -> protocol.CMsgOverworldHeroList
	70, // 4: protocol.CMsgOverworldEncounterData.extra_encounter_data:type_name -> protocol.CExtraMsgBlock
	0,  // 5: protocol.CMsgOverworldNode.node_state:type_name -> protocol.EOverworldNodeState
	26, // 6: protocol.CMsgOverworldNode.node_encounter_data:type_name -> protocol.CMsgOverworldEncounterData
	20, // 7: protocol.CMsgOverworldPath.path_cost:type_name -> protocol.CMsgOverworldTokenQuantity
	1,  // 8: protocol.CMsgOverworldPath.path_state:type_name -> protocol.EOverworldPathState
	71, // 9: protocol.CMsgOverworldMinigameCustomData.survivors_data:type_name -> protocol.CMsgSurvivorsUserData
	29, // 10: protocol.CMsgOverworldMinigameUserData.custom_data:type_name -> protocol.CMsgOverworldMinigameCustomData
	20, // 11: protocol.CMsgOverworldUserData.token_inventory:type_name -> protocol.CMsgOverworldTokenQuantity
	27, // 12: protocol.CMsgOverworldUserData.overworld_nodes:type_name -> protocol.CMsgOverworldNode
	28, // 13: protocol.CMsgOverworldUserData.overworld_paths:type_name -> protocol.CMsgOverworldPath
	67, // 14: protocol.CMsgOverworldUserData.minigame_data:type_name -> protocol.CMsgOverworldUserData.MinigameDataEntry
	68, // 15: protocol.CMsgOverworldMatchRewards.players:type_name -> protocol.CMsgOverworldMatchRewards.Player
	4,  // 16: protocol.CMsgClientToGCOverworldGetUserDataResponse.response:type_name -> protocol.CMsgClientToGCOverworldGetUserDataResponse.EResponse
	31, // 17: protocol.CMsgClientToGCOverworldGetUserDataResponse.user_data:type_name -> protocol.CMsgOverworldUserData
	31, // 18: protocol.CMsgGCToClientOverworldUserDataUpdated.user_data:type_name -> protocol.CMsgOverworldUserData
	5,  // 19: protocol.CMsgClientToGCOverworldCompletePathResponse.response:type_name -> protocol.CMsgClientToGCOverworldCompletePathResponse.EResponse
	72, // 20: protocol.CMsgClientToGCOverworldCompletePathResponse.claim_response:type_name -> protocol.CMsgDOTAClaimEventActionResponse
	26, // 21: protocol.CMsgClientToGCOverworldClaimEncounterReward.extra_reward_data:type_name -> protocol.CMsgOverworldEncounterData
	6,  // 22: protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse.response:type_name -> protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse.EResponse
	72, // 23: protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse.claim_response:type_name -> protocol.CMsgDOTAClaimEventActionResponse
	20, // 24: protocol.CMsgClientToGCOverworldClaimEncounterRewardResponse.tokens_received:type_name -> protocol.CMsgOverworldTokenQuantity
	7,  // 25: protocol.CMsgClientToGCOverworldVisitEncounterResponse.response:type_name -> protocol.CMsgClientToGCOverworldVisitEncounterResponse.EResponse
	8,  // 26: protocol.CMsgClientToGCOverworldMoveToNodeResponse.response:type_name -> protocol.CMsgClientToGCOverworldMoveToNodeResponse.EResponse
	20, // 27: protocol.CMsgClientToGCOverworldTradeTokens.token_offer:type_name -> protocol.CMsgOverworldTokenQuantity
	20, // 28: protocol.CMsgClientToGCOverworldTradeTokens.token_request:type_name -> protocol.CMsgOverworldTokenQuantity
	9,  // 29: protocol.CMsgClientToGCOverworldTradeTokensResponse.response:type_name -> protocol.CMsgClientToGCOverworldTradeTokensResponse.EResponse
	20, // 30: protocol.CMsgClientToGCOverworldTradeTokensResponse.tokens_received:type_name -> protocol.CMsgOverworldTokenQuantity
	19, // 31: protocol.CMsgClientToGCOverworldGiftTokens.token_gift:type_name -> protocol.CMsgOverworldTokenCount
	10, // 32: protocol.CMsgClientToGCOverworldGiftTokensResponse.response:type_name -> protocol.CMsgClientToGCOverworldGiftTokensResponse.EResponse
	11, // 33: protocol.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.response:type_name -> protocol.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.EResponse
	20, // 34: protocol.CMsgClientToGCOverworldRequestTokensNeededByFriendResponse.token_quantity:type_name -> protocol.CMsgOverworldTokenQuantity
	12, // 35: protocol.CMsgClientToGCOverworldDevResetAllResponse.response:type_name -> protocol.CMsgClientToGCOverworldDevResetAllResponse.EResponse
	13, // 36: protocol.CMsgClientToGCOverworldDevResetNodeResponse.response:type_name -> protocol.CMsgClientToGCOverworldDevResetNodeResponse.EResponse
	20, // 37: protocol.CMsgClientToGCOverworldDevGrantTokens.token_quantity:type_name -> protocol.CMsgOverworldTokenQuantity
	14, // 38: protocol.CMsgClientToGCOverworldDevGrantTokensResponse.response:type_name -> protocol.CMsgClientToGCOverworldDevGrantTokensResponse.EResponse
	15, // 39: protocol.CMsgClientToGCOverworldDevClearInventoryResponse.response:type_name -> protocol.CMsgClientToGCOverworldDevClearInventoryResponse.EResponse
	16, // 40: protocol.CMsgClientToGCOverworldFeedbackResponse.response:type_name -> protocol.CMsgClientToGCOverworldFeedbackResponse.EResponse
	69, // 41: protocol.CMsgClientToGCOverworldGetDynamicImageResponse.images:type_name -> protocol.CMsgClientToGCOverworldGetDynamicImageResponse.Image
	3,  // 42: protocol.CMsgClientToGCOverworldMinigameAction.action:type_name -> protocol.EOverworldMinigameAction
	18, // 43: protocol.CMsgClientToGCOverworldMinigameActionResponse.response:type_name -> protocol.CMsgClientToGCOverworldMinigameActionResponse.EResponse
	20, // 44: protocol.CMsgOverworldEncounterTokenTreasureData.RewardOption.token_cost:type_name -> protocol.CMsgOverworldTokenQuantity
	20, // 45: protocol.CMsgOverworldEncounterTokenTreasureData.RewardOption.token_reward:type_name -> protocol.CMsgOverworldTokenQuantity
	20, // 46: protocol.CMsgOverworldEncounterTokenQuestData.Quest.token_cost:type_name -> protocol.CMsgOverworldTokenQuantity
	20, // 47: protocol.CMsgOverworldEncounterTokenQuestData.Quest.token_reward:type_name -> protocol.CMsgOverworldTokenQuantity
	30, // 48: protocol.CMsgOverworldUserData.MinigameDataEntry.value:type_name -> protocol.CMsgOverworldMinigameUserData
	20, // 49: protocol.CMsgOverworldMatchRewards.Player.tokens:type_name -> protocol.CMsgOverworldTokenQuantity
	17, // 50: protocol.CMsgClientToGCOverworldGetDynamicImageResponse.Image.format:type_name -> protocol.CMsgClientToGCOverworldGetDynamicImageResponse.EDynamicImageFormat
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_overworld_proto_init() }
func file_dota_gcmessages_common_overworld_proto_init() {
	if File_dota_gcmessages_common_overworld_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_dota_gcmessages_common_survivors_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_dota_gcmessages_common_overworld_proto_msgTypes[10].OneofWrappers = []any{
		(*CMsgOverworldMinigameCustomData_SurvivorsData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_common_overworld_proto_rawDesc), len(file_dota_gcmessages_common_overworld_proto_rawDesc)),
			NumEnums:      19,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_overworld_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_overworld_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_overworld_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_overworld_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_overworld_proto = out.File
	file_dota_gcmessages_common_overworld_proto_goTypes = nil
	file_dota_gcmessages_common_overworld_proto_depIdxs = nil
}
