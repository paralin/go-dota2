// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: dota_gcmessages_client.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgDOTARequestMatches_SkillLevel int32

const (
	CMsgDOTARequestMatches_SkillLevel_CMsgDOTARequestMatches_SkillLevel_Any      CMsgDOTARequestMatches_SkillLevel = 0
	CMsgDOTARequestMatches_SkillLevel_CMsgDOTARequestMatches_SkillLevel_Normal   CMsgDOTARequestMatches_SkillLevel = 1
	CMsgDOTARequestMatches_SkillLevel_CMsgDOTARequestMatches_SkillLevel_High     CMsgDOTARequestMatches_SkillLevel = 2
	CMsgDOTARequestMatches_SkillLevel_CMsgDOTARequestMatches_SkillLevel_VeryHigh CMsgDOTARequestMatches_SkillLevel = 3
)

// Enum value maps for CMsgDOTARequestMatches_SkillLevel.
var (
	CMsgDOTARequestMatches_SkillLevel_name = map[int32]string{
		0: "CMsgDOTARequestMatches_SkillLevel_Any",
		1: "CMsgDOTARequestMatches_SkillLevel_Normal",
		2: "CMsgDOTARequestMatches_SkillLevel_High",
		3: "CMsgDOTARequestMatches_SkillLevel_VeryHigh",
	}
	CMsgDOTARequestMatches_SkillLevel_value = map[string]int32{
		"CMsgDOTARequestMatches_SkillLevel_Any":      0,
		"CMsgDOTARequestMatches_SkillLevel_Normal":   1,
		"CMsgDOTARequestMatches_SkillLevel_High":     2,
		"CMsgDOTARequestMatches_SkillLevel_VeryHigh": 3,
	}
)

func (x CMsgDOTARequestMatches_SkillLevel) Enum() *CMsgDOTARequestMatches_SkillLevel {
	p := new(CMsgDOTARequestMatches_SkillLevel)
	*p = x
	return p
}

func (x CMsgDOTARequestMatches_SkillLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTARequestMatches_SkillLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[0].Descriptor()
}

func (CMsgDOTARequestMatches_SkillLevel) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[0]
}

func (x CMsgDOTARequestMatches_SkillLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTARequestMatches_SkillLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTARequestMatches_SkillLevel(num)
	return nil
}

// Deprecated: Use CMsgDOTARequestMatches_SkillLevel.Descriptor instead.
func (CMsgDOTARequestMatches_SkillLevel) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{0}
}

type DOTA_WatchReplayType int32

const (
	DOTA_WatchReplayType_DOTA_WATCH_REPLAY_NORMAL     DOTA_WatchReplayType = 0
	DOTA_WatchReplayType_DOTA_WATCH_REPLAY_HIGHLIGHTS DOTA_WatchReplayType = 1
)

// Enum value maps for DOTA_WatchReplayType.
var (
	DOTA_WatchReplayType_name = map[int32]string{
		0: "DOTA_WATCH_REPLAY_NORMAL",
		1: "DOTA_WATCH_REPLAY_HIGHLIGHTS",
	}
	DOTA_WatchReplayType_value = map[string]int32{
		"DOTA_WATCH_REPLAY_NORMAL":     0,
		"DOTA_WATCH_REPLAY_HIGHLIGHTS": 1,
	}
)

func (x DOTA_WatchReplayType) Enum() *DOTA_WatchReplayType {
	p := new(DOTA_WatchReplayType)
	*p = x
	return p
}

func (x DOTA_WatchReplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DOTA_WatchReplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[1].Descriptor()
}

func (DOTA_WatchReplayType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[1]
}

func (x DOTA_WatchReplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DOTA_WatchReplayType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DOTA_WatchReplayType(num)
	return nil
}

// Deprecated: Use DOTA_WatchReplayType.Descriptor instead.
func (DOTA_WatchReplayType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{1}
}

type EItemEditorReservationResult int32

const (
	EItemEditorReservationResult_k_EItemEditorReservationResult_OK            EItemEditorReservationResult = 1
	EItemEditorReservationResult_k_EItemEditorReservationResult_AlreadyExists EItemEditorReservationResult = 2
	EItemEditorReservationResult_k_EItemEditorReservationResult_Reserved      EItemEditorReservationResult = 3
	EItemEditorReservationResult_k_EItemEditorReservationResult_TimedOut      EItemEditorReservationResult = 4
)

// Enum value maps for EItemEditorReservationResult.
var (
	EItemEditorReservationResult_name = map[int32]string{
		1: "k_EItemEditorReservationResult_OK",
		2: "k_EItemEditorReservationResult_AlreadyExists",
		3: "k_EItemEditorReservationResult_Reserved",
		4: "k_EItemEditorReservationResult_TimedOut",
	}
	EItemEditorReservationResult_value = map[string]int32{
		"k_EItemEditorReservationResult_OK":            1,
		"k_EItemEditorReservationResult_AlreadyExists": 2,
		"k_EItemEditorReservationResult_Reserved":      3,
		"k_EItemEditorReservationResult_TimedOut":      4,
	}
)

func (x EItemEditorReservationResult) Enum() *EItemEditorReservationResult {
	p := new(EItemEditorReservationResult)
	*p = x
	return p
}

func (x EItemEditorReservationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemEditorReservationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[2].Descriptor()
}

func (EItemEditorReservationResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[2]
}

func (x EItemEditorReservationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemEditorReservationResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemEditorReservationResult(num)
	return nil
}

// Deprecated: Use EItemEditorReservationResult.Descriptor instead.
func (EItemEditorReservationResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{2}
}

type EWeekendTourneyRichPresenceEvent int32

const (
	EWeekendTourneyRichPresenceEvent_k_EWeekendTourneyRichPresenceEvent_None         EWeekendTourneyRichPresenceEvent = 0
	EWeekendTourneyRichPresenceEvent_k_EWeekendTourneyRichPresenceEvent_StartedMatch EWeekendTourneyRichPresenceEvent = 1
	EWeekendTourneyRichPresenceEvent_k_EWeekendTourneyRichPresenceEvent_WonMatch     EWeekendTourneyRichPresenceEvent = 2
	EWeekendTourneyRichPresenceEvent_k_EWeekendTourneyRichPresenceEvent_Eliminated   EWeekendTourneyRichPresenceEvent = 3
)

// Enum value maps for EWeekendTourneyRichPresenceEvent.
var (
	EWeekendTourneyRichPresenceEvent_name = map[int32]string{
		0: "k_EWeekendTourneyRichPresenceEvent_None",
		1: "k_EWeekendTourneyRichPresenceEvent_StartedMatch",
		2: "k_EWeekendTourneyRichPresenceEvent_WonMatch",
		3: "k_EWeekendTourneyRichPresenceEvent_Eliminated",
	}
	EWeekendTourneyRichPresenceEvent_value = map[string]int32{
		"k_EWeekendTourneyRichPresenceEvent_None":         0,
		"k_EWeekendTourneyRichPresenceEvent_StartedMatch": 1,
		"k_EWeekendTourneyRichPresenceEvent_WonMatch":     2,
		"k_EWeekendTourneyRichPresenceEvent_Eliminated":   3,
	}
)

func (x EWeekendTourneyRichPresenceEvent) Enum() *EWeekendTourneyRichPresenceEvent {
	p := new(EWeekendTourneyRichPresenceEvent)
	*p = x
	return p
}

func (x EWeekendTourneyRichPresenceEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWeekendTourneyRichPresenceEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[3].Descriptor()
}

func (EWeekendTourneyRichPresenceEvent) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[3]
}

func (x EWeekendTourneyRichPresenceEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWeekendTourneyRichPresenceEvent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWeekendTourneyRichPresenceEvent(num)
	return nil
}

// Deprecated: Use EWeekendTourneyRichPresenceEvent.Descriptor instead.
func (EWeekendTourneyRichPresenceEvent) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{3}
}

type EDOTATriviaAnswerResult int32

const (
	EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_Success         EDOTATriviaAnswerResult = 0
	EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_InvalidQuestion EDOTATriviaAnswerResult = 1
	EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_InvalidAnswer   EDOTATriviaAnswerResult = 2
	EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_QuestionLocked  EDOTATriviaAnswerResult = 3
	EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_AlreadyAnswered EDOTATriviaAnswerResult = 4
	EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_TriviaDisabled  EDOTATriviaAnswerResult = 5
)

// Enum value maps for EDOTATriviaAnswerResult.
var (
	EDOTATriviaAnswerResult_name = map[int32]string{
		0: "k_EDOTATriviaAnswerResult_Success",
		1: "k_EDOTATriviaAnswerResult_InvalidQuestion",
		2: "k_EDOTATriviaAnswerResult_InvalidAnswer",
		3: "k_EDOTATriviaAnswerResult_QuestionLocked",
		4: "k_EDOTATriviaAnswerResult_AlreadyAnswered",
		5: "k_EDOTATriviaAnswerResult_TriviaDisabled",
	}
	EDOTATriviaAnswerResult_value = map[string]int32{
		"k_EDOTATriviaAnswerResult_Success":         0,
		"k_EDOTATriviaAnswerResult_InvalidQuestion": 1,
		"k_EDOTATriviaAnswerResult_InvalidAnswer":   2,
		"k_EDOTATriviaAnswerResult_QuestionLocked":  3,
		"k_EDOTATriviaAnswerResult_AlreadyAnswered": 4,
		"k_EDOTATriviaAnswerResult_TriviaDisabled":  5,
	}
)

func (x EDOTATriviaAnswerResult) Enum() *EDOTATriviaAnswerResult {
	p := new(EDOTATriviaAnswerResult)
	*p = x
	return p
}

func (x EDOTATriviaAnswerResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTATriviaAnswerResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[4].Descriptor()
}

func (EDOTATriviaAnswerResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[4]
}

func (x EDOTATriviaAnswerResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTATriviaAnswerResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTATriviaAnswerResult(num)
	return nil
}

// Deprecated: Use EDOTATriviaAnswerResult.Descriptor instead.
func (EDOTATriviaAnswerResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{4}
}

type EPurchaseHeroRelicResult int32

const (
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_Success             EPurchaseHeroRelicResult = 0
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_FailedToSend        EPurchaseHeroRelicResult = 1
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_NotEnoughPoints     EPurchaseHeroRelicResult = 2
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_InternalServerError EPurchaseHeroRelicResult = 3
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_PurchaseNotAllowed  EPurchaseHeroRelicResult = 4
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_InvalidRelic        EPurchaseHeroRelicResult = 5
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_AlreadyOwned        EPurchaseHeroRelicResult = 6
	EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_InvalidRarity       EPurchaseHeroRelicResult = 7
)

// Enum value maps for EPurchaseHeroRelicResult.
var (
	EPurchaseHeroRelicResult_name = map[int32]string{
		0: "k_EPurchaseHeroRelicResult_Success",
		1: "k_EPurchaseHeroRelicResult_FailedToSend",
		2: "k_EPurchaseHeroRelicResult_NotEnoughPoints",
		3: "k_EPurchaseHeroRelicResult_InternalServerError",
		4: "k_EPurchaseHeroRelicResult_PurchaseNotAllowed",
		5: "k_EPurchaseHeroRelicResult_InvalidRelic",
		6: "k_EPurchaseHeroRelicResult_AlreadyOwned",
		7: "k_EPurchaseHeroRelicResult_InvalidRarity",
	}
	EPurchaseHeroRelicResult_value = map[string]int32{
		"k_EPurchaseHeroRelicResult_Success":             0,
		"k_EPurchaseHeroRelicResult_FailedToSend":        1,
		"k_EPurchaseHeroRelicResult_NotEnoughPoints":     2,
		"k_EPurchaseHeroRelicResult_InternalServerError": 3,
		"k_EPurchaseHeroRelicResult_PurchaseNotAllowed":  4,
		"k_EPurchaseHeroRelicResult_InvalidRelic":        5,
		"k_EPurchaseHeroRelicResult_AlreadyOwned":        6,
		"k_EPurchaseHeroRelicResult_InvalidRarity":       7,
	}
)

func (x EPurchaseHeroRelicResult) Enum() *EPurchaseHeroRelicResult {
	p := new(EPurchaseHeroRelicResult)
	*p = x
	return p
}

func (x EPurchaseHeroRelicResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPurchaseHeroRelicResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[5].Descriptor()
}

func (EPurchaseHeroRelicResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[5]
}

func (x EPurchaseHeroRelicResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPurchaseHeroRelicResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPurchaseHeroRelicResult(num)
	return nil
}

// Deprecated: Use EPurchaseHeroRelicResult.Descriptor instead.
func (EPurchaseHeroRelicResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{5}
}

type EDevEventRequestResult int32

const (
	EDevEventRequestResult_k_EDevEventRequestResult_Success        EDevEventRequestResult = 0
	EDevEventRequestResult_k_EDevEventRequestResult_NotAllowed     EDevEventRequestResult = 1
	EDevEventRequestResult_k_EDevEventRequestResult_InvalidEvent   EDevEventRequestResult = 2
	EDevEventRequestResult_k_EDevEventRequestResult_SqlFailure     EDevEventRequestResult = 3
	EDevEventRequestResult_k_EDevEventRequestResult_Timeout        EDevEventRequestResult = 4
	EDevEventRequestResult_k_EDevEventRequestResult_LockFailure    EDevEventRequestResult = 5
	EDevEventRequestResult_k_EDevEventRequestResult_SDOLoadFailure EDevEventRequestResult = 6
)

// Enum value maps for EDevEventRequestResult.
var (
	EDevEventRequestResult_name = map[int32]string{
		0: "k_EDevEventRequestResult_Success",
		1: "k_EDevEventRequestResult_NotAllowed",
		2: "k_EDevEventRequestResult_InvalidEvent",
		3: "k_EDevEventRequestResult_SqlFailure",
		4: "k_EDevEventRequestResult_Timeout",
		5: "k_EDevEventRequestResult_LockFailure",
		6: "k_EDevEventRequestResult_SDOLoadFailure",
	}
	EDevEventRequestResult_value = map[string]int32{
		"k_EDevEventRequestResult_Success":        0,
		"k_EDevEventRequestResult_NotAllowed":     1,
		"k_EDevEventRequestResult_InvalidEvent":   2,
		"k_EDevEventRequestResult_SqlFailure":     3,
		"k_EDevEventRequestResult_Timeout":        4,
		"k_EDevEventRequestResult_LockFailure":    5,
		"k_EDevEventRequestResult_SDOLoadFailure": 6,
	}
)

func (x EDevEventRequestResult) Enum() *EDevEventRequestResult {
	p := new(EDevEventRequestResult)
	*p = x
	return p
}

func (x EDevEventRequestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDevEventRequestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[6].Descriptor()
}

func (EDevEventRequestResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[6]
}

func (x EDevEventRequestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDevEventRequestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDevEventRequestResult(num)
	return nil
}

// Deprecated: Use EDevEventRequestResult.Descriptor instead.
func (EDevEventRequestResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{6}
}

type ESupportEventRequestResult int32

const (
	ESupportEventRequestResult_k_ESupportEventRequestResult_Success               ESupportEventRequestResult = 0
	ESupportEventRequestResult_k_ESupportEventRequestResult_Timeout               ESupportEventRequestResult = 1
	ESupportEventRequestResult_k_ESupportEventRequestResult_CantLockSOCache       ESupportEventRequestResult = 2
	ESupportEventRequestResult_k_ESupportEventRequestResult_ItemNotInInventory    ESupportEventRequestResult = 3
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidItemDef        ESupportEventRequestResult = 4
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidEvent          ESupportEventRequestResult = 5
	ESupportEventRequestResult_k_ESupportEventRequestResult_EventExpired          ESupportEventRequestResult = 6
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidSupportAccount ESupportEventRequestResult = 7
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidSupportMessage ESupportEventRequestResult = 8
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidEventPoints    ESupportEventRequestResult = 9
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidPremiumPoints  ESupportEventRequestResult = 10
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidActionID       ESupportEventRequestResult = 11
	ESupportEventRequestResult_k_ESupportEventRequestResult_InvalidActionScore    ESupportEventRequestResult = 12
	ESupportEventRequestResult_k_ESupportEventRequestResult_TransactionFailed     ESupportEventRequestResult = 13
)

// Enum value maps for ESupportEventRequestResult.
var (
	ESupportEventRequestResult_name = map[int32]string{
		0:  "k_ESupportEventRequestResult_Success",
		1:  "k_ESupportEventRequestResult_Timeout",
		2:  "k_ESupportEventRequestResult_CantLockSOCache",
		3:  "k_ESupportEventRequestResult_ItemNotInInventory",
		4:  "k_ESupportEventRequestResult_InvalidItemDef",
		5:  "k_ESupportEventRequestResult_InvalidEvent",
		6:  "k_ESupportEventRequestResult_EventExpired",
		7:  "k_ESupportEventRequestResult_InvalidSupportAccount",
		8:  "k_ESupportEventRequestResult_InvalidSupportMessage",
		9:  "k_ESupportEventRequestResult_InvalidEventPoints",
		10: "k_ESupportEventRequestResult_InvalidPremiumPoints",
		11: "k_ESupportEventRequestResult_InvalidActionID",
		12: "k_ESupportEventRequestResult_InvalidActionScore",
		13: "k_ESupportEventRequestResult_TransactionFailed",
	}
	ESupportEventRequestResult_value = map[string]int32{
		"k_ESupportEventRequestResult_Success":               0,
		"k_ESupportEventRequestResult_Timeout":               1,
		"k_ESupportEventRequestResult_CantLockSOCache":       2,
		"k_ESupportEventRequestResult_ItemNotInInventory":    3,
		"k_ESupportEventRequestResult_InvalidItemDef":        4,
		"k_ESupportEventRequestResult_InvalidEvent":          5,
		"k_ESupportEventRequestResult_EventExpired":          6,
		"k_ESupportEventRequestResult_InvalidSupportAccount": 7,
		"k_ESupportEventRequestResult_InvalidSupportMessage": 8,
		"k_ESupportEventRequestResult_InvalidEventPoints":    9,
		"k_ESupportEventRequestResult_InvalidPremiumPoints":  10,
		"k_ESupportEventRequestResult_InvalidActionID":       11,
		"k_ESupportEventRequestResult_InvalidActionScore":    12,
		"k_ESupportEventRequestResult_TransactionFailed":     13,
	}
)

func (x ESupportEventRequestResult) Enum() *ESupportEventRequestResult {
	p := new(ESupportEventRequestResult)
	*p = x
	return p
}

func (x ESupportEventRequestResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESupportEventRequestResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[7].Descriptor()
}

func (ESupportEventRequestResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[7]
}

func (x ESupportEventRequestResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESupportEventRequestResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESupportEventRequestResult(num)
	return nil
}

// Deprecated: Use ESupportEventRequestResult.Descriptor instead.
func (ESupportEventRequestResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{7}
}

type EUnderDraftResponse int32

const (
	EUnderDraftResponse_k_eInternalError  EUnderDraftResponse = 0
	EUnderDraftResponse_k_eSuccess        EUnderDraftResponse = 1
	EUnderDraftResponse_k_eNoGold         EUnderDraftResponse = 2
	EUnderDraftResponse_k_eInvalidSlot    EUnderDraftResponse = 3
	EUnderDraftResponse_k_eNoBenchSpace   EUnderDraftResponse = 4
	EUnderDraftResponse_k_eNoTickets      EUnderDraftResponse = 5
	EUnderDraftResponse_k_eEventNotOwned  EUnderDraftResponse = 6
	EUnderDraftResponse_k_eInvalidReward  EUnderDraftResponse = 7
	EUnderDraftResponse_k_eHasBigReward   EUnderDraftResponse = 8
	EUnderDraftResponse_k_eNoGCConnection EUnderDraftResponse = 9
	EUnderDraftResponse_k_eTooBusy        EUnderDraftResponse = 10
	EUnderDraftResponse_k_eCantRollBack   EUnderDraftResponse = 11
)

// Enum value maps for EUnderDraftResponse.
var (
	EUnderDraftResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eNoGold",
		3:  "k_eInvalidSlot",
		4:  "k_eNoBenchSpace",
		5:  "k_eNoTickets",
		6:  "k_eEventNotOwned",
		7:  "k_eInvalidReward",
		8:  "k_eHasBigReward",
		9:  "k_eNoGCConnection",
		10: "k_eTooBusy",
		11: "k_eCantRollBack",
	}
	EUnderDraftResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eNoGold":         2,
		"k_eInvalidSlot":    3,
		"k_eNoBenchSpace":   4,
		"k_eNoTickets":      5,
		"k_eEventNotOwned":  6,
		"k_eInvalidReward":  7,
		"k_eHasBigReward":   8,
		"k_eNoGCConnection": 9,
		"k_eTooBusy":        10,
		"k_eCantRollBack":   11,
	}
)

func (x EUnderDraftResponse) Enum() *EUnderDraftResponse {
	p := new(EUnderDraftResponse)
	*p = x
	return p
}

func (x EUnderDraftResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUnderDraftResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[8].Descriptor()
}

func (EUnderDraftResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[8]
}

func (x EUnderDraftResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUnderDraftResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUnderDraftResponse(num)
	return nil
}

// Deprecated: Use EUnderDraftResponse.Descriptor instead.
func (EUnderDraftResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{8}
}

type EDOTADraftTriviaAnswerResult int32

const (
	EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_Success         EDOTADraftTriviaAnswerResult = 0
	EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_InvalidMatchID  EDOTADraftTriviaAnswerResult = 1
	EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_AlreadyAnswered EDOTADraftTriviaAnswerResult = 2
	EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_InternalError   EDOTADraftTriviaAnswerResult = 3
	EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_TriviaDisabled  EDOTADraftTriviaAnswerResult = 4
	EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_GCDown          EDOTADraftTriviaAnswerResult = 5
)

// Enum value maps for EDOTADraftTriviaAnswerResult.
var (
	EDOTADraftTriviaAnswerResult_name = map[int32]string{
		0: "k_EDOTADraftTriviaAnswerResult_Success",
		1: "k_EDOTADraftTriviaAnswerResult_InvalidMatchID",
		2: "k_EDOTADraftTriviaAnswerResult_AlreadyAnswered",
		3: "k_EDOTADraftTriviaAnswerResult_InternalError",
		4: "k_EDOTADraftTriviaAnswerResult_TriviaDisabled",
		5: "k_EDOTADraftTriviaAnswerResult_GCDown",
	}
	EDOTADraftTriviaAnswerResult_value = map[string]int32{
		"k_EDOTADraftTriviaAnswerResult_Success":         0,
		"k_EDOTADraftTriviaAnswerResult_InvalidMatchID":  1,
		"k_EDOTADraftTriviaAnswerResult_AlreadyAnswered": 2,
		"k_EDOTADraftTriviaAnswerResult_InternalError":   3,
		"k_EDOTADraftTriviaAnswerResult_TriviaDisabled":  4,
		"k_EDOTADraftTriviaAnswerResult_GCDown":          5,
	}
)

func (x EDOTADraftTriviaAnswerResult) Enum() *EDOTADraftTriviaAnswerResult {
	p := new(EDOTADraftTriviaAnswerResult)
	*p = x
	return p
}

func (x EDOTADraftTriviaAnswerResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDOTADraftTriviaAnswerResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[9].Descriptor()
}

func (EDOTADraftTriviaAnswerResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[9]
}

func (x EDOTADraftTriviaAnswerResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EDOTADraftTriviaAnswerResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EDOTADraftTriviaAnswerResult(num)
	return nil
}

// Deprecated: Use EDOTADraftTriviaAnswerResult.Descriptor instead.
func (EDOTADraftTriviaAnswerResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{9}
}

type CMsgClientToGCUpdateComicBookStat_Type int32

const (
	CMsgClientToGCUpdateComicBookStat_Type_CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead     CMsgClientToGCUpdateComicBookStat_Type = 1
	CMsgClientToGCUpdateComicBookStat_Type_CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading CMsgClientToGCUpdateComicBookStat_Type = 2
	CMsgClientToGCUpdateComicBookStat_Type_CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead  CMsgClientToGCUpdateComicBookStat_Type = 3
)

// Enum value maps for CMsgClientToGCUpdateComicBookStat_Type.
var (
	CMsgClientToGCUpdateComicBookStat_Type_name = map[int32]string{
		1: "CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead",
		2: "CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading",
		3: "CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead",
	}
	CMsgClientToGCUpdateComicBookStat_Type_value = map[string]int32{
		"CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead":     1,
		"CMsgClientToGCUpdateComicBookStat_Type_SecondsSpentReading": 2,
		"CMsgClientToGCUpdateComicBookStat_Type_HighestPercentRead":  3,
	}
)

func (x CMsgClientToGCUpdateComicBookStat_Type) Enum() *CMsgClientToGCUpdateComicBookStat_Type {
	p := new(CMsgClientToGCUpdateComicBookStat_Type)
	*p = x
	return p
}

func (x CMsgClientToGCUpdateComicBookStat_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCUpdateComicBookStat_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[10].Descriptor()
}

func (CMsgClientToGCUpdateComicBookStat_Type) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[10]
}

func (x CMsgClientToGCUpdateComicBookStat_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCUpdateComicBookStat_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCUpdateComicBookStat_Type(num)
	return nil
}

// Deprecated: Use CMsgClientToGCUpdateComicBookStat_Type.Descriptor instead.
func (CMsgClientToGCUpdateComicBookStat_Type) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{10}
}

type CMsgDOTAPopup_PopupID int32

const (
	CMsgDOTAPopup_NONE                                                 CMsgDOTAPopup_PopupID = -1
	CMsgDOTAPopup_KICKED_FROM_LOBBY                                    CMsgDOTAPopup_PopupID = 0
	CMsgDOTAPopup_KICKED_FROM_PARTY                                    CMsgDOTAPopup_PopupID = 1
	CMsgDOTAPopup_KICKED_FROM_TEAM                                     CMsgDOTAPopup_PopupID = 2
	CMsgDOTAPopup_TEAM_WAS_DISBANDED                                   CMsgDOTAPopup_PopupID = 3
	CMsgDOTAPopup_TEAM_MATCHMAKE_ALREADY_MATCH                         CMsgDOTAPopup_PopupID = 4
	CMsgDOTAPopup_TEAM_MATCHMAKE_ALREADY_FINDING                       CMsgDOTAPopup_PopupID = 5
	CMsgDOTAPopup_TEAM_MATCHMAKE_FULL                                  CMsgDOTAPopup_PopupID = 6
	CMsgDOTAPopup_TEAM_MATCHMAKE_FAIL_ADD                              CMsgDOTAPopup_PopupID = 7
	CMsgDOTAPopup_TEAM_MATCHMAKE_FAIL_ADD_CURRENT                      CMsgDOTAPopup_PopupID = 8
	CMsgDOTAPopup_TEAM_MATCHMAKE_FAILED_TEAM_MEMBER                    CMsgDOTAPopup_PopupID = 9
	CMsgDOTAPopup_TEAM_MATCHMAKE_ALREADY_GAME                          CMsgDOTAPopup_PopupID = 10
	CMsgDOTAPopup_TEAM_MATCHMAKE_FAIL_GET_PARTY                        CMsgDOTAPopup_PopupID = 11
	CMsgDOTAPopup_MATCHMAKING_DISABLED                                 CMsgDOTAPopup_PopupID = 12
	CMsgDOTAPopup_INVITE_DENIED                                        CMsgDOTAPopup_PopupID = 13
	CMsgDOTAPopup_PARTY_FULL                                           CMsgDOTAPopup_PopupID = 14
	CMsgDOTAPopup_MADE_ADMIN                                           CMsgDOTAPopup_PopupID = 15
	CMsgDOTAPopup_NEED_TO_PURCHASE                                     CMsgDOTAPopup_PopupID = 16
	CMsgDOTAPopup_SIGNON_MESSAGE                                       CMsgDOTAPopup_PopupID = 17
	CMsgDOTAPopup_MATCHMAKING_REGION_OFFLINE                           CMsgDOTAPopup_PopupID = 19
	CMsgDOTAPopup_TOURNAMENT_GAME_NOT_FOUND                            CMsgDOTAPopup_PopupID = 21
	CMsgDOTAPopup_TOURNAMENT_GAME_HAS_LOBBY_ID                         CMsgDOTAPopup_PopupID = 22
	CMsgDOTAPopup_TOURNAMENT_GAME_HAS_MATCH_ID                         CMsgDOTAPopup_PopupID = 23
	CMsgDOTAPopup_TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM                  CMsgDOTAPopup_PopupID = 24
	CMsgDOTAPopup_TOURNAMENT_GAME_HAS_NO_DIRE_TEAM                     CMsgDOTAPopup_PopupID = 25
	CMsgDOTAPopup_TOURNAMENT_GAME_SQL_UPDATE_FAILED                    CMsgDOTAPopup_PopupID = 26
	CMsgDOTAPopup_NOT_LEAGUE_ADMIN                                     CMsgDOTAPopup_PopupID = 27
	CMsgDOTAPopup_IN_ANOTHER_GAME                                      CMsgDOTAPopup_PopupID = 29
	CMsgDOTAPopup_PARTY_MEMBER_IN_ANOTHER_GAME                         CMsgDOTAPopup_PopupID = 30
	CMsgDOTAPopup_PARTY_MEMBER_IN_LOW_PRIORITY                         CMsgDOTAPopup_PopupID = 31
	CMsgDOTAPopup_CLIENT_OUT_OF_DATE                                   CMsgDOTAPopup_PopupID = 32
	CMsgDOTAPopup_SAVE_GAME_CORRUPT                                    CMsgDOTAPopup_PopupID = 38
	CMsgDOTAPopup_INSUFFICIENT_INGOTS                                  CMsgDOTAPopup_PopupID = 39
	CMsgDOTAPopup_COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL CMsgDOTAPopup_PopupID = 42
	CMsgDOTAPopup_PARTY_LEADER_JOINED_LOBBY                            CMsgDOTAPopup_PopupID = 44
	CMsgDOTAPopup_WEEKEND_TOURNEY_UNMATCHED                            CMsgDOTAPopup_PopupID = 48
	CMsgDOTAPopup_POST_MATCH_SURVEY                                    CMsgDOTAPopup_PopupID = 49
	CMsgDOTAPopup_TROPHY_AWARDED                                       CMsgDOTAPopup_PopupID = 50
	CMsgDOTAPopup_TROPHY_LEVEL_UP                                      CMsgDOTAPopup_PopupID = 51
	CMsgDOTAPopup_ALL_HERO_CHALLENGE_PROGRESS                          CMsgDOTAPopup_PopupID = 52
	CMsgDOTAPopup_NEED_INITIAL_SKILL                                   CMsgDOTAPopup_PopupID = 53
	CMsgDOTAPopup_NEED_INITIAL_SKILL_IN_PARTY                          CMsgDOTAPopup_PopupID = 54
	CMsgDOTAPopup_TARGET_ENGINE_MISMATCH                               CMsgDOTAPopup_PopupID = 55
	CMsgDOTAPopup_VAC_NOT_VERIFIED                                     CMsgDOTAPopup_PopupID = 56
	CMsgDOTAPopup_KICKED_FROM_QUEUE_EVENT_STARTING                     CMsgDOTAPopup_PopupID = 57
	CMsgDOTAPopup_KICKED_FROM_QUEUE_EVENT_ENDING                       CMsgDOTAPopup_PopupID = 58
	CMsgDOTAPopup_LOBBY_FULL                                           CMsgDOTAPopup_PopupID = 62
	CMsgDOTAPopup_EVENT_POINTS_EARNED                                  CMsgDOTAPopup_PopupID = 63
	CMsgDOTAPopup_CUSTOM_GAME_INCORRECT_VERSION                        CMsgDOTAPopup_PopupID = 64
	CMsgDOTAPopup_LIMITED_USER_CHAT                                    CMsgDOTAPopup_PopupID = 66
	CMsgDOTAPopup_EVENT_PREMIUM_POINTS_EARNED                          CMsgDOTAPopup_PopupID = 67
	CMsgDOTAPopup_LOBBY_MVP_AWARDED                                    CMsgDOTAPopup_PopupID = 68
	CMsgDOTAPopup_LOW_BADGE_LEVEL_CHAT                                 CMsgDOTAPopup_PopupID = 71
	CMsgDOTAPopup_LOW_WINS_CHAT                                        CMsgDOTAPopup_PopupID = 72
	CMsgDOTAPopup_UNVERIFIED_USER_CHAT                                 CMsgDOTAPopup_PopupID = 73
	CMsgDOTAPopup_PARTY_STARTED_FINDING_EVENT_MATCH                    CMsgDOTAPopup_PopupID = 74
	CMsgDOTAPopup_GENERIC_INFO                                         CMsgDOTAPopup_PopupID = 69
	CMsgDOTAPopup_GENERIC_ERROR                                        CMsgDOTAPopup_PopupID = 70
	CMsgDOTAPopup_RANK_TIER_UPDATED                                    CMsgDOTAPopup_PopupID = 75
	CMsgDOTAPopup_CUSTOM_GAME_COOLDOWN_RESTRICTED                      CMsgDOTAPopup_PopupID = 76
	CMsgDOTAPopup_CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME                CMsgDOTAPopup_PopupID = 77
	CMsgDOTAPopup_CUSTOM_GAME_TOO_FEW_GAMES                            CMsgDOTAPopup_PopupID = 78
	CMsgDOTAPopup_COMM_SCORE_TOO_LOW                                   CMsgDOTAPopup_PopupID = 79
)

// Enum value maps for CMsgDOTAPopup_PopupID.
var (
	CMsgDOTAPopup_PopupID_name = map[int32]string{
		-1: "NONE",
		0:  "KICKED_FROM_LOBBY",
		1:  "KICKED_FROM_PARTY",
		2:  "KICKED_FROM_TEAM",
		3:  "TEAM_WAS_DISBANDED",
		4:  "TEAM_MATCHMAKE_ALREADY_MATCH",
		5:  "TEAM_MATCHMAKE_ALREADY_FINDING",
		6:  "TEAM_MATCHMAKE_FULL",
		7:  "TEAM_MATCHMAKE_FAIL_ADD",
		8:  "TEAM_MATCHMAKE_FAIL_ADD_CURRENT",
		9:  "TEAM_MATCHMAKE_FAILED_TEAM_MEMBER",
		10: "TEAM_MATCHMAKE_ALREADY_GAME",
		11: "TEAM_MATCHMAKE_FAIL_GET_PARTY",
		12: "MATCHMAKING_DISABLED",
		13: "INVITE_DENIED",
		14: "PARTY_FULL",
		15: "MADE_ADMIN",
		16: "NEED_TO_PURCHASE",
		17: "SIGNON_MESSAGE",
		19: "MATCHMAKING_REGION_OFFLINE",
		21: "TOURNAMENT_GAME_NOT_FOUND",
		22: "TOURNAMENT_GAME_HAS_LOBBY_ID",
		23: "TOURNAMENT_GAME_HAS_MATCH_ID",
		24: "TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM",
		25: "TOURNAMENT_GAME_HAS_NO_DIRE_TEAM",
		26: "TOURNAMENT_GAME_SQL_UPDATE_FAILED",
		27: "NOT_LEAGUE_ADMIN",
		29: "IN_ANOTHER_GAME",
		30: "PARTY_MEMBER_IN_ANOTHER_GAME",
		31: "PARTY_MEMBER_IN_LOW_PRIORITY",
		32: "CLIENT_OUT_OF_DATE",
		38: "SAVE_GAME_CORRUPT",
		39: "INSUFFICIENT_INGOTS",
		42: "COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL",
		44: "PARTY_LEADER_JOINED_LOBBY",
		48: "WEEKEND_TOURNEY_UNMATCHED",
		49: "POST_MATCH_SURVEY",
		50: "TROPHY_AWARDED",
		51: "TROPHY_LEVEL_UP",
		52: "ALL_HERO_CHALLENGE_PROGRESS",
		53: "NEED_INITIAL_SKILL",
		54: "NEED_INITIAL_SKILL_IN_PARTY",
		55: "TARGET_ENGINE_MISMATCH",
		56: "VAC_NOT_VERIFIED",
		57: "KICKED_FROM_QUEUE_EVENT_STARTING",
		58: "KICKED_FROM_QUEUE_EVENT_ENDING",
		62: "LOBBY_FULL",
		63: "EVENT_POINTS_EARNED",
		64: "CUSTOM_GAME_INCORRECT_VERSION",
		66: "LIMITED_USER_CHAT",
		67: "EVENT_PREMIUM_POINTS_EARNED",
		68: "LOBBY_MVP_AWARDED",
		71: "LOW_BADGE_LEVEL_CHAT",
		72: "LOW_WINS_CHAT",
		73: "UNVERIFIED_USER_CHAT",
		74: "PARTY_STARTED_FINDING_EVENT_MATCH",
		69: "GENERIC_INFO",
		70: "GENERIC_ERROR",
		75: "RANK_TIER_UPDATED",
		76: "CUSTOM_GAME_COOLDOWN_RESTRICTED",
		77: "CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME",
		78: "CUSTOM_GAME_TOO_FEW_GAMES",
		79: "COMM_SCORE_TOO_LOW",
	}
	CMsgDOTAPopup_PopupID_value = map[string]int32{
		"NONE":                                                 -1,
		"KICKED_FROM_LOBBY":                                    0,
		"KICKED_FROM_PARTY":                                    1,
		"KICKED_FROM_TEAM":                                     2,
		"TEAM_WAS_DISBANDED":                                   3,
		"TEAM_MATCHMAKE_ALREADY_MATCH":                         4,
		"TEAM_MATCHMAKE_ALREADY_FINDING":                       5,
		"TEAM_MATCHMAKE_FULL":                                  6,
		"TEAM_MATCHMAKE_FAIL_ADD":                              7,
		"TEAM_MATCHMAKE_FAIL_ADD_CURRENT":                      8,
		"TEAM_MATCHMAKE_FAILED_TEAM_MEMBER":                    9,
		"TEAM_MATCHMAKE_ALREADY_GAME":                          10,
		"TEAM_MATCHMAKE_FAIL_GET_PARTY":                        11,
		"MATCHMAKING_DISABLED":                                 12,
		"INVITE_DENIED":                                        13,
		"PARTY_FULL":                                           14,
		"MADE_ADMIN":                                           15,
		"NEED_TO_PURCHASE":                                     16,
		"SIGNON_MESSAGE":                                       17,
		"MATCHMAKING_REGION_OFFLINE":                           19,
		"TOURNAMENT_GAME_NOT_FOUND":                            21,
		"TOURNAMENT_GAME_HAS_LOBBY_ID":                         22,
		"TOURNAMENT_GAME_HAS_MATCH_ID":                         23,
		"TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM":                  24,
		"TOURNAMENT_GAME_HAS_NO_DIRE_TEAM":                     25,
		"TOURNAMENT_GAME_SQL_UPDATE_FAILED":                    26,
		"NOT_LEAGUE_ADMIN":                                     27,
		"IN_ANOTHER_GAME":                                      29,
		"PARTY_MEMBER_IN_ANOTHER_GAME":                         30,
		"PARTY_MEMBER_IN_LOW_PRIORITY":                         31,
		"CLIENT_OUT_OF_DATE":                                   32,
		"SAVE_GAME_CORRUPT":                                    38,
		"INSUFFICIENT_INGOTS":                                  39,
		"COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL": 42,
		"PARTY_LEADER_JOINED_LOBBY":                            44,
		"WEEKEND_TOURNEY_UNMATCHED":                            48,
		"POST_MATCH_SURVEY":                                    49,
		"TROPHY_AWARDED":                                       50,
		"TROPHY_LEVEL_UP":                                      51,
		"ALL_HERO_CHALLENGE_PROGRESS":                          52,
		"NEED_INITIAL_SKILL":                                   53,
		"NEED_INITIAL_SKILL_IN_PARTY":                          54,
		"TARGET_ENGINE_MISMATCH":                               55,
		"VAC_NOT_VERIFIED":                                     56,
		"KICKED_FROM_QUEUE_EVENT_STARTING":                     57,
		"KICKED_FROM_QUEUE_EVENT_ENDING":                       58,
		"LOBBY_FULL":                                           62,
		"EVENT_POINTS_EARNED":                                  63,
		"CUSTOM_GAME_INCORRECT_VERSION":                        64,
		"LIMITED_USER_CHAT":                                    66,
		"EVENT_PREMIUM_POINTS_EARNED":                          67,
		"LOBBY_MVP_AWARDED":                                    68,
		"LOW_BADGE_LEVEL_CHAT":                                 71,
		"LOW_WINS_CHAT":                                        72,
		"UNVERIFIED_USER_CHAT":                                 73,
		"PARTY_STARTED_FINDING_EVENT_MATCH":                    74,
		"GENERIC_INFO":                                         69,
		"GENERIC_ERROR":                                        70,
		"RANK_TIER_UPDATED":                                    75,
		"CUSTOM_GAME_COOLDOWN_RESTRICTED":                      76,
		"CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME":                77,
		"CUSTOM_GAME_TOO_FEW_GAMES":                            78,
		"COMM_SCORE_TOO_LOW":                                   79,
	}
)

func (x CMsgDOTAPopup_PopupID) Enum() *CMsgDOTAPopup_PopupID {
	p := new(CMsgDOTAPopup_PopupID)
	*p = x
	return p
}

func (x CMsgDOTAPopup_PopupID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAPopup_PopupID) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[11].Descriptor()
}

func (CMsgDOTAPopup_PopupID) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[11]
}

func (x CMsgDOTAPopup_PopupID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAPopup_PopupID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAPopup_PopupID(num)
	return nil
}

// Deprecated: Use CMsgDOTAPopup_PopupID.Descriptor instead.
func (CMsgDOTAPopup_PopupID) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{4, 0}
}

type CMsgDOTASubmitPlayerReportResponse_EResult int32

const (
	CMsgDOTASubmitPlayerReportResponse_k_eInternalError        CMsgDOTASubmitPlayerReportResponse_EResult = 0
	CMsgDOTASubmitPlayerReportResponse_k_eSuccess              CMsgDOTASubmitPlayerReportResponse_EResult = 1
	CMsgDOTASubmitPlayerReportResponse_k_eDuplicateReport      CMsgDOTASubmitPlayerReportResponse_EResult = 2
	CMsgDOTASubmitPlayerReportResponse_k_eMixedReportFlags     CMsgDOTASubmitPlayerReportResponse_EResult = 3
	CMsgDOTASubmitPlayerReportResponse_k_eTooLate              CMsgDOTASubmitPlayerReportResponse_EResult = 4
	CMsgDOTASubmitPlayerReportResponse_k_eInvalidPregameReport CMsgDOTASubmitPlayerReportResponse_EResult = 5
	CMsgDOTASubmitPlayerReportResponse_k_eHasntChatted         CMsgDOTASubmitPlayerReportResponse_EResult = 6
	CMsgDOTASubmitPlayerReportResponse_k_eInvalid              CMsgDOTASubmitPlayerReportResponse_EResult = 7
	CMsgDOTASubmitPlayerReportResponse_k_eOwnership            CMsgDOTASubmitPlayerReportResponse_EResult = 8
	CMsgDOTASubmitPlayerReportResponse_k_eMissingRequirements  CMsgDOTASubmitPlayerReportResponse_EResult = 9
	CMsgDOTASubmitPlayerReportResponse_k_eInvalidRoleReport    CMsgDOTASubmitPlayerReportResponse_EResult = 10
	CMsgDOTASubmitPlayerReportResponse_k_eInvalidCoachReport   CMsgDOTASubmitPlayerReportResponse_EResult = 11
	CMsgDOTASubmitPlayerReportResponse_k_eNoRemainingReports   CMsgDOTASubmitPlayerReportResponse_EResult = 12
	CMsgDOTASubmitPlayerReportResponse_k_eInvalidMember        CMsgDOTASubmitPlayerReportResponse_EResult = 13
)

// Enum value maps for CMsgDOTASubmitPlayerReportResponse_EResult.
var (
	CMsgDOTASubmitPlayerReportResponse_EResult_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDuplicateReport",
		3:  "k_eMixedReportFlags",
		4:  "k_eTooLate",
		5:  "k_eInvalidPregameReport",
		6:  "k_eHasntChatted",
		7:  "k_eInvalid",
		8:  "k_eOwnership",
		9:  "k_eMissingRequirements",
		10: "k_eInvalidRoleReport",
		11: "k_eInvalidCoachReport",
		12: "k_eNoRemainingReports",
		13: "k_eInvalidMember",
	}
	CMsgDOTASubmitPlayerReportResponse_EResult_value = map[string]int32{
		"k_eInternalError":        0,
		"k_eSuccess":              1,
		"k_eDuplicateReport":      2,
		"k_eMixedReportFlags":     3,
		"k_eTooLate":              4,
		"k_eInvalidPregameReport": 5,
		"k_eHasntChatted":         6,
		"k_eInvalid":              7,
		"k_eOwnership":            8,
		"k_eMissingRequirements":  9,
		"k_eInvalidRoleReport":    10,
		"k_eInvalidCoachReport":   11,
		"k_eNoRemainingReports":   12,
		"k_eInvalidMember":        13,
	}
)

func (x CMsgDOTASubmitPlayerReportResponse_EResult) Enum() *CMsgDOTASubmitPlayerReportResponse_EResult {
	p := new(CMsgDOTASubmitPlayerReportResponse_EResult)
	*p = x
	return p
}

func (x CMsgDOTASubmitPlayerReportResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASubmitPlayerReportResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[12].Descriptor()
}

func (CMsgDOTASubmitPlayerReportResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[12]
}

func (x CMsgDOTASubmitPlayerReportResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASubmitPlayerReportResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASubmitPlayerReportResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTASubmitPlayerReportResponse_EResult.Descriptor instead.
func (CMsgDOTASubmitPlayerReportResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{8, 0}
}

type CMsgDOTASubmitPlayerReportResponseV2_EResult int32

const (
	CMsgDOTASubmitPlayerReportResponseV2_k_eInternalError           CMsgDOTASubmitPlayerReportResponseV2_EResult = 0
	CMsgDOTASubmitPlayerReportResponseV2_k_eSuccess                 CMsgDOTASubmitPlayerReportResponseV2_EResult = 1
	CMsgDOTASubmitPlayerReportResponseV2_k_eDuplicateReport         CMsgDOTASubmitPlayerReportResponseV2_EResult = 2
	CMsgDOTASubmitPlayerReportResponseV2_k_eMixedReportFlags        CMsgDOTASubmitPlayerReportResponseV2_EResult = 3
	CMsgDOTASubmitPlayerReportResponseV2_k_eTooLate                 CMsgDOTASubmitPlayerReportResponseV2_EResult = 4
	CMsgDOTASubmitPlayerReportResponseV2_k_eInvalidPregameReport    CMsgDOTASubmitPlayerReportResponseV2_EResult = 5
	CMsgDOTASubmitPlayerReportResponseV2_k_eHasntChatted            CMsgDOTASubmitPlayerReportResponseV2_EResult = 6
	CMsgDOTASubmitPlayerReportResponseV2_k_eInvalid                 CMsgDOTASubmitPlayerReportResponseV2_EResult = 7
	CMsgDOTASubmitPlayerReportResponseV2_k_eOwnership               CMsgDOTASubmitPlayerReportResponseV2_EResult = 8
	CMsgDOTASubmitPlayerReportResponseV2_k_eMissingRequirements     CMsgDOTASubmitPlayerReportResponseV2_EResult = 9
	CMsgDOTASubmitPlayerReportResponseV2_k_eInvalidRoleReport       CMsgDOTASubmitPlayerReportResponseV2_EResult = 10
	CMsgDOTASubmitPlayerReportResponseV2_k_eInvalidCoachReport      CMsgDOTASubmitPlayerReportResponseV2_EResult = 11
	CMsgDOTASubmitPlayerReportResponseV2_k_eNoRemainingReports      CMsgDOTASubmitPlayerReportResponseV2_EResult = 12
	CMsgDOTASubmitPlayerReportResponseV2_k_eInvalidMember           CMsgDOTASubmitPlayerReportResponseV2_EResult = 13
	CMsgDOTASubmitPlayerReportResponseV2_k_eCannotReportPartyMember CMsgDOTASubmitPlayerReportResponseV2_EResult = 14
)

// Enum value maps for CMsgDOTASubmitPlayerReportResponseV2_EResult.
var (
	CMsgDOTASubmitPlayerReportResponseV2_EResult_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eDuplicateReport",
		3:  "k_eMixedReportFlags",
		4:  "k_eTooLate",
		5:  "k_eInvalidPregameReport",
		6:  "k_eHasntChatted",
		7:  "k_eInvalid",
		8:  "k_eOwnership",
		9:  "k_eMissingRequirements",
		10: "k_eInvalidRoleReport",
		11: "k_eInvalidCoachReport",
		12: "k_eNoRemainingReports",
		13: "k_eInvalidMember",
		14: "k_eCannotReportPartyMember",
	}
	CMsgDOTASubmitPlayerReportResponseV2_EResult_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eDuplicateReport":         2,
		"k_eMixedReportFlags":        3,
		"k_eTooLate":                 4,
		"k_eInvalidPregameReport":    5,
		"k_eHasntChatted":            6,
		"k_eInvalid":                 7,
		"k_eOwnership":               8,
		"k_eMissingRequirements":     9,
		"k_eInvalidRoleReport":       10,
		"k_eInvalidCoachReport":      11,
		"k_eNoRemainingReports":      12,
		"k_eInvalidMember":           13,
		"k_eCannotReportPartyMember": 14,
	}
)

func (x CMsgDOTASubmitPlayerReportResponseV2_EResult) Enum() *CMsgDOTASubmitPlayerReportResponseV2_EResult {
	p := new(CMsgDOTASubmitPlayerReportResponseV2_EResult)
	*p = x
	return p
}

func (x CMsgDOTASubmitPlayerReportResponseV2_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASubmitPlayerReportResponseV2_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[13].Descriptor()
}

func (CMsgDOTASubmitPlayerReportResponseV2_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[13]
}

func (x CMsgDOTASubmitPlayerReportResponseV2_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASubmitPlayerReportResponseV2_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASubmitPlayerReportResponseV2_EResult(num)
	return nil
}

// Deprecated: Use CMsgDOTASubmitPlayerReportResponseV2_EResult.Descriptor instead.
func (CMsgDOTASubmitPlayerReportResponseV2_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{12, 0}
}

type CMsgGCNotificationsUpdate_EResult int32

const (
	CMsgGCNotificationsUpdate_SUCCESS           CMsgGCNotificationsUpdate_EResult = 0
	CMsgGCNotificationsUpdate_ERROR_UNSPECIFIED CMsgGCNotificationsUpdate_EResult = 1
)

// Enum value maps for CMsgGCNotificationsUpdate_EResult.
var (
	CMsgGCNotificationsUpdate_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
	}
	CMsgGCNotificationsUpdate_EResult_value = map[string]int32{
		"SUCCESS":           0,
		"ERROR_UNSPECIFIED": 1,
	}
)

func (x CMsgGCNotificationsUpdate_EResult) Enum() *CMsgGCNotificationsUpdate_EResult {
	p := new(CMsgGCNotificationsUpdate_EResult)
	*p = x
	return p
}

func (x CMsgGCNotificationsUpdate_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCNotificationsUpdate_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[14].Descriptor()
}

func (CMsgGCNotificationsUpdate_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[14]
}

func (x CMsgGCNotificationsUpdate_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCNotificationsUpdate_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCNotificationsUpdate_EResult(num)
	return nil
}

// Deprecated: Use CMsgGCNotificationsUpdate_EResult.Descriptor instead.
func (CMsgGCNotificationsUpdate_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{74, 0}
}

type CMsgGCPlayerInfoSubmitResponse_EResult int32

const (
	CMsgGCPlayerInfoSubmitResponse_SUCCESS                  CMsgGCPlayerInfoSubmitResponse_EResult = 0
	CMsgGCPlayerInfoSubmitResponse_ERROR_UNSPECIFIED        CMsgGCPlayerInfoSubmitResponse_EResult = 1
	CMsgGCPlayerInfoSubmitResponse_ERROR_INFO_LOCKED        CMsgGCPlayerInfoSubmitResponse_EResult = 2
	CMsgGCPlayerInfoSubmitResponse_ERROR_NOT_MEMBER_OF_TEAM CMsgGCPlayerInfoSubmitResponse_EResult = 3
)

// Enum value maps for CMsgGCPlayerInfoSubmitResponse_EResult.
var (
	CMsgGCPlayerInfoSubmitResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNSPECIFIED",
		2: "ERROR_INFO_LOCKED",
		3: "ERROR_NOT_MEMBER_OF_TEAM",
	}
	CMsgGCPlayerInfoSubmitResponse_EResult_value = map[string]int32{
		"SUCCESS":                  0,
		"ERROR_UNSPECIFIED":        1,
		"ERROR_INFO_LOCKED":        2,
		"ERROR_NOT_MEMBER_OF_TEAM": 3,
	}
)

func (x CMsgGCPlayerInfoSubmitResponse_EResult) Enum() *CMsgGCPlayerInfoSubmitResponse_EResult {
	p := new(CMsgGCPlayerInfoSubmitResponse_EResult)
	*p = x
	return p
}

func (x CMsgGCPlayerInfoSubmitResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCPlayerInfoSubmitResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[15].Descriptor()
}

func (CMsgGCPlayerInfoSubmitResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[15]
}

func (x CMsgGCPlayerInfoSubmitResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCPlayerInfoSubmitResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCPlayerInfoSubmitResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgGCPlayerInfoSubmitResponse_EResult.Descriptor instead.
func (CMsgGCPlayerInfoSubmitResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{78, 0}
}

type CMsgGCToClientRankResponse_EResultCode int32

const (
	CMsgGCToClientRankResponse_k_Succeeded       CMsgGCToClientRankResponse_EResultCode = 0
	CMsgGCToClientRankResponse_k_Failed          CMsgGCToClientRankResponse_EResultCode = 1
	CMsgGCToClientRankResponse_k_InvalidRankType CMsgGCToClientRankResponse_EResultCode = 2
)

// Enum value maps for CMsgGCToClientRankResponse_EResultCode.
var (
	CMsgGCToClientRankResponse_EResultCode_name = map[int32]string{
		0: "k_Succeeded",
		1: "k_Failed",
		2: "k_InvalidRankType",
	}
	CMsgGCToClientRankResponse_EResultCode_value = map[string]int32{
		"k_Succeeded":       0,
		"k_Failed":          1,
		"k_InvalidRankType": 2,
	}
)

func (x CMsgGCToClientRankResponse_EResultCode) Enum() *CMsgGCToClientRankResponse_EResultCode {
	p := new(CMsgGCToClientRankResponse_EResultCode)
	*p = x
	return p
}

func (x CMsgGCToClientRankResponse_EResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientRankResponse_EResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[16].Descriptor()
}

func (CMsgGCToClientRankResponse_EResultCode) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[16]
}

func (x CMsgGCToClientRankResponse_EResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientRankResponse_EResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientRankResponse_EResultCode(num)
	return nil
}

// Deprecated: Use CMsgGCToClientRankResponse_EResultCode.Descriptor instead.
func (CMsgGCToClientRankResponse_EResultCode) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{91, 0}
}

type CMsgPlayerConductScorecard_EBehaviorRating int32

const (
	CMsgPlayerConductScorecard_k_eBehaviorGood    CMsgPlayerConductScorecard_EBehaviorRating = 0
	CMsgPlayerConductScorecard_k_eBehaviorWarning CMsgPlayerConductScorecard_EBehaviorRating = 1
	CMsgPlayerConductScorecard_k_eBehaviorBad     CMsgPlayerConductScorecard_EBehaviorRating = 2
)

// Enum value maps for CMsgPlayerConductScorecard_EBehaviorRating.
var (
	CMsgPlayerConductScorecard_EBehaviorRating_name = map[int32]string{
		0: "k_eBehaviorGood",
		1: "k_eBehaviorWarning",
		2: "k_eBehaviorBad",
	}
	CMsgPlayerConductScorecard_EBehaviorRating_value = map[string]int32{
		"k_eBehaviorGood":    0,
		"k_eBehaviorWarning": 1,
		"k_eBehaviorBad":     2,
	}
)

func (x CMsgPlayerConductScorecard_EBehaviorRating) Enum() *CMsgPlayerConductScorecard_EBehaviorRating {
	p := new(CMsgPlayerConductScorecard_EBehaviorRating)
	*p = x
	return p
}

func (x CMsgPlayerConductScorecard_EBehaviorRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgPlayerConductScorecard_EBehaviorRating) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[17].Descriptor()
}

func (CMsgPlayerConductScorecard_EBehaviorRating) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[17]
}

func (x CMsgPlayerConductScorecard_EBehaviorRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgPlayerConductScorecard_EBehaviorRating) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgPlayerConductScorecard_EBehaviorRating(num)
	return nil
}

// Deprecated: Use CMsgPlayerConductScorecard_EBehaviorRating.Descriptor instead.
func (CMsgPlayerConductScorecard_EBehaviorRating) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{120, 0}
}

type CMsgClientToGCVoteForArcanaResponse_Result int32

const (
	CMsgClientToGCVoteForArcanaResponse_SUCCEEDED                    CMsgClientToGCVoteForArcanaResponse_Result = 0
	CMsgClientToGCVoteForArcanaResponse_VOTING_NOT_ENABLED_FOR_ROUND CMsgClientToGCVoteForArcanaResponse_Result = 1
	CMsgClientToGCVoteForArcanaResponse_UNKNOWN_FAILURE              CMsgClientToGCVoteForArcanaResponse_Result = 2
)

// Enum value maps for CMsgClientToGCVoteForArcanaResponse_Result.
var (
	CMsgClientToGCVoteForArcanaResponse_Result_name = map[int32]string{
		0: "SUCCEEDED",
		1: "VOTING_NOT_ENABLED_FOR_ROUND",
		2: "UNKNOWN_FAILURE",
	}
	CMsgClientToGCVoteForArcanaResponse_Result_value = map[string]int32{
		"SUCCEEDED":                    0,
		"VOTING_NOT_ENABLED_FOR_ROUND": 1,
		"UNKNOWN_FAILURE":              2,
	}
)

func (x CMsgClientToGCVoteForArcanaResponse_Result) Enum() *CMsgClientToGCVoteForArcanaResponse_Result {
	p := new(CMsgClientToGCVoteForArcanaResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCVoteForArcanaResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCVoteForArcanaResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[18].Descriptor()
}

func (CMsgClientToGCVoteForArcanaResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[18]
}

func (x CMsgClientToGCVoteForArcanaResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCVoteForArcanaResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCVoteForArcanaResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCVoteForArcanaResponse_Result.Descriptor instead.
func (CMsgClientToGCVoteForArcanaResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{139, 0}
}

type CMsgDOTARedeemItemResponse_EResultCode int32

const (
	CMsgDOTARedeemItemResponse_k_Succeeded CMsgDOTARedeemItemResponse_EResultCode = 0
	CMsgDOTARedeemItemResponse_k_Failed    CMsgDOTARedeemItemResponse_EResultCode = 1
)

// Enum value maps for CMsgDOTARedeemItemResponse_EResultCode.
var (
	CMsgDOTARedeemItemResponse_EResultCode_name = map[int32]string{
		0: "k_Succeeded",
		1: "k_Failed",
	}
	CMsgDOTARedeemItemResponse_EResultCode_value = map[string]int32{
		"k_Succeeded": 0,
		"k_Failed":    1,
	}
)

func (x CMsgDOTARedeemItemResponse_EResultCode) Enum() *CMsgDOTARedeemItemResponse_EResultCode {
	p := new(CMsgDOTARedeemItemResponse_EResultCode)
	*p = x
	return p
}

func (x CMsgDOTARedeemItemResponse_EResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTARedeemItemResponse_EResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[19].Descriptor()
}

func (CMsgDOTARedeemItemResponse_EResultCode) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[19]
}

func (x CMsgDOTARedeemItemResponse_EResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTARedeemItemResponse_EResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTARedeemItemResponse_EResultCode(num)
	return nil
}

// Deprecated: Use CMsgDOTARedeemItemResponse_EResultCode.Descriptor instead.
func (CMsgDOTARedeemItemResponse_EResultCode) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{149, 0}
}

type CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult int32

const (
	CMsgClientToGCSelectCompendiumInGamePredictionResponse_SUCCESS                CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = 0
	CMsgClientToGCSelectCompendiumInGamePredictionResponse_INVALID_MATCH          CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = 1
	CMsgClientToGCSelectCompendiumInGamePredictionResponse_PREDICTIONS_ARE_CLOSED CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = 2
	CMsgClientToGCSelectCompendiumInGamePredictionResponse_OTHER_ERROR            CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult = 3
)

// Enum value maps for CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.
var (
	CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "INVALID_MATCH",
		2: "PREDICTIONS_ARE_CLOSED",
		3: "OTHER_ERROR",
	}
	CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult_value = map[string]int32{
		"SUCCESS":                0,
		"INVALID_MATCH":          1,
		"PREDICTIONS_ARE_CLOSED": 2,
		"OTHER_ERROR":            3,
	}
)

func (x CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) Enum() *CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult {
	p := new(CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult)
	*p = x
	return p
}

func (x CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[20].Descriptor()
}

func (CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[20]
}

func (x CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult.Descriptor instead.
func (CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{151, 0}
}

type CMsgClientToGCOpenPlayerCardPackResponse_Result int32

const (
	CMsgClientToGCOpenPlayerCardPackResponse_SUCCESS                         CMsgClientToGCOpenPlayerCardPackResponse_Result = 1
	CMsgClientToGCOpenPlayerCardPackResponse_ERROR_INTERNAL                  CMsgClientToGCOpenPlayerCardPackResponse_Result = 2
	CMsgClientToGCOpenPlayerCardPackResponse_ERROR_FAILED_TO_FIND_PACK       CMsgClientToGCOpenPlayerCardPackResponse_Result = 3
	CMsgClientToGCOpenPlayerCardPackResponse_ERROR_ITEM_NOT_CARD_PACK        CMsgClientToGCOpenPlayerCardPackResponse_Result = 4
	CMsgClientToGCOpenPlayerCardPackResponse_ERROR_FAILED_CARD_CREATE        CMsgClientToGCOpenPlayerCardPackResponse_Result = 5
	CMsgClientToGCOpenPlayerCardPackResponse_ERROR_INVALID_TEAM_ID_ATTRIBUTE CMsgClientToGCOpenPlayerCardPackResponse_Result = 6
	CMsgClientToGCOpenPlayerCardPackResponse_ERROR_INVALID_TEAM_ID           CMsgClientToGCOpenPlayerCardPackResponse_Result = 7
)

// Enum value maps for CMsgClientToGCOpenPlayerCardPackResponse_Result.
var (
	CMsgClientToGCOpenPlayerCardPackResponse_Result_name = map[int32]string{
		1: "SUCCESS",
		2: "ERROR_INTERNAL",
		3: "ERROR_FAILED_TO_FIND_PACK",
		4: "ERROR_ITEM_NOT_CARD_PACK",
		5: "ERROR_FAILED_CARD_CREATE",
		6: "ERROR_INVALID_TEAM_ID_ATTRIBUTE",
		7: "ERROR_INVALID_TEAM_ID",
	}
	CMsgClientToGCOpenPlayerCardPackResponse_Result_value = map[string]int32{
		"SUCCESS":                         1,
		"ERROR_INTERNAL":                  2,
		"ERROR_FAILED_TO_FIND_PACK":       3,
		"ERROR_ITEM_NOT_CARD_PACK":        4,
		"ERROR_FAILED_CARD_CREATE":        5,
		"ERROR_INVALID_TEAM_ID_ATTRIBUTE": 6,
		"ERROR_INVALID_TEAM_ID":           7,
	}
)

func (x CMsgClientToGCOpenPlayerCardPackResponse_Result) Enum() *CMsgClientToGCOpenPlayerCardPackResponse_Result {
	p := new(CMsgClientToGCOpenPlayerCardPackResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCOpenPlayerCardPackResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOpenPlayerCardPackResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[21].Descriptor()
}

func (CMsgClientToGCOpenPlayerCardPackResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[21]
}

func (x CMsgClientToGCOpenPlayerCardPackResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOpenPlayerCardPackResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOpenPlayerCardPackResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOpenPlayerCardPackResponse_Result.Descriptor instead.
func (CMsgClientToGCOpenPlayerCardPackResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{153, 0}
}

type CMsgClientToGCRecyclePlayerCardResponse_Result int32

const (
	CMsgClientToGCRecyclePlayerCardResponse_SUCCESS                          CMsgClientToGCRecyclePlayerCardResponse_Result = 1
	CMsgClientToGCRecyclePlayerCardResponse_ERROR_INTERNAL                   CMsgClientToGCRecyclePlayerCardResponse_Result = 2
	CMsgClientToGCRecyclePlayerCardResponse_ERROR_FAILED_TO_FIND_PLAYER_CARD CMsgClientToGCRecyclePlayerCardResponse_Result = 3
	CMsgClientToGCRecyclePlayerCardResponse_ERROR_ITEM_NOT_PLAYER_CARD       CMsgClientToGCRecyclePlayerCardResponse_Result = 4
	CMsgClientToGCRecyclePlayerCardResponse_ERROR_FAILED_DUST_CARD_CREATE    CMsgClientToGCRecyclePlayerCardResponse_Result = 5
	CMsgClientToGCRecyclePlayerCardResponse_ERROR_CARD_LOCKED                CMsgClientToGCRecyclePlayerCardResponse_Result = 6
	CMsgClientToGCRecyclePlayerCardResponse_ERROR_NO_CARDS_SPECIFIED         CMsgClientToGCRecyclePlayerCardResponse_Result = 7
)

// Enum value maps for CMsgClientToGCRecyclePlayerCardResponse_Result.
var (
	CMsgClientToGCRecyclePlayerCardResponse_Result_name = map[int32]string{
		1: "SUCCESS",
		2: "ERROR_INTERNAL",
		3: "ERROR_FAILED_TO_FIND_PLAYER_CARD",
		4: "ERROR_ITEM_NOT_PLAYER_CARD",
		5: "ERROR_FAILED_DUST_CARD_CREATE",
		6: "ERROR_CARD_LOCKED",
		7: "ERROR_NO_CARDS_SPECIFIED",
	}
	CMsgClientToGCRecyclePlayerCardResponse_Result_value = map[string]int32{
		"SUCCESS":                          1,
		"ERROR_INTERNAL":                   2,
		"ERROR_FAILED_TO_FIND_PLAYER_CARD": 3,
		"ERROR_ITEM_NOT_PLAYER_CARD":       4,
		"ERROR_FAILED_DUST_CARD_CREATE":    5,
		"ERROR_CARD_LOCKED":                6,
		"ERROR_NO_CARDS_SPECIFIED":         7,
	}
)

func (x CMsgClientToGCRecyclePlayerCardResponse_Result) Enum() *CMsgClientToGCRecyclePlayerCardResponse_Result {
	p := new(CMsgClientToGCRecyclePlayerCardResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCRecyclePlayerCardResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRecyclePlayerCardResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[22].Descriptor()
}

func (CMsgClientToGCRecyclePlayerCardResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[22]
}

func (x CMsgClientToGCRecyclePlayerCardResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRecyclePlayerCardResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRecyclePlayerCardResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRecyclePlayerCardResponse_Result.Descriptor instead.
func (CMsgClientToGCRecyclePlayerCardResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{155, 0}
}

type CMsgClientToGCCreatePlayerCardPackResponse_Result int32

const (
	CMsgClientToGCCreatePlayerCardPackResponse_SUCCESS                       CMsgClientToGCCreatePlayerCardPackResponse_Result = 1
	CMsgClientToGCCreatePlayerCardPackResponse_ERROR_INTERNAL                CMsgClientToGCCreatePlayerCardPackResponse_Result = 2
	CMsgClientToGCCreatePlayerCardPackResponse_ERROR_INSUFFICIENT_DUST       CMsgClientToGCCreatePlayerCardPackResponse_Result = 3
	CMsgClientToGCCreatePlayerCardPackResponse_ERROR_ITEM_NOT_DUST_ITEM      CMsgClientToGCCreatePlayerCardPackResponse_Result = 4
	CMsgClientToGCCreatePlayerCardPackResponse_ERROR_FAILED_CARD_PACK_CREATE CMsgClientToGCCreatePlayerCardPackResponse_Result = 5
	CMsgClientToGCCreatePlayerCardPackResponse_ERROR_NO_CARD_PACK            CMsgClientToGCCreatePlayerCardPackResponse_Result = 6
	CMsgClientToGCCreatePlayerCardPackResponse_ERROR_NOT_AVAILABLE           CMsgClientToGCCreatePlayerCardPackResponse_Result = 7
)

// Enum value maps for CMsgClientToGCCreatePlayerCardPackResponse_Result.
var (
	CMsgClientToGCCreatePlayerCardPackResponse_Result_name = map[int32]string{
		1: "SUCCESS",
		2: "ERROR_INTERNAL",
		3: "ERROR_INSUFFICIENT_DUST",
		4: "ERROR_ITEM_NOT_DUST_ITEM",
		5: "ERROR_FAILED_CARD_PACK_CREATE",
		6: "ERROR_NO_CARD_PACK",
		7: "ERROR_NOT_AVAILABLE",
	}
	CMsgClientToGCCreatePlayerCardPackResponse_Result_value = map[string]int32{
		"SUCCESS":                       1,
		"ERROR_INTERNAL":                2,
		"ERROR_INSUFFICIENT_DUST":       3,
		"ERROR_ITEM_NOT_DUST_ITEM":      4,
		"ERROR_FAILED_CARD_PACK_CREATE": 5,
		"ERROR_NO_CARD_PACK":            6,
		"ERROR_NOT_AVAILABLE":           7,
	}
)

func (x CMsgClientToGCCreatePlayerCardPackResponse_Result) Enum() *CMsgClientToGCCreatePlayerCardPackResponse_Result {
	p := new(CMsgClientToGCCreatePlayerCardPackResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCreatePlayerCardPackResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCreatePlayerCardPackResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[23].Descriptor()
}

func (CMsgClientToGCCreatePlayerCardPackResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[23]
}

func (x CMsgClientToGCCreatePlayerCardPackResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCreatePlayerCardPackResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCreatePlayerCardPackResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCreatePlayerCardPackResponse_Result.Descriptor instead.
func (CMsgClientToGCCreatePlayerCardPackResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{157, 0}
}

type CMsgClientToGCCreateTeamPlayerCardPackResponse_Result int32

const (
	CMsgClientToGCCreateTeamPlayerCardPackResponse_SUCCESS                       CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 1
	CMsgClientToGCCreateTeamPlayerCardPackResponse_ERROR_INTERNAL                CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 2
	CMsgClientToGCCreateTeamPlayerCardPackResponse_ERROR_INSUFFICIENT_DUST       CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 3
	CMsgClientToGCCreateTeamPlayerCardPackResponse_ERROR_ITEM_NOT_DUST_ITEM      CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 4
	CMsgClientToGCCreateTeamPlayerCardPackResponse_ERROR_FAILED_CARD_PACK_CREATE CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 5
	CMsgClientToGCCreateTeamPlayerCardPackResponse_ERROR_NO_CARD_PACK            CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 6
	CMsgClientToGCCreateTeamPlayerCardPackResponse_ERROR_NOT_AVAILABLE           CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = 7
)

// Enum value maps for CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.
var (
	CMsgClientToGCCreateTeamPlayerCardPackResponse_Result_name = map[int32]string{
		1: "SUCCESS",
		2: "ERROR_INTERNAL",
		3: "ERROR_INSUFFICIENT_DUST",
		4: "ERROR_ITEM_NOT_DUST_ITEM",
		5: "ERROR_FAILED_CARD_PACK_CREATE",
		6: "ERROR_NO_CARD_PACK",
		7: "ERROR_NOT_AVAILABLE",
	}
	CMsgClientToGCCreateTeamPlayerCardPackResponse_Result_value = map[string]int32{
		"SUCCESS":                       1,
		"ERROR_INTERNAL":                2,
		"ERROR_INSUFFICIENT_DUST":       3,
		"ERROR_ITEM_NOT_DUST_ITEM":      4,
		"ERROR_FAILED_CARD_PACK_CREATE": 5,
		"ERROR_NO_CARD_PACK":            6,
		"ERROR_NOT_AVAILABLE":           7,
	}
)

func (x CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) Enum() *CMsgClientToGCCreateTeamPlayerCardPackResponse_Result {
	p := new(CMsgClientToGCCreateTeamPlayerCardPackResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[24].Descriptor()
}

func (CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[24]
}

func (x CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCreateTeamPlayerCardPackResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCreateTeamPlayerCardPackResponse_Result.Descriptor instead.
func (CMsgClientToGCCreateTeamPlayerCardPackResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{159, 0}
}

type CMsgDOTAAnchorPhoneNumberResponse_Result int32

const (
	CMsgDOTAAnchorPhoneNumberResponse_SUCCESS               CMsgDOTAAnchorPhoneNumberResponse_Result = 0
	CMsgDOTAAnchorPhoneNumberResponse_ERROR_UNKNOWN         CMsgDOTAAnchorPhoneNumberResponse_Result = 1
	CMsgDOTAAnchorPhoneNumberResponse_ERROR_NO_STEAM_PHONE  CMsgDOTAAnchorPhoneNumberResponse_Result = 2
	CMsgDOTAAnchorPhoneNumberResponse_ERROR_ALREADY_IN_USE  CMsgDOTAAnchorPhoneNumberResponse_Result = 3
	CMsgDOTAAnchorPhoneNumberResponse_ERROR_COOLDOWN_ACTIVE CMsgDOTAAnchorPhoneNumberResponse_Result = 4
	CMsgDOTAAnchorPhoneNumberResponse_ERROR_GAC_ISSUE       CMsgDOTAAnchorPhoneNumberResponse_Result = 5
)

// Enum value maps for CMsgDOTAAnchorPhoneNumberResponse_Result.
var (
	CMsgDOTAAnchorPhoneNumberResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
		2: "ERROR_NO_STEAM_PHONE",
		3: "ERROR_ALREADY_IN_USE",
		4: "ERROR_COOLDOWN_ACTIVE",
		5: "ERROR_GAC_ISSUE",
	}
	CMsgDOTAAnchorPhoneNumberResponse_Result_value = map[string]int32{
		"SUCCESS":               0,
		"ERROR_UNKNOWN":         1,
		"ERROR_NO_STEAM_PHONE":  2,
		"ERROR_ALREADY_IN_USE":  3,
		"ERROR_COOLDOWN_ACTIVE": 4,
		"ERROR_GAC_ISSUE":       5,
	}
)

func (x CMsgDOTAAnchorPhoneNumberResponse_Result) Enum() *CMsgDOTAAnchorPhoneNumberResponse_Result {
	p := new(CMsgDOTAAnchorPhoneNumberResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTAAnchorPhoneNumberResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAAnchorPhoneNumberResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[25].Descriptor()
}

func (CMsgDOTAAnchorPhoneNumberResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[25]
}

func (x CMsgDOTAAnchorPhoneNumberResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAAnchorPhoneNumberResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAAnchorPhoneNumberResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTAAnchorPhoneNumberResponse_Result.Descriptor instead.
func (CMsgDOTAAnchorPhoneNumberResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{183, 0}
}

type CMsgDOTAUnanchorPhoneNumberResponse_Result int32

const (
	CMsgDOTAUnanchorPhoneNumberResponse_SUCCESS       CMsgDOTAUnanchorPhoneNumberResponse_Result = 0
	CMsgDOTAUnanchorPhoneNumberResponse_ERROR_UNKNOWN CMsgDOTAUnanchorPhoneNumberResponse_Result = 1
)

// Enum value maps for CMsgDOTAUnanchorPhoneNumberResponse_Result.
var (
	CMsgDOTAUnanchorPhoneNumberResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
	}
	CMsgDOTAUnanchorPhoneNumberResponse_Result_value = map[string]int32{
		"SUCCESS":       0,
		"ERROR_UNKNOWN": 1,
	}
)

func (x CMsgDOTAUnanchorPhoneNumberResponse_Result) Enum() *CMsgDOTAUnanchorPhoneNumberResponse_Result {
	p := new(CMsgDOTAUnanchorPhoneNumberResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTAUnanchorPhoneNumberResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAUnanchorPhoneNumberResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[26].Descriptor()
}

func (CMsgDOTAUnanchorPhoneNumberResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[26]
}

func (x CMsgDOTAUnanchorPhoneNumberResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAUnanchorPhoneNumberResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAUnanchorPhoneNumberResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTAUnanchorPhoneNumberResponse_Result.Descriptor instead.
func (CMsgDOTAUnanchorPhoneNumberResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{185, 0}
}

type CMsgDOTASelectionPriorityChoiceResponse_Result int32

const (
	CMsgDOTASelectionPriorityChoiceResponse_SUCCESS       CMsgDOTASelectionPriorityChoiceResponse_Result = 0
	CMsgDOTASelectionPriorityChoiceResponse_ERROR_UNKNOWN CMsgDOTASelectionPriorityChoiceResponse_Result = 1
)

// Enum value maps for CMsgDOTASelectionPriorityChoiceResponse_Result.
var (
	CMsgDOTASelectionPriorityChoiceResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
	}
	CMsgDOTASelectionPriorityChoiceResponse_Result_value = map[string]int32{
		"SUCCESS":       0,
		"ERROR_UNKNOWN": 1,
	}
)

func (x CMsgDOTASelectionPriorityChoiceResponse_Result) Enum() *CMsgDOTASelectionPriorityChoiceResponse_Result {
	p := new(CMsgDOTASelectionPriorityChoiceResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTASelectionPriorityChoiceResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTASelectionPriorityChoiceResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[27].Descriptor()
}

func (CMsgDOTASelectionPriorityChoiceResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[27]
}

func (x CMsgDOTASelectionPriorityChoiceResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTASelectionPriorityChoiceResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTASelectionPriorityChoiceResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTASelectionPriorityChoiceResponse_Result.Descriptor instead.
func (CMsgDOTASelectionPriorityChoiceResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{190, 0}
}

type CMsgDOTAGameAutographRewardResponse_Result int32

const (
	CMsgDOTAGameAutographRewardResponse_SUCCESS       CMsgDOTAGameAutographRewardResponse_Result = 0
	CMsgDOTAGameAutographRewardResponse_ERROR_UNKNOWN CMsgDOTAGameAutographRewardResponse_Result = 1
)

// Enum value maps for CMsgDOTAGameAutographRewardResponse_Result.
var (
	CMsgDOTAGameAutographRewardResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
	}
	CMsgDOTAGameAutographRewardResponse_Result_value = map[string]int32{
		"SUCCESS":       0,
		"ERROR_UNKNOWN": 1,
	}
)

func (x CMsgDOTAGameAutographRewardResponse_Result) Enum() *CMsgDOTAGameAutographRewardResponse_Result {
	p := new(CMsgDOTAGameAutographRewardResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTAGameAutographRewardResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAGameAutographRewardResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[28].Descriptor()
}

func (CMsgDOTAGameAutographRewardResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[28]
}

func (x CMsgDOTAGameAutographRewardResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAGameAutographRewardResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAGameAutographRewardResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTAGameAutographRewardResponse_Result.Descriptor instead.
func (CMsgDOTAGameAutographRewardResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{192, 0}
}

type CMsgDOTADestroyLobbyResponse_Result int32

const (
	CMsgDOTADestroyLobbyResponse_SUCCESS       CMsgDOTADestroyLobbyResponse_Result = 0
	CMsgDOTADestroyLobbyResponse_ERROR_UNKNOWN CMsgDOTADestroyLobbyResponse_Result = 1
)

// Enum value maps for CMsgDOTADestroyLobbyResponse_Result.
var (
	CMsgDOTADestroyLobbyResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
	}
	CMsgDOTADestroyLobbyResponse_Result_value = map[string]int32{
		"SUCCESS":       0,
		"ERROR_UNKNOWN": 1,
	}
)

func (x CMsgDOTADestroyLobbyResponse_Result) Enum() *CMsgDOTADestroyLobbyResponse_Result {
	p := new(CMsgDOTADestroyLobbyResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTADestroyLobbyResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTADestroyLobbyResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[29].Descriptor()
}

func (CMsgDOTADestroyLobbyResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[29]
}

func (x CMsgDOTADestroyLobbyResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTADestroyLobbyResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTADestroyLobbyResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTADestroyLobbyResponse_Result.Descriptor instead.
func (CMsgDOTADestroyLobbyResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{194, 0}
}

type CMsgPurchaseItemWithEventPointsResponse_Result int32

const (
	CMsgPurchaseItemWithEventPointsResponse_SUCCESS               CMsgPurchaseItemWithEventPointsResponse_Result = 0
	CMsgPurchaseItemWithEventPointsResponse_UNKNOWN_EVENT         CMsgPurchaseItemWithEventPointsResponse_Result = 1
	CMsgPurchaseItemWithEventPointsResponse_UNKNOWN_ITEM          CMsgPurchaseItemWithEventPointsResponse_Result = 2
	CMsgPurchaseItemWithEventPointsResponse_BAD_QUANTITY          CMsgPurchaseItemWithEventPointsResponse_Result = 3
	CMsgPurchaseItemWithEventPointsResponse_NOT_PURCHASEABLE      CMsgPurchaseItemWithEventPointsResponse_Result = 4
	CMsgPurchaseItemWithEventPointsResponse_SDO_LOAD_FAILED       CMsgPurchaseItemWithEventPointsResponse_Result = 5
	CMsgPurchaseItemWithEventPointsResponse_NOT_ENOUGH_POINTS     CMsgPurchaseItemWithEventPointsResponse_Result = 6
	CMsgPurchaseItemWithEventPointsResponse_SQL_ERROR             CMsgPurchaseItemWithEventPointsResponse_Result = 7
	CMsgPurchaseItemWithEventPointsResponse_FAILED_TO_SEND        CMsgPurchaseItemWithEventPointsResponse_Result = 8
	CMsgPurchaseItemWithEventPointsResponse_SERVER_ERROR          CMsgPurchaseItemWithEventPointsResponse_Result = 9
	CMsgPurchaseItemWithEventPointsResponse_NOT_ALLOWED           CMsgPurchaseItemWithEventPointsResponse_Result = 10
	CMsgPurchaseItemWithEventPointsResponse_CANCELLED             CMsgPurchaseItemWithEventPointsResponse_Result = 11
	CMsgPurchaseItemWithEventPointsResponse_CLIENT_ERROR          CMsgPurchaseItemWithEventPointsResponse_Result = 12
	CMsgPurchaseItemWithEventPointsResponse_SUBSCRIPTION_REQUIRED CMsgPurchaseItemWithEventPointsResponse_Result = 13
)

// Enum value maps for CMsgPurchaseItemWithEventPointsResponse_Result.
var (
	CMsgPurchaseItemWithEventPointsResponse_Result_name = map[int32]string{
		0:  "SUCCESS",
		1:  "UNKNOWN_EVENT",
		2:  "UNKNOWN_ITEM",
		3:  "BAD_QUANTITY",
		4:  "NOT_PURCHASEABLE",
		5:  "SDO_LOAD_FAILED",
		6:  "NOT_ENOUGH_POINTS",
		7:  "SQL_ERROR",
		8:  "FAILED_TO_SEND",
		9:  "SERVER_ERROR",
		10: "NOT_ALLOWED",
		11: "CANCELLED",
		12: "CLIENT_ERROR",
		13: "SUBSCRIPTION_REQUIRED",
	}
	CMsgPurchaseItemWithEventPointsResponse_Result_value = map[string]int32{
		"SUCCESS":               0,
		"UNKNOWN_EVENT":         1,
		"UNKNOWN_ITEM":          2,
		"BAD_QUANTITY":          3,
		"NOT_PURCHASEABLE":      4,
		"SDO_LOAD_FAILED":       5,
		"NOT_ENOUGH_POINTS":     6,
		"SQL_ERROR":             7,
		"FAILED_TO_SEND":        8,
		"SERVER_ERROR":          9,
		"NOT_ALLOWED":           10,
		"CANCELLED":             11,
		"CLIENT_ERROR":          12,
		"SUBSCRIPTION_REQUIRED": 13,
	}
)

func (x CMsgPurchaseItemWithEventPointsResponse_Result) Enum() *CMsgPurchaseItemWithEventPointsResponse_Result {
	p := new(CMsgPurchaseItemWithEventPointsResponse_Result)
	*p = x
	return p
}

func (x CMsgPurchaseItemWithEventPointsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgPurchaseItemWithEventPointsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[30].Descriptor()
}

func (CMsgPurchaseItemWithEventPointsResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[30]
}

func (x CMsgPurchaseItemWithEventPointsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgPurchaseItemWithEventPointsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgPurchaseItemWithEventPointsResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgPurchaseItemWithEventPointsResponse_Result.Descriptor instead.
func (CMsgPurchaseItemWithEventPointsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{198, 0}
}

type CMsgProfileResponse_EResponse int32

const (
	CMsgProfileResponse_k_eInternalError CMsgProfileResponse_EResponse = 0
	CMsgProfileResponse_k_eSuccess       CMsgProfileResponse_EResponse = 1
	CMsgProfileResponse_k_eTooBusy       CMsgProfileResponse_EResponse = 2
	CMsgProfileResponse_k_eDisabled      CMsgProfileResponse_EResponse = 3
)

// Enum value maps for CMsgProfileResponse_EResponse.
var (
	CMsgProfileResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
	}
	CMsgProfileResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
	}
)

func (x CMsgProfileResponse_EResponse) Enum() *CMsgProfileResponse_EResponse {
	p := new(CMsgProfileResponse_EResponse)
	*p = x
	return p
}

func (x CMsgProfileResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgProfileResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[31].Descriptor()
}

func (CMsgProfileResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[31]
}

func (x CMsgProfileResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgProfileResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgProfileResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgProfileResponse_EResponse.Descriptor instead.
func (CMsgProfileResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{204, 0}
}

type CMsgProfileUpdateResponse_Result int32

const (
	CMsgProfileUpdateResponse_SUCCESS           CMsgProfileUpdateResponse_Result = 0
	CMsgProfileUpdateResponse_FAILURE           CMsgProfileUpdateResponse_Result = 1
	CMsgProfileUpdateResponse_FAILURE_BAD_HERO1 CMsgProfileUpdateResponse_Result = 2
	CMsgProfileUpdateResponse_FAILURE_BAD_HERO2 CMsgProfileUpdateResponse_Result = 3
	CMsgProfileUpdateResponse_FAILURE_BAD_HERO3 CMsgProfileUpdateResponse_Result = 4
)

// Enum value maps for CMsgProfileUpdateResponse_Result.
var (
	CMsgProfileUpdateResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "FAILURE_BAD_HERO1",
		3: "FAILURE_BAD_HERO2",
		4: "FAILURE_BAD_HERO3",
	}
	CMsgProfileUpdateResponse_Result_value = map[string]int32{
		"SUCCESS":           0,
		"FAILURE":           1,
		"FAILURE_BAD_HERO1": 2,
		"FAILURE_BAD_HERO2": 3,
		"FAILURE_BAD_HERO3": 4,
	}
)

func (x CMsgProfileUpdateResponse_Result) Enum() *CMsgProfileUpdateResponse_Result {
	p := new(CMsgProfileUpdateResponse_Result)
	*p = x
	return p
}

func (x CMsgProfileUpdateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgProfileUpdateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[32].Descriptor()
}

func (CMsgProfileUpdateResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[32]
}

func (x CMsgProfileUpdateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgProfileUpdateResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgProfileUpdateResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgProfileUpdateResponse_Result.Descriptor instead.
func (CMsgProfileUpdateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{206, 0}
}

type CMsgActivatePlusFreeTrialResponse_Result int32

const (
	CMsgActivatePlusFreeTrialResponse_SUCCESS                       CMsgActivatePlusFreeTrialResponse_Result = 0
	CMsgActivatePlusFreeTrialResponse_ERROR_GENERIC                 CMsgActivatePlusFreeTrialResponse_Result = 1
	CMsgActivatePlusFreeTrialResponse_ERROR_ALREADY_IN_FREE_TRIAL   CMsgActivatePlusFreeTrialResponse_Result = 2
	CMsgActivatePlusFreeTrialResponse_ERROR_ALREADY_USED_FREE_TRIAL CMsgActivatePlusFreeTrialResponse_Result = 3
	CMsgActivatePlusFreeTrialResponse_ERROR_OFFER_NOT_VALID         CMsgActivatePlusFreeTrialResponse_Result = 4
)

// Enum value maps for CMsgActivatePlusFreeTrialResponse_Result.
var (
	CMsgActivatePlusFreeTrialResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_GENERIC",
		2: "ERROR_ALREADY_IN_FREE_TRIAL",
		3: "ERROR_ALREADY_USED_FREE_TRIAL",
		4: "ERROR_OFFER_NOT_VALID",
	}
	CMsgActivatePlusFreeTrialResponse_Result_value = map[string]int32{
		"SUCCESS":                       0,
		"ERROR_GENERIC":                 1,
		"ERROR_ALREADY_IN_FREE_TRIAL":   2,
		"ERROR_ALREADY_USED_FREE_TRIAL": 3,
		"ERROR_OFFER_NOT_VALID":         4,
	}
)

func (x CMsgActivatePlusFreeTrialResponse_Result) Enum() *CMsgActivatePlusFreeTrialResponse_Result {
	p := new(CMsgActivatePlusFreeTrialResponse_Result)
	*p = x
	return p
}

func (x CMsgActivatePlusFreeTrialResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgActivatePlusFreeTrialResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[33].Descriptor()
}

func (CMsgActivatePlusFreeTrialResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[33]
}

func (x CMsgActivatePlusFreeTrialResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgActivatePlusFreeTrialResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgActivatePlusFreeTrialResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgActivatePlusFreeTrialResponse_Result.Descriptor instead.
func (CMsgActivatePlusFreeTrialResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{215, 0}
}

type CMsgClientToGCCavernCrawlClaimRoomResponse_Result int32

const (
	CMsgClientToGCCavernCrawlClaimRoomResponse_SUCCESS                    CMsgClientToGCCavernCrawlClaimRoomResponse_Result = 0
	CMsgClientToGCCavernCrawlClaimRoomResponse_ERROR_UNKNOWN              CMsgClientToGCCavernCrawlClaimRoomResponse_Result = 1
	CMsgClientToGCCavernCrawlClaimRoomResponse_RECEIVED_ULTRA_RARE_REWARD CMsgClientToGCCavernCrawlClaimRoomResponse_Result = 2
)

// Enum value maps for CMsgClientToGCCavernCrawlClaimRoomResponse_Result.
var (
	CMsgClientToGCCavernCrawlClaimRoomResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
		2: "RECEIVED_ULTRA_RARE_REWARD",
	}
	CMsgClientToGCCavernCrawlClaimRoomResponse_Result_value = map[string]int32{
		"SUCCESS":                    0,
		"ERROR_UNKNOWN":              1,
		"RECEIVED_ULTRA_RARE_REWARD": 2,
	}
)

func (x CMsgClientToGCCavernCrawlClaimRoomResponse_Result) Enum() *CMsgClientToGCCavernCrawlClaimRoomResponse_Result {
	p := new(CMsgClientToGCCavernCrawlClaimRoomResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCavernCrawlClaimRoomResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCavernCrawlClaimRoomResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[34].Descriptor()
}

func (CMsgClientToGCCavernCrawlClaimRoomResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[34]
}

func (x CMsgClientToGCCavernCrawlClaimRoomResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCavernCrawlClaimRoomResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCavernCrawlClaimRoomResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCavernCrawlClaimRoomResponse_Result.Descriptor instead.
func (CMsgClientToGCCavernCrawlClaimRoomResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{219, 0}
}

type CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result int32

const (
	CMsgClientToGCCavernCrawlUseItemOnRoomResponse_SUCCESS                    CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = 0
	CMsgClientToGCCavernCrawlUseItemOnRoomResponse_ERROR_UNKNOWN              CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = 1
	CMsgClientToGCCavernCrawlUseItemOnRoomResponse_RECEIVED_ULTRA_RARE_REWARD CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = 2
)

// Enum value maps for CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.
var (
	CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
		2: "RECEIVED_ULTRA_RARE_REWARD",
	}
	CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result_value = map[string]int32{
		"SUCCESS":                    0,
		"ERROR_UNKNOWN":              1,
		"RECEIVED_ULTRA_RARE_REWARD": 2,
	}
)

func (x CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) Enum() *CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result {
	p := new(CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[35].Descriptor()
}

func (CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[35]
}

func (x CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result.Descriptor instead.
func (CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{221, 0}
}

type CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result int32

const (
	CMsgClientToGCCavernCrawlUseItemOnPathResponse_SUCCESS                    CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = 0
	CMsgClientToGCCavernCrawlUseItemOnPathResponse_ERROR_UNKNOWN              CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = 1
	CMsgClientToGCCavernCrawlUseItemOnPathResponse_RECEIVED_ULTRA_RARE_REWARD CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = 2
)

// Enum value maps for CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.
var (
	CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
		2: "RECEIVED_ULTRA_RARE_REWARD",
	}
	CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result_value = map[string]int32{
		"SUCCESS":                    0,
		"ERROR_UNKNOWN":              1,
		"RECEIVED_ULTRA_RARE_REWARD": 2,
	}
)

func (x CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) Enum() *CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result {
	p := new(CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[36].Descriptor()
}

func (CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[36]
}

func (x CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result.Descriptor instead.
func (CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{223, 0}
}

type CMsgClientToGCCavernCrawlRequestMapStateResponse_Result int32

const (
	CMsgClientToGCCavernCrawlRequestMapStateResponse_SUCCESS         CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = 0
	CMsgClientToGCCavernCrawlRequestMapStateResponse_ERROR_UNKNOWN   CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = 1
	CMsgClientToGCCavernCrawlRequestMapStateResponse_EVENT_NOT_OWNED CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = 2
)

// Enum value maps for CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.
var (
	CMsgClientToGCCavernCrawlRequestMapStateResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
		2: "EVENT_NOT_OWNED",
	}
	CMsgClientToGCCavernCrawlRequestMapStateResponse_Result_value = map[string]int32{
		"SUCCESS":         0,
		"ERROR_UNKNOWN":   1,
		"EVENT_NOT_OWNED": 2,
	}
)

func (x CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) Enum() *CMsgClientToGCCavernCrawlRequestMapStateResponse_Result {
	p := new(CMsgClientToGCCavernCrawlRequestMapStateResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[37].Descriptor()
}

func (CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[37]
}

func (x CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCavernCrawlRequestMapStateResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapStateResponse_Result.Descriptor instead.
func (CMsgClientToGCCavernCrawlRequestMapStateResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{225, 0}
}

type CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result int32

const (
	CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_SUCCESS         CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = 0
	CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ERROR_UNKNOWN   CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = 1
	CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_EVENT_NOT_OWNED CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = 2
)

// Enum value maps for CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.
var (
	CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR_UNKNOWN",
		2: "EVENT_NOT_OWNED",
	}
	CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result_value = map[string]int32{
		"SUCCESS":         0,
		"ERROR_UNKNOWN":   1,
		"EVENT_NOT_OWNED": 2,
	}
)

func (x CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) Enum() *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result {
	p := new(CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[38].Descriptor()
}

func (CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[38]
}

func (x CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result.Descriptor instead.
func (CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{227, 0}
}

type CMsgSocialFeedResponse_Result int32

const (
	CMsgSocialFeedResponse_SUCCESS                   CMsgSocialFeedResponse_Result = 0
	CMsgSocialFeedResponse_FAILED_TO_LOAD_FRIENDS    CMsgSocialFeedResponse_Result = 1
	CMsgSocialFeedResponse_FAILED_TO_LOAD_FEED_DATA  CMsgSocialFeedResponse_Result = 2
	CMsgSocialFeedResponse_FAILED_TO_LOAD_FEED_ENTRY CMsgSocialFeedResponse_Result = 3
	CMsgSocialFeedResponse_FAILED_TO_LOAD_COMMENTS   CMsgSocialFeedResponse_Result = 4
	CMsgSocialFeedResponse_FAILED_TOO_MANY_REQUESTS  CMsgSocialFeedResponse_Result = 5
)

// Enum value maps for CMsgSocialFeedResponse_Result.
var (
	CMsgSocialFeedResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED_TO_LOAD_FRIENDS",
		2: "FAILED_TO_LOAD_FEED_DATA",
		3: "FAILED_TO_LOAD_FEED_ENTRY",
		4: "FAILED_TO_LOAD_COMMENTS",
		5: "FAILED_TOO_MANY_REQUESTS",
	}
	CMsgSocialFeedResponse_Result_value = map[string]int32{
		"SUCCESS":                   0,
		"FAILED_TO_LOAD_FRIENDS":    1,
		"FAILED_TO_LOAD_FEED_DATA":  2,
		"FAILED_TO_LOAD_FEED_ENTRY": 3,
		"FAILED_TO_LOAD_COMMENTS":   4,
		"FAILED_TOO_MANY_REQUESTS":  5,
	}
)

func (x CMsgSocialFeedResponse_Result) Enum() *CMsgSocialFeedResponse_Result {
	p := new(CMsgSocialFeedResponse_Result)
	*p = x
	return p
}

func (x CMsgSocialFeedResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSocialFeedResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[39].Descriptor()
}

func (CMsgSocialFeedResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[39]
}

func (x CMsgSocialFeedResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSocialFeedResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSocialFeedResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgSocialFeedResponse_Result.Descriptor instead.
func (CMsgSocialFeedResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{232, 0}
}

type CMsgSocialFeedCommentsResponse_Result int32

const (
	CMsgSocialFeedCommentsResponse_SUCCESS                  CMsgSocialFeedCommentsResponse_Result = 0
	CMsgSocialFeedCommentsResponse_FAILED_TOO_MANY_REQUESTS CMsgSocialFeedCommentsResponse_Result = 1
	CMsgSocialFeedCommentsResponse_FAILED_TO_LOAD_COMMENTS  CMsgSocialFeedCommentsResponse_Result = 2
)

// Enum value maps for CMsgSocialFeedCommentsResponse_Result.
var (
	CMsgSocialFeedCommentsResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED_TOO_MANY_REQUESTS",
		2: "FAILED_TO_LOAD_COMMENTS",
	}
	CMsgSocialFeedCommentsResponse_Result_value = map[string]int32{
		"SUCCESS":                  0,
		"FAILED_TOO_MANY_REQUESTS": 1,
		"FAILED_TO_LOAD_COMMENTS":  2,
	}
)

func (x CMsgSocialFeedCommentsResponse_Result) Enum() *CMsgSocialFeedCommentsResponse_Result {
	p := new(CMsgSocialFeedCommentsResponse_Result)
	*p = x
	return p
}

func (x CMsgSocialFeedCommentsResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSocialFeedCommentsResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[40].Descriptor()
}

func (CMsgSocialFeedCommentsResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[40]
}

func (x CMsgSocialFeedCommentsResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSocialFeedCommentsResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSocialFeedCommentsResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgSocialFeedCommentsResponse_Result.Descriptor instead.
func (CMsgSocialFeedCommentsResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{234, 0}
}

type CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result int32

const (
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_SUCCESS                       CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = 1
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_ERROR_INTERNAL                CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = 2
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_ERROR_INSUFFICIENT_DUST       CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = 3
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_ERROR_ITEM_NOT_DUST_ITEM      CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = 4
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_ERROR_FAILED_CARD_PACK_CREATE CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = 5
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_ERROR_NOT_AVAILABLE           CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = 6
)

// Enum value maps for CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.
var (
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result_name = map[int32]string{
		1: "SUCCESS",
		2: "ERROR_INTERNAL",
		3: "ERROR_INSUFFICIENT_DUST",
		4: "ERROR_ITEM_NOT_DUST_ITEM",
		5: "ERROR_FAILED_CARD_PACK_CREATE",
		6: "ERROR_NOT_AVAILABLE",
	}
	CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result_value = map[string]int32{
		"SUCCESS":                       1,
		"ERROR_INTERNAL":                2,
		"ERROR_INSUFFICIENT_DUST":       3,
		"ERROR_ITEM_NOT_DUST_ITEM":      4,
		"ERROR_FAILED_CARD_PACK_CREATE": 5,
		"ERROR_NOT_AVAILABLE":           6,
	}
)

func (x CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) Enum() *CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result {
	p := new(CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result)
	*p = x
	return p
}

func (x CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[41].Descriptor()
}

func (CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[41]
}

func (x CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result.Descriptor instead.
func (CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{236, 0}
}

type CMsgClientToGCRequestContestVotesResponse_EResponse int32

const (
	CMsgClientToGCRequestContestVotesResponse_k_eInternalError CMsgClientToGCRequestContestVotesResponse_EResponse = 0
	CMsgClientToGCRequestContestVotesResponse_k_eSuccess       CMsgClientToGCRequestContestVotesResponse_EResponse = 1
	CMsgClientToGCRequestContestVotesResponse_k_eTooBusy       CMsgClientToGCRequestContestVotesResponse_EResponse = 2
	CMsgClientToGCRequestContestVotesResponse_k_eDisabled      CMsgClientToGCRequestContestVotesResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCRequestContestVotesResponse_EResponse.
var (
	CMsgClientToGCRequestContestVotesResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
	}
	CMsgClientToGCRequestContestVotesResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
	}
)

func (x CMsgClientToGCRequestContestVotesResponse_EResponse) Enum() *CMsgClientToGCRequestContestVotesResponse_EResponse {
	p := new(CMsgClientToGCRequestContestVotesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRequestContestVotesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRequestContestVotesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[42].Descriptor()
}

func (CMsgClientToGCRequestContestVotesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[42]
}

func (x CMsgClientToGCRequestContestVotesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRequestContestVotesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRequestContestVotesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRequestContestVotesResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRequestContestVotesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{238, 0}
}

type CMsgGCToClientRecordContestVoteResponse_EResult int32

const (
	CMsgGCToClientRecordContestVoteResponse_SUCCESS                   CMsgGCToClientRecordContestVoteResponse_EResult = 0
	CMsgGCToClientRecordContestVoteResponse_FAILED_EVENT_NOT_OWNED    CMsgGCToClientRecordContestVoteResponse_EResult = 1
	CMsgGCToClientRecordContestVoteResponse_FAILED_SQL_INSERT_FAILED  CMsgGCToClientRecordContestVoteResponse_EResult = 2
	CMsgGCToClientRecordContestVoteResponse_FAILED_INVALID_CONTEST    CMsgGCToClientRecordContestVoteResponse_EResult = 3
	CMsgGCToClientRecordContestVoteResponse_FAILED_CONTEST_NOT_ACTIVE CMsgGCToClientRecordContestVoteResponse_EResult = 4
	CMsgGCToClientRecordContestVoteResponse_FAILED_TIMEOUT            CMsgGCToClientRecordContestVoteResponse_EResult = 5
)

// Enum value maps for CMsgGCToClientRecordContestVoteResponse_EResult.
var (
	CMsgGCToClientRecordContestVoteResponse_EResult_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED_EVENT_NOT_OWNED",
		2: "FAILED_SQL_INSERT_FAILED",
		3: "FAILED_INVALID_CONTEST",
		4: "FAILED_CONTEST_NOT_ACTIVE",
		5: "FAILED_TIMEOUT",
	}
	CMsgGCToClientRecordContestVoteResponse_EResult_value = map[string]int32{
		"SUCCESS":                   0,
		"FAILED_EVENT_NOT_OWNED":    1,
		"FAILED_SQL_INSERT_FAILED":  2,
		"FAILED_INVALID_CONTEST":    3,
		"FAILED_CONTEST_NOT_ACTIVE": 4,
		"FAILED_TIMEOUT":            5,
	}
)

func (x CMsgGCToClientRecordContestVoteResponse_EResult) Enum() *CMsgGCToClientRecordContestVoteResponse_EResult {
	p := new(CMsgGCToClientRecordContestVoteResponse_EResult)
	*p = x
	return p
}

func (x CMsgGCToClientRecordContestVoteResponse_EResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientRecordContestVoteResponse_EResult) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[43].Descriptor()
}

func (CMsgGCToClientRecordContestVoteResponse_EResult) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[43]
}

func (x CMsgGCToClientRecordContestVoteResponse_EResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientRecordContestVoteResponse_EResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientRecordContestVoteResponse_EResult(num)
	return nil
}

// Deprecated: Use CMsgGCToClientRecordContestVoteResponse_EResult.Descriptor instead.
func (CMsgGCToClientRecordContestVoteResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{240, 0}
}

type CMsgGCToClientGetFilteredPlayersResponse_Result int32

const (
	CMsgGCToClientGetFilteredPlayersResponse_SUCCESS CMsgGCToClientGetFilteredPlayersResponse_Result = 0
	CMsgGCToClientGetFilteredPlayersResponse_FAILURE CMsgGCToClientGetFilteredPlayersResponse_Result = 1
)

// Enum value maps for CMsgGCToClientGetFilteredPlayersResponse_Result.
var (
	CMsgGCToClientGetFilteredPlayersResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	CMsgGCToClientGetFilteredPlayersResponse_Result_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x CMsgGCToClientGetFilteredPlayersResponse_Result) Enum() *CMsgGCToClientGetFilteredPlayersResponse_Result {
	p := new(CMsgGCToClientGetFilteredPlayersResponse_Result)
	*p = x
	return p
}

func (x CMsgGCToClientGetFilteredPlayersResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientGetFilteredPlayersResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[44].Descriptor()
}

func (CMsgGCToClientGetFilteredPlayersResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[44]
}

func (x CMsgGCToClientGetFilteredPlayersResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientGetFilteredPlayersResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientGetFilteredPlayersResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgGCToClientGetFilteredPlayersResponse_Result.Descriptor instead.
func (CMsgGCToClientGetFilteredPlayersResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{252, 0}
}

type CMsgGCToClientRemoveFilteredPlayerResponse_Result int32

const (
	CMsgGCToClientRemoveFilteredPlayerResponse_SUCCESS CMsgGCToClientRemoveFilteredPlayerResponse_Result = 0
	CMsgGCToClientRemoveFilteredPlayerResponse_FAILURE CMsgGCToClientRemoveFilteredPlayerResponse_Result = 1
)

// Enum value maps for CMsgGCToClientRemoveFilteredPlayerResponse_Result.
var (
	CMsgGCToClientRemoveFilteredPlayerResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	CMsgGCToClientRemoveFilteredPlayerResponse_Result_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x CMsgGCToClientRemoveFilteredPlayerResponse_Result) Enum() *CMsgGCToClientRemoveFilteredPlayerResponse_Result {
	p := new(CMsgGCToClientRemoveFilteredPlayerResponse_Result)
	*p = x
	return p
}

func (x CMsgGCToClientRemoveFilteredPlayerResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientRemoveFilteredPlayerResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[45].Descriptor()
}

func (CMsgGCToClientRemoveFilteredPlayerResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[45]
}

func (x CMsgGCToClientRemoveFilteredPlayerResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientRemoveFilteredPlayerResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientRemoveFilteredPlayerResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgGCToClientRemoveFilteredPlayerResponse_Result.Descriptor instead.
func (CMsgGCToClientRemoveFilteredPlayerResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{254, 0}
}

type CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result int32

const (
	CMsgGCToClientPurchaseFilteredPlayerSlotResponse_SUCCESS                        CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = 0
	CMsgGCToClientPurchaseFilteredPlayerSlotResponse_FAILURE                        CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = 1
	CMsgGCToClientPurchaseFilteredPlayerSlotResponse_CURRENT_SLOTCOUNT_DOESNT_MATCH CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = 2
	CMsgGCToClientPurchaseFilteredPlayerSlotResponse_CANT_AFFORD                    CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = 3
)

// Enum value maps for CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.
var (
	CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "CURRENT_SLOTCOUNT_DOESNT_MATCH",
		3: "CANT_AFFORD",
	}
	CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result_value = map[string]int32{
		"SUCCESS":                        0,
		"FAILURE":                        1,
		"CURRENT_SLOTCOUNT_DOESNT_MATCH": 2,
		"CANT_AFFORD":                    3,
	}
)

func (x CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) Enum() *CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result {
	p := new(CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result)
	*p = x
	return p
}

func (x CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[46].Descriptor()
}

func (CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[46]
}

func (x CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result.Descriptor instead.
func (CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{256, 0}
}

type CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result int32

const (
	CMsgGCToClientUpdateFilteredPlayerNoteResponse_SUCCESS   CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = 0
	CMsgGCToClientUpdateFilteredPlayerNoteResponse_FAILURE   CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = 1
	CMsgGCToClientUpdateFilteredPlayerNoteResponse_NOT_FOUND CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = 2
)

// Enum value maps for CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.
var (
	CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "NOT_FOUND",
	}
	CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result_value = map[string]int32{
		"SUCCESS":   0,
		"FAILURE":   1,
		"NOT_FOUND": 2,
	}
)

func (x CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) Enum() *CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result {
	p := new(CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result)
	*p = x
	return p
}

func (x CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[47].Descriptor()
}

func (CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[47]
}

func (x CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result.Descriptor instead.
func (CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{258, 0}
}

type CMsgClientToGCUpdatePartyBeacon_Action int32

const (
	CMsgClientToGCUpdatePartyBeacon_ON  CMsgClientToGCUpdatePartyBeacon_Action = 0
	CMsgClientToGCUpdatePartyBeacon_OFF CMsgClientToGCUpdatePartyBeacon_Action = 1
)

// Enum value maps for CMsgClientToGCUpdatePartyBeacon_Action.
var (
	CMsgClientToGCUpdatePartyBeacon_Action_name = map[int32]string{
		0: "ON",
		1: "OFF",
	}
	CMsgClientToGCUpdatePartyBeacon_Action_value = map[string]int32{
		"ON":  0,
		"OFF": 1,
	}
)

func (x CMsgClientToGCUpdatePartyBeacon_Action) Enum() *CMsgClientToGCUpdatePartyBeacon_Action {
	p := new(CMsgClientToGCUpdatePartyBeacon_Action)
	*p = x
	return p
}

func (x CMsgClientToGCUpdatePartyBeacon_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCUpdatePartyBeacon_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[48].Descriptor()
}

func (CMsgClientToGCUpdatePartyBeacon_Action) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[48]
}

func (x CMsgClientToGCUpdatePartyBeacon_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCUpdatePartyBeacon_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCUpdatePartyBeacon_Action(num)
	return nil
}

// Deprecated: Use CMsgClientToGCUpdatePartyBeacon_Action.Descriptor instead.
func (CMsgClientToGCUpdatePartyBeacon_Action) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{262, 0}
}

type CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse int32

const (
	CMsgGCToClientRequestActiveBeaconPartiesResponse_SUCCESS CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse = 0
	CMsgGCToClientRequestActiveBeaconPartiesResponse_FAILURE CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse = 1
	CMsgGCToClientRequestActiveBeaconPartiesResponse_BUSY    CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse = 2
)

// Enum value maps for CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.
var (
	CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "BUSY",
	}
	CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
		"BUSY":    2,
	}
)

func (x CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) Enum() *CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse {
	p := new(CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[49].Descriptor()
}

func (CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[49]
}

func (x CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse.Descriptor instead.
func (CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{264, 0}
}

type CMsgGCToClientJoinPartyFromBeaconResponse_EResponse int32

const (
	CMsgGCToClientJoinPartyFromBeaconResponse_SUCCESS    CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = 0
	CMsgGCToClientJoinPartyFromBeaconResponse_FAILURE    CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = 1
	CMsgGCToClientJoinPartyFromBeaconResponse_BUSY       CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = 2
	CMsgGCToClientJoinPartyFromBeaconResponse_NOT_LEADER CMsgGCToClientJoinPartyFromBeaconResponse_EResponse = 3
)

// Enum value maps for CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.
var (
	CMsgGCToClientJoinPartyFromBeaconResponse_EResponse_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "BUSY",
		3: "NOT_LEADER",
	}
	CMsgGCToClientJoinPartyFromBeaconResponse_EResponse_value = map[string]int32{
		"SUCCESS":    0,
		"FAILURE":    1,
		"BUSY":       2,
		"NOT_LEADER": 3,
	}
)

func (x CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) Enum() *CMsgGCToClientJoinPartyFromBeaconResponse_EResponse {
	p := new(CMsgGCToClientJoinPartyFromBeaconResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[50].Descriptor()
}

func (CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[50]
}

func (x CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientJoinPartyFromBeaconResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToClientJoinPartyFromBeaconResponse_EResponse.Descriptor instead.
func (CMsgGCToClientJoinPartyFromBeaconResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{266, 0}
}

type CMsgClientToGCManageFavorites_Action int32

const (
	CMsgClientToGCManageFavorites_ADD    CMsgClientToGCManageFavorites_Action = 0
	CMsgClientToGCManageFavorites_REMOVE CMsgClientToGCManageFavorites_Action = 1
)

// Enum value maps for CMsgClientToGCManageFavorites_Action.
var (
	CMsgClientToGCManageFavorites_Action_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	CMsgClientToGCManageFavorites_Action_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x CMsgClientToGCManageFavorites_Action) Enum() *CMsgClientToGCManageFavorites_Action {
	p := new(CMsgClientToGCManageFavorites_Action)
	*p = x
	return p
}

func (x CMsgClientToGCManageFavorites_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCManageFavorites_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[51].Descriptor()
}

func (CMsgClientToGCManageFavorites_Action) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[51]
}

func (x CMsgClientToGCManageFavorites_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCManageFavorites_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCManageFavorites_Action(num)
	return nil
}

// Deprecated: Use CMsgClientToGCManageFavorites_Action.Descriptor instead.
func (CMsgClientToGCManageFavorites_Action) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{267, 0}
}

type CMsgGCToClientManageFavoritesResponse_EResponse int32

const (
	CMsgGCToClientManageFavoritesResponse_SUCCESS           CMsgGCToClientManageFavoritesResponse_EResponse = 0
	CMsgGCToClientManageFavoritesResponse_FAILURE           CMsgGCToClientManageFavoritesResponse_EResponse = 1
	CMsgGCToClientManageFavoritesResponse_NO_INVITE_PRESENT CMsgGCToClientManageFavoritesResponse_EResponse = 2
	CMsgGCToClientManageFavoritesResponse_INVITE_SENT       CMsgGCToClientManageFavoritesResponse_EResponse = 3
	CMsgGCToClientManageFavoritesResponse_EXPIRED           CMsgGCToClientManageFavoritesResponse_EResponse = 4
	CMsgGCToClientManageFavoritesResponse_BUSY              CMsgGCToClientManageFavoritesResponse_EResponse = 5
)

// Enum value maps for CMsgGCToClientManageFavoritesResponse_EResponse.
var (
	CMsgGCToClientManageFavoritesResponse_EResponse_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "NO_INVITE_PRESENT",
		3: "INVITE_SENT",
		4: "EXPIRED",
		5: "BUSY",
	}
	CMsgGCToClientManageFavoritesResponse_EResponse_value = map[string]int32{
		"SUCCESS":           0,
		"FAILURE":           1,
		"NO_INVITE_PRESENT": 2,
		"INVITE_SENT":       3,
		"EXPIRED":           4,
		"BUSY":              5,
	}
)

func (x CMsgGCToClientManageFavoritesResponse_EResponse) Enum() *CMsgGCToClientManageFavoritesResponse_EResponse {
	p := new(CMsgGCToClientManageFavoritesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToClientManageFavoritesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientManageFavoritesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[52].Descriptor()
}

func (CMsgGCToClientManageFavoritesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[52]
}

func (x CMsgGCToClientManageFavoritesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientManageFavoritesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientManageFavoritesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToClientManageFavoritesResponse_EResponse.Descriptor instead.
func (CMsgGCToClientManageFavoritesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{268, 0}
}

type CMsgGCToClientGetFavoritePlayersResponse_EResponse int32

const (
	CMsgGCToClientGetFavoritePlayersResponse_SUCCESS CMsgGCToClientGetFavoritePlayersResponse_EResponse = 0
	CMsgGCToClientGetFavoritePlayersResponse_FAILURE CMsgGCToClientGetFavoritePlayersResponse_EResponse = 1
)

// Enum value maps for CMsgGCToClientGetFavoritePlayersResponse_EResponse.
var (
	CMsgGCToClientGetFavoritePlayersResponse_EResponse_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	CMsgGCToClientGetFavoritePlayersResponse_EResponse_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x CMsgGCToClientGetFavoritePlayersResponse_EResponse) Enum() *CMsgGCToClientGetFavoritePlayersResponse_EResponse {
	p := new(CMsgGCToClientGetFavoritePlayersResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToClientGetFavoritePlayersResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientGetFavoritePlayersResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[53].Descriptor()
}

func (CMsgGCToClientGetFavoritePlayersResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[53]
}

func (x CMsgGCToClientGetFavoritePlayersResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientGetFavoritePlayersResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientGetFavoritePlayersResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToClientGetFavoritePlayersResponse_EResponse.Descriptor instead.
func (CMsgGCToClientGetFavoritePlayersResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{270, 0}
}

type CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse int32

const (
	CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_k_eInternalError CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = 0
	CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_k_eSuccess       CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = 1
	CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_k_eTooBusy       CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = 2
	CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_k_eDisabled      CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.
var (
	CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
	}
	CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
	}
)

func (x CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) Enum() *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse {
	p := new(CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[54].Descriptor()
}

func (CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[54]
}

func (x CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{275, 0}
}

type CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse int32

const (
	CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_k_eInternalError CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = 0
	CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_k_eSuccess       CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = 1
	CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_k_eTooBusy       CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = 2
	CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_k_eDisabled      CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse = 3
)

// Enum value maps for CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.
var (
	CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
	}
	CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
	}
)

func (x CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) Enum() *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse {
	p := new(CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[55].Descriptor()
}

func (CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[55]
}

func (x CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{277, 0}
}

type CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse int32

const (
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_eInternalError    CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = 0
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_eSuccess          CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = 1
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_eTooBusy          CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = 2
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_eDisabled         CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = 3
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_eAlreadySubmitted CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = 4
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_ePlayerNotValid   CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.
var (
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eAlreadySubmitted",
		5: "k_ePlayerNotValid",
	}
	CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eAlreadySubmitted": 4,
		"k_ePlayerNotValid":   5,
	}
)

func (x CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) Enum() *CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse {
	p := new(CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[56].Descriptor()
}

func (CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[56]
}

func (x CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{279, 0}
}

type CMsgClientToGCRequestReporterUpdatesResponse_EResponse int32

const (
	CMsgClientToGCRequestReporterUpdatesResponse_k_eInternalError CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 0
	CMsgClientToGCRequestReporterUpdatesResponse_k_eSuccess       CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 1
	CMsgClientToGCRequestReporterUpdatesResponse_k_eTimeout       CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 2
	CMsgClientToGCRequestReporterUpdatesResponse_k_eTooBusy       CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 3
	CMsgClientToGCRequestReporterUpdatesResponse_k_eNotPermitted  CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 4
	CMsgClientToGCRequestReporterUpdatesResponse_k_eNotToSoon     CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 5
	CMsgClientToGCRequestReporterUpdatesResponse_k_eNotValid      CMsgClientToGCRequestReporterUpdatesResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCRequestReporterUpdatesResponse_EResponse.
var (
	CMsgClientToGCRequestReporterUpdatesResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eTooBusy",
		4: "k_eNotPermitted",
		5: "k_eNotToSoon",
		6: "k_eNotValid",
	}
	CMsgClientToGCRequestReporterUpdatesResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooBusy":       3,
		"k_eNotPermitted":  4,
		"k_eNotToSoon":     5,
		"k_eNotValid":      6,
	}
)

func (x CMsgClientToGCRequestReporterUpdatesResponse_EResponse) Enum() *CMsgClientToGCRequestReporterUpdatesResponse_EResponse {
	p := new(CMsgClientToGCRequestReporterUpdatesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRequestReporterUpdatesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRequestReporterUpdatesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[57].Descriptor()
}

func (CMsgClientToGCRequestReporterUpdatesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[57]
}

func (x CMsgClientToGCRequestReporterUpdatesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRequestReporterUpdatesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRequestReporterUpdatesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRequestReporterUpdatesResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRequestReporterUpdatesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{298, 0}
}

type CMsgClientToGCRecalibrateMMRResponse_EResponse int32

const (
	CMsgClientToGCRecalibrateMMRResponse_k_eInternalError CMsgClientToGCRecalibrateMMRResponse_EResponse = 0
	CMsgClientToGCRecalibrateMMRResponse_k_eSuccess       CMsgClientToGCRecalibrateMMRResponse_EResponse = 1
	CMsgClientToGCRecalibrateMMRResponse_k_eTimeout       CMsgClientToGCRecalibrateMMRResponse_EResponse = 2
	CMsgClientToGCRecalibrateMMRResponse_k_eTooBusy       CMsgClientToGCRecalibrateMMRResponse_EResponse = 3
	CMsgClientToGCRecalibrateMMRResponse_k_eNotPermitted  CMsgClientToGCRecalibrateMMRResponse_EResponse = 4
	CMsgClientToGCRecalibrateMMRResponse_k_eNotToSoon     CMsgClientToGCRecalibrateMMRResponse_EResponse = 5
	CMsgClientToGCRecalibrateMMRResponse_k_eNotValid      CMsgClientToGCRecalibrateMMRResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCRecalibrateMMRResponse_EResponse.
var (
	CMsgClientToGCRecalibrateMMRResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eTooBusy",
		4: "k_eNotPermitted",
		5: "k_eNotToSoon",
		6: "k_eNotValid",
	}
	CMsgClientToGCRecalibrateMMRResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooBusy":       3,
		"k_eNotPermitted":  4,
		"k_eNotToSoon":     5,
		"k_eNotValid":      6,
	}
)

func (x CMsgClientToGCRecalibrateMMRResponse_EResponse) Enum() *CMsgClientToGCRecalibrateMMRResponse_EResponse {
	p := new(CMsgClientToGCRecalibrateMMRResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRecalibrateMMRResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRecalibrateMMRResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[58].Descriptor()
}

func (CMsgClientToGCRecalibrateMMRResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[58]
}

func (x CMsgClientToGCRecalibrateMMRResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRecalibrateMMRResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRecalibrateMMRResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRecalibrateMMRResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRecalibrateMMRResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{301, 0}
}

type CMsgClientToGCGetOWMatchDetailsResponse_EResponse int32

const (
	CMsgClientToGCGetOWMatchDetailsResponse_k_eInternalError   CMsgClientToGCGetOWMatchDetailsResponse_EResponse = 0
	CMsgClientToGCGetOWMatchDetailsResponse_k_eSuccess         CMsgClientToGCGetOWMatchDetailsResponse_EResponse = 1
	CMsgClientToGCGetOWMatchDetailsResponse_k_eTimeout         CMsgClientToGCGetOWMatchDetailsResponse_EResponse = 2
	CMsgClientToGCGetOWMatchDetailsResponse_k_eTooBusy         CMsgClientToGCGetOWMatchDetailsResponse_EResponse = 3
	CMsgClientToGCGetOWMatchDetailsResponse_k_eNotPermitted    CMsgClientToGCGetOWMatchDetailsResponse_EResponse = 4
	CMsgClientToGCGetOWMatchDetailsResponse_k_eNoCaseAvailable CMsgClientToGCGetOWMatchDetailsResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCGetOWMatchDetailsResponse_EResponse.
var (
	CMsgClientToGCGetOWMatchDetailsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eTooBusy",
		4: "k_eNotPermitted",
		5: "k_eNoCaseAvailable",
	}
	CMsgClientToGCGetOWMatchDetailsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eTimeout":         2,
		"k_eTooBusy":         3,
		"k_eNotPermitted":    4,
		"k_eNoCaseAvailable": 5,
	}
)

func (x CMsgClientToGCGetOWMatchDetailsResponse_EResponse) Enum() *CMsgClientToGCGetOWMatchDetailsResponse_EResponse {
	p := new(CMsgClientToGCGetOWMatchDetailsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetOWMatchDetailsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetOWMatchDetailsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[59].Descriptor()
}

func (CMsgClientToGCGetOWMatchDetailsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[59]
}

func (x CMsgClientToGCGetOWMatchDetailsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetOWMatchDetailsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetOWMatchDetailsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetOWMatchDetailsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetOWMatchDetailsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{304, 0}
}

type CMsgClientToGCSubmitOWConvictionResponse_EResponse int32

const (
	CMsgClientToGCSubmitOWConvictionResponse_k_eInternalError     CMsgClientToGCSubmitOWConvictionResponse_EResponse = 0
	CMsgClientToGCSubmitOWConvictionResponse_k_eSuccess           CMsgClientToGCSubmitOWConvictionResponse_EResponse = 1
	CMsgClientToGCSubmitOWConvictionResponse_k_eTimeout           CMsgClientToGCSubmitOWConvictionResponse_EResponse = 2
	CMsgClientToGCSubmitOWConvictionResponse_k_eTooBusy           CMsgClientToGCSubmitOWConvictionResponse_EResponse = 3
	CMsgClientToGCSubmitOWConvictionResponse_k_eNotPermitted      CMsgClientToGCSubmitOWConvictionResponse_EResponse = 4
	CMsgClientToGCSubmitOWConvictionResponse_k_eInvalidReplayID   CMsgClientToGCSubmitOWConvictionResponse_EResponse = 5
	CMsgClientToGCSubmitOWConvictionResponse_k_eInvalidConviction CMsgClientToGCSubmitOWConvictionResponse_EResponse = 6
	CMsgClientToGCSubmitOWConvictionResponse_k_eInvalidPlayerSlot CMsgClientToGCSubmitOWConvictionResponse_EResponse = 7
)

// Enum value maps for CMsgClientToGCSubmitOWConvictionResponse_EResponse.
var (
	CMsgClientToGCSubmitOWConvictionResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eTooBusy",
		4: "k_eNotPermitted",
		5: "k_eInvalidReplayID",
		6: "k_eInvalidConviction",
		7: "k_eInvalidPlayerSlot",
	}
	CMsgClientToGCSubmitOWConvictionResponse_EResponse_value = map[string]int32{
		"k_eInternalError":     0,
		"k_eSuccess":           1,
		"k_eTimeout":           2,
		"k_eTooBusy":           3,
		"k_eNotPermitted":      4,
		"k_eInvalidReplayID":   5,
		"k_eInvalidConviction": 6,
		"k_eInvalidPlayerSlot": 7,
	}
)

func (x CMsgClientToGCSubmitOWConvictionResponse_EResponse) Enum() *CMsgClientToGCSubmitOWConvictionResponse_EResponse {
	p := new(CMsgClientToGCSubmitOWConvictionResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSubmitOWConvictionResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSubmitOWConvictionResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[60].Descriptor()
}

func (CMsgClientToGCSubmitOWConvictionResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[60]
}

func (x CMsgClientToGCSubmitOWConvictionResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSubmitOWConvictionResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSubmitOWConvictionResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSubmitOWConvictionResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSubmitOWConvictionResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{306, 0}
}

type CMsgClientToGCGetDPCFavoritesResponse_EResponse int32

const (
	CMsgClientToGCGetDPCFavoritesResponse_k_eInternalError  CMsgClientToGCGetDPCFavoritesResponse_EResponse = 0
	CMsgClientToGCGetDPCFavoritesResponse_k_eSuccess        CMsgClientToGCGetDPCFavoritesResponse_EResponse = 1
	CMsgClientToGCGetDPCFavoritesResponse_k_eTooBusy        CMsgClientToGCGetDPCFavoritesResponse_EResponse = 2
	CMsgClientToGCGetDPCFavoritesResponse_k_eDisabled       CMsgClientToGCGetDPCFavoritesResponse_EResponse = 3
	CMsgClientToGCGetDPCFavoritesResponse_k_eTimeout        CMsgClientToGCGetDPCFavoritesResponse_EResponse = 4
	CMsgClientToGCGetDPCFavoritesResponse_k_eInvalidRequest CMsgClientToGCGetDPCFavoritesResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCGetDPCFavoritesResponse_EResponse.
var (
	CMsgClientToGCGetDPCFavoritesResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidRequest",
	}
	CMsgClientToGCGetDPCFavoritesResponse_EResponse_value = map[string]int32{
		"k_eInternalError":  0,
		"k_eSuccess":        1,
		"k_eTooBusy":        2,
		"k_eDisabled":       3,
		"k_eTimeout":        4,
		"k_eInvalidRequest": 5,
	}
)

func (x CMsgClientToGCGetDPCFavoritesResponse_EResponse) Enum() *CMsgClientToGCGetDPCFavoritesResponse_EResponse {
	p := new(CMsgClientToGCGetDPCFavoritesResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetDPCFavoritesResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetDPCFavoritesResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[61].Descriptor()
}

func (CMsgClientToGCGetDPCFavoritesResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[61]
}

func (x CMsgClientToGCGetDPCFavoritesResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetDPCFavoritesResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetDPCFavoritesResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetDPCFavoritesResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetDPCFavoritesResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{316, 0}
}

type CMsgClientToGCSetDPCFavoriteStateResponse_EResponse int32

const (
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eInternalError          CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 0
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eSuccess                CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 1
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eFavoriteTypeOutOfRange CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 2
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eLockFailed             CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 3
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eAlreadyFavorited       CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 4
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eAlreadyUnfavorited     CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 5
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eInsertRecordFailed     CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 6
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eRemoveRecordFailed     CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 7
	CMsgClientToGCSetDPCFavoriteStateResponse_k_eTimeout                CMsgClientToGCSetDPCFavoriteStateResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.
var (
	CMsgClientToGCSetDPCFavoriteStateResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eFavoriteTypeOutOfRange",
		3: "k_eLockFailed",
		4: "k_eAlreadyFavorited",
		5: "k_eAlreadyUnfavorited",
		6: "k_eInsertRecordFailed",
		7: "k_eRemoveRecordFailed",
		8: "k_eTimeout",
	}
	CMsgClientToGCSetDPCFavoriteStateResponse_EResponse_value = map[string]int32{
		"k_eInternalError":          0,
		"k_eSuccess":                1,
		"k_eFavoriteTypeOutOfRange": 2,
		"k_eLockFailed":             3,
		"k_eAlreadyFavorited":       4,
		"k_eAlreadyUnfavorited":     5,
		"k_eInsertRecordFailed":     6,
		"k_eRemoveRecordFailed":     7,
		"k_eTimeout":                8,
	}
)

func (x CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) Enum() *CMsgClientToGCSetDPCFavoriteStateResponse_EResponse {
	p := new(CMsgClientToGCSetDPCFavoriteStateResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[62].Descriptor()
}

func (CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[62]
}

func (x CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetDPCFavoriteStateResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetDPCFavoriteStateResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSetDPCFavoriteStateResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{318, 0}
}

type CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse int32

const (
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eInternalError           CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 0
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eSuccess                 CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 1
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eDisabled                CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 2
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eTooBusy                 CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 3
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eNotAllowed              CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 4
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eTimeout                 CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 5
	CMsgClientToGCSetEventActiveSeasonIDResponse_k_eInternalSuccessNoChange CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.
var (
	CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eDisabled",
		3: "k_eTooBusy",
		4: "k_eNotAllowed",
		5: "k_eTimeout",
		6: "k_eInternalSuccessNoChange",
	}
	CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse_value = map[string]int32{
		"k_eInternalError":           0,
		"k_eSuccess":                 1,
		"k_eDisabled":                2,
		"k_eTooBusy":                 3,
		"k_eNotAllowed":              4,
		"k_eTimeout":                 5,
		"k_eInternalSuccessNoChange": 6,
	}
)

func (x CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) Enum() *CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse {
	p := new(CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[63].Descriptor()
}

func (CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[63]
}

func (x CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{320, 0}
}

type CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse int32

const (
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eInternalError   CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = 0
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eSuccess         CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = 1
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eNoSuchBlessing  CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = 2
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eNotEnoughShards CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = 3
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eNoPath          CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = 4
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eTimeout         CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.
var (
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eNoSuchBlessing",
		3: "k_eNotEnoughShards",
		4: "k_eNoPath",
		5: "k_eTimeout",
	}
	CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eNoSuchBlessing":  2,
		"k_eNotEnoughShards": 3,
		"k_eNoPath":          4,
		"k_eTimeout":         5,
	}
)

func (x CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) Enum() *CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse {
	p := new(CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[64].Descriptor()
}

func (CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[64]
}

func (x CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{322, 0}
}

type CMsgClientToGCGetStickerbookResponse_EResponse int32

const (
	CMsgClientToGCGetStickerbookResponse_k_eInternalError CMsgClientToGCGetStickerbookResponse_EResponse = 0
	CMsgClientToGCGetStickerbookResponse_k_eSuccess       CMsgClientToGCGetStickerbookResponse_EResponse = 1
	CMsgClientToGCGetStickerbookResponse_k_eTimeout       CMsgClientToGCGetStickerbookResponse_EResponse = 2
	CMsgClientToGCGetStickerbookResponse_k_eNotAllowed    CMsgClientToGCGetStickerbookResponse_EResponse = 3
	CMsgClientToGCGetStickerbookResponse_k_eTooBusy       CMsgClientToGCGetStickerbookResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCGetStickerbookResponse_EResponse.
var (
	CMsgClientToGCGetStickerbookResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eNotAllowed",
		4: "k_eTooBusy",
	}
	CMsgClientToGCGetStickerbookResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eNotAllowed":    3,
		"k_eTooBusy":       4,
	}
)

func (x CMsgClientToGCGetStickerbookResponse_EResponse) Enum() *CMsgClientToGCGetStickerbookResponse_EResponse {
	p := new(CMsgClientToGCGetStickerbookResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetStickerbookResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetStickerbookResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[65].Descriptor()
}

func (CMsgClientToGCGetStickerbookResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[65]
}

func (x CMsgClientToGCGetStickerbookResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetStickerbookResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetStickerbookResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetStickerbookResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetStickerbookResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{324, 0}
}

type CMsgClientToGCCreateStickerbookPageResponse_EResponse int32

const (
	CMsgClientToGCCreateStickerbookPageResponse_k_eInternalError CMsgClientToGCCreateStickerbookPageResponse_EResponse = 0
	CMsgClientToGCCreateStickerbookPageResponse_k_eSuccess       CMsgClientToGCCreateStickerbookPageResponse_EResponse = 1
	CMsgClientToGCCreateStickerbookPageResponse_k_eTimeout       CMsgClientToGCCreateStickerbookPageResponse_EResponse = 2
	CMsgClientToGCCreateStickerbookPageResponse_k_eTooManyPages  CMsgClientToGCCreateStickerbookPageResponse_EResponse = 3
	CMsgClientToGCCreateStickerbookPageResponse_k_eTooBusy       CMsgClientToGCCreateStickerbookPageResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCCreateStickerbookPageResponse_EResponse.
var (
	CMsgClientToGCCreateStickerbookPageResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eTooManyPages",
		4: "k_eTooBusy",
	}
	CMsgClientToGCCreateStickerbookPageResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooManyPages":  3,
		"k_eTooBusy":       4,
	}
)

func (x CMsgClientToGCCreateStickerbookPageResponse_EResponse) Enum() *CMsgClientToGCCreateStickerbookPageResponse_EResponse {
	p := new(CMsgClientToGCCreateStickerbookPageResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCCreateStickerbookPageResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCCreateStickerbookPageResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[66].Descriptor()
}

func (CMsgClientToGCCreateStickerbookPageResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[66]
}

func (x CMsgClientToGCCreateStickerbookPageResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCCreateStickerbookPageResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCCreateStickerbookPageResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCCreateStickerbookPageResponse_EResponse.Descriptor instead.
func (CMsgClientToGCCreateStickerbookPageResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{326, 0}
}

type CMsgClientToGCDeleteStickerbookPageResponse_EResponse int32

const (
	CMsgClientToGCDeleteStickerbookPageResponse_k_eInternalError       CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 0
	CMsgClientToGCDeleteStickerbookPageResponse_k_eSuccess             CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 1
	CMsgClientToGCDeleteStickerbookPageResponse_k_eTimeout             CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 2
	CMsgClientToGCDeleteStickerbookPageResponse_k_eInvalidStickerCount CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 3
	CMsgClientToGCDeleteStickerbookPageResponse_k_eTooBusy             CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 4
	CMsgClientToGCDeleteStickerbookPageResponse_k_eInvalidStickerMax   CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 5
	CMsgClientToGCDeleteStickerbookPageResponse_k_eInvalidPage         CMsgClientToGCDeleteStickerbookPageResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCDeleteStickerbookPageResponse_EResponse.
var (
	CMsgClientToGCDeleteStickerbookPageResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eInvalidStickerCount",
		4: "k_eTooBusy",
		5: "k_eInvalidStickerMax",
		6: "k_eInvalidPage",
	}
	CMsgClientToGCDeleteStickerbookPageResponse_EResponse_value = map[string]int32{
		"k_eInternalError":       0,
		"k_eSuccess":             1,
		"k_eTimeout":             2,
		"k_eInvalidStickerCount": 3,
		"k_eTooBusy":             4,
		"k_eInvalidStickerMax":   5,
		"k_eInvalidPage":         6,
	}
)

func (x CMsgClientToGCDeleteStickerbookPageResponse_EResponse) Enum() *CMsgClientToGCDeleteStickerbookPageResponse_EResponse {
	p := new(CMsgClientToGCDeleteStickerbookPageResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCDeleteStickerbookPageResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCDeleteStickerbookPageResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[67].Descriptor()
}

func (CMsgClientToGCDeleteStickerbookPageResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[67]
}

func (x CMsgClientToGCDeleteStickerbookPageResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCDeleteStickerbookPageResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCDeleteStickerbookPageResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCDeleteStickerbookPageResponse_EResponse.Descriptor instead.
func (CMsgClientToGCDeleteStickerbookPageResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{328, 0}
}

type CMsgClientToGCPlaceStickersResponse_EResponse int32

const (
	CMsgClientToGCPlaceStickersResponse_k_eInternalError    CMsgClientToGCPlaceStickersResponse_EResponse = 0
	CMsgClientToGCPlaceStickersResponse_k_eSuccess          CMsgClientToGCPlaceStickersResponse_EResponse = 1
	CMsgClientToGCPlaceStickersResponse_k_eTimeout          CMsgClientToGCPlaceStickersResponse_EResponse = 2
	CMsgClientToGCPlaceStickersResponse_k_eMissingItem      CMsgClientToGCPlaceStickersResponse_EResponse = 3
	CMsgClientToGCPlaceStickersResponse_k_eTooBusy          CMsgClientToGCPlaceStickersResponse_EResponse = 4
	CMsgClientToGCPlaceStickersResponse_k_eDuplicateItem    CMsgClientToGCPlaceStickersResponse_EResponse = 5
	CMsgClientToGCPlaceStickersResponse_k_eInvalidPage      CMsgClientToGCPlaceStickersResponse_EResponse = 6
	CMsgClientToGCPlaceStickersResponse_k_ePageTypeMismatch CMsgClientToGCPlaceStickersResponse_EResponse = 7
	CMsgClientToGCPlaceStickersResponse_k_eTooManyStickers  CMsgClientToGCPlaceStickersResponse_EResponse = 8
)

// Enum value maps for CMsgClientToGCPlaceStickersResponse_EResponse.
var (
	CMsgClientToGCPlaceStickersResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eMissingItem",
		4: "k_eTooBusy",
		5: "k_eDuplicateItem",
		6: "k_eInvalidPage",
		7: "k_ePageTypeMismatch",
		8: "k_eTooManyStickers",
	}
	CMsgClientToGCPlaceStickersResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTimeout":          2,
		"k_eMissingItem":      3,
		"k_eTooBusy":          4,
		"k_eDuplicateItem":    5,
		"k_eInvalidPage":      6,
		"k_ePageTypeMismatch": 7,
		"k_eTooManyStickers":  8,
	}
)

func (x CMsgClientToGCPlaceStickersResponse_EResponse) Enum() *CMsgClientToGCPlaceStickersResponse_EResponse {
	p := new(CMsgClientToGCPlaceStickersResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPlaceStickersResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPlaceStickersResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[68].Descriptor()
}

func (CMsgClientToGCPlaceStickersResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[68]
}

func (x CMsgClientToGCPlaceStickersResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPlaceStickersResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPlaceStickersResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPlaceStickersResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPlaceStickersResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{330, 0}
}

type CMsgClientToGCPlaceCollectionStickersResponse_EResponse int32

const (
	CMsgClientToGCPlaceCollectionStickersResponse_k_eInternalError    CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 0
	CMsgClientToGCPlaceCollectionStickersResponse_k_eSuccess          CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 1
	CMsgClientToGCPlaceCollectionStickersResponse_k_eTimeout          CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 2
	CMsgClientToGCPlaceCollectionStickersResponse_k_eMissingItem      CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 3
	CMsgClientToGCPlaceCollectionStickersResponse_k_eTooBusy          CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 4
	CMsgClientToGCPlaceCollectionStickersResponse_k_eDuplicateItem    CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 5
	CMsgClientToGCPlaceCollectionStickersResponse_k_eInvalidPage      CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 6
	CMsgClientToGCPlaceCollectionStickersResponse_k_ePageTypeMismatch CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 7
	CMsgClientToGCPlaceCollectionStickersResponse_k_eOldItemMismatch  CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 8
	CMsgClientToGCPlaceCollectionStickersResponse_k_eInvalidSlot      CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 9
	CMsgClientToGCPlaceCollectionStickersResponse_k_eSlotTypeMismatch CMsgClientToGCPlaceCollectionStickersResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCPlaceCollectionStickersResponse_EResponse.
var (
	CMsgClientToGCPlaceCollectionStickersResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTimeout",
		3:  "k_eMissingItem",
		4:  "k_eTooBusy",
		5:  "k_eDuplicateItem",
		6:  "k_eInvalidPage",
		7:  "k_ePageTypeMismatch",
		8:  "k_eOldItemMismatch",
		9:  "k_eInvalidSlot",
		10: "k_eSlotTypeMismatch",
	}
	CMsgClientToGCPlaceCollectionStickersResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTimeout":          2,
		"k_eMissingItem":      3,
		"k_eTooBusy":          4,
		"k_eDuplicateItem":    5,
		"k_eInvalidPage":      6,
		"k_ePageTypeMismatch": 7,
		"k_eOldItemMismatch":  8,
		"k_eInvalidSlot":      9,
		"k_eSlotTypeMismatch": 10,
	}
)

func (x CMsgClientToGCPlaceCollectionStickersResponse_EResponse) Enum() *CMsgClientToGCPlaceCollectionStickersResponse_EResponse {
	p := new(CMsgClientToGCPlaceCollectionStickersResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCPlaceCollectionStickersResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCPlaceCollectionStickersResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[69].Descriptor()
}

func (CMsgClientToGCPlaceCollectionStickersResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[69]
}

func (x CMsgClientToGCPlaceCollectionStickersResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCPlaceCollectionStickersResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCPlaceCollectionStickersResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCPlaceCollectionStickersResponse_EResponse.Descriptor instead.
func (CMsgClientToGCPlaceCollectionStickersResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{332, 0}
}

type CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse int32

const (
	CMsgClientToGCOrderStickerbookTeamPageResponse_k_eInternalError CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = 0
	CMsgClientToGCOrderStickerbookTeamPageResponse_k_eSuccess       CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = 1
	CMsgClientToGCOrderStickerbookTeamPageResponse_k_eTimeout       CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = 2
	CMsgClientToGCOrderStickerbookTeamPageResponse_k_eTooManyPages  CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = 3
	CMsgClientToGCOrderStickerbookTeamPageResponse_k_eTooBusy       CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = 4
	CMsgClientToGCOrderStickerbookTeamPageResponse_k_eInvalidPage   CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.
var (
	CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eTooManyPages",
		4: "k_eTooBusy",
		5: "k_eInvalidPage",
	}
	CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooManyPages":  3,
		"k_eTooBusy":       4,
		"k_eInvalidPage":   5,
	}
)

func (x CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) Enum() *CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse {
	p := new(CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[70].Descriptor()
}

func (CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[70]
}

func (x CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse.Descriptor instead.
func (CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{334, 0}
}

type CMsgClientToGCSetHeroStickerResponse_EResponse int32

const (
	CMsgClientToGCSetHeroStickerResponse_k_eInternalError   CMsgClientToGCSetHeroStickerResponse_EResponse = 0
	CMsgClientToGCSetHeroStickerResponse_k_eSuccess         CMsgClientToGCSetHeroStickerResponse_EResponse = 1
	CMsgClientToGCSetHeroStickerResponse_k_eTimeout         CMsgClientToGCSetHeroStickerResponse_EResponse = 2
	CMsgClientToGCSetHeroStickerResponse_k_eMissingItem     CMsgClientToGCSetHeroStickerResponse_EResponse = 3
	CMsgClientToGCSetHeroStickerResponse_k_eTooBusy         CMsgClientToGCSetHeroStickerResponse_EResponse = 4
	CMsgClientToGCSetHeroStickerResponse_k_eOldItemMismatch CMsgClientToGCSetHeroStickerResponse_EResponse = 5
	CMsgClientToGCSetHeroStickerResponse_k_eInvalidHero     CMsgClientToGCSetHeroStickerResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCSetHeroStickerResponse_EResponse.
var (
	CMsgClientToGCSetHeroStickerResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		3: "k_eMissingItem",
		4: "k_eTooBusy",
		5: "k_eOldItemMismatch",
		6: "k_eInvalidHero",
	}
	CMsgClientToGCSetHeroStickerResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eTimeout":         2,
		"k_eMissingItem":     3,
		"k_eTooBusy":         4,
		"k_eOldItemMismatch": 5,
		"k_eInvalidHero":     6,
	}
)

func (x CMsgClientToGCSetHeroStickerResponse_EResponse) Enum() *CMsgClientToGCSetHeroStickerResponse_EResponse {
	p := new(CMsgClientToGCSetHeroStickerResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSetHeroStickerResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetHeroStickerResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[71].Descriptor()
}

func (CMsgClientToGCSetHeroStickerResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[71]
}

func (x CMsgClientToGCSetHeroStickerResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetHeroStickerResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetHeroStickerResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetHeroStickerResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSetHeroStickerResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{336, 0}
}

type CMsgClientToGCGetHeroStickersResponse_EResponse int32

const (
	CMsgClientToGCGetHeroStickersResponse_k_eInternalError CMsgClientToGCGetHeroStickersResponse_EResponse = 0
	CMsgClientToGCGetHeroStickersResponse_k_eSuccess       CMsgClientToGCGetHeroStickersResponse_EResponse = 1
	CMsgClientToGCGetHeroStickersResponse_k_eTimeout       CMsgClientToGCGetHeroStickersResponse_EResponse = 2
	CMsgClientToGCGetHeroStickersResponse_k_eTooBusy       CMsgClientToGCGetHeroStickersResponse_EResponse = 4
)

// Enum value maps for CMsgClientToGCGetHeroStickersResponse_EResponse.
var (
	CMsgClientToGCGetHeroStickersResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		4: "k_eTooBusy",
	}
	CMsgClientToGCGetHeroStickersResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooBusy":       4,
	}
)

func (x CMsgClientToGCGetHeroStickersResponse_EResponse) Enum() *CMsgClientToGCGetHeroStickersResponse_EResponse {
	p := new(CMsgClientToGCGetHeroStickersResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCGetHeroStickersResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCGetHeroStickersResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[72].Descriptor()
}

func (CMsgClientToGCGetHeroStickersResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[72]
}

func (x CMsgClientToGCGetHeroStickersResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCGetHeroStickersResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCGetHeroStickersResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCGetHeroStickersResponse_EResponse.Descriptor instead.
func (CMsgClientToGCGetHeroStickersResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{338, 0}
}

type CMsgClientToGCSetFavoritePageResponse_EResponse int32

const (
	CMsgClientToGCSetFavoritePageResponse_k_eInternalError CMsgClientToGCSetFavoritePageResponse_EResponse = 0
	CMsgClientToGCSetFavoritePageResponse_k_eSuccess       CMsgClientToGCSetFavoritePageResponse_EResponse = 1
	CMsgClientToGCSetFavoritePageResponse_k_eTimeout       CMsgClientToGCSetFavoritePageResponse_EResponse = 2
	CMsgClientToGCSetFavoritePageResponse_k_eTooBusy       CMsgClientToGCSetFavoritePageResponse_EResponse = 4
	CMsgClientToGCSetFavoritePageResponse_k_eInvalidPage   CMsgClientToGCSetFavoritePageResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCSetFavoritePageResponse_EResponse.
var (
	CMsgClientToGCSetFavoritePageResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		4: "k_eTooBusy",
		5: "k_eInvalidPage",
	}
	CMsgClientToGCSetFavoritePageResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooBusy":       4,
		"k_eInvalidPage":   5,
	}
)

func (x CMsgClientToGCSetFavoritePageResponse_EResponse) Enum() *CMsgClientToGCSetFavoritePageResponse_EResponse {
	p := new(CMsgClientToGCSetFavoritePageResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCSetFavoritePageResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCSetFavoritePageResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[73].Descriptor()
}

func (CMsgClientToGCSetFavoritePageResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[73]
}

func (x CMsgClientToGCSetFavoritePageResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCSetFavoritePageResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCSetFavoritePageResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCSetFavoritePageResponse_EResponse.Descriptor instead.
func (CMsgClientToGCSetFavoritePageResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{340, 0}
}

type CMsgClientToGCClaimSwagResponse_EResponse int32

const (
	CMsgClientToGCClaimSwagResponse_k_eInternalError   CMsgClientToGCClaimSwagResponse_EResponse = 0
	CMsgClientToGCClaimSwagResponse_k_eSuccess         CMsgClientToGCClaimSwagResponse_EResponse = 1
	CMsgClientToGCClaimSwagResponse_k_eTimeout         CMsgClientToGCClaimSwagResponse_EResponse = 2
	CMsgClientToGCClaimSwagResponse_k_eTooBusy         CMsgClientToGCClaimSwagResponse_EResponse = 4
	CMsgClientToGCClaimSwagResponse_k_eAlreadyClaimed  CMsgClientToGCClaimSwagResponse_EResponse = 5
	CMsgClientToGCClaimSwagResponse_k_eDisabled        CMsgClientToGCClaimSwagResponse_EResponse = 6
	CMsgClientToGCClaimSwagResponse_k_eInvalidRequest  CMsgClientToGCClaimSwagResponse_EResponse = 7
	CMsgClientToGCClaimSwagResponse_k_eUserNotEligible CMsgClientToGCClaimSwagResponse_EResponse = 8
	CMsgClientToGCClaimSwagResponse_k_eStorageError    CMsgClientToGCClaimSwagResponse_EResponse = 9
	CMsgClientToGCClaimSwagResponse_k_eRewardDisabled  CMsgClientToGCClaimSwagResponse_EResponse = 10
)

// Enum value maps for CMsgClientToGCClaimSwagResponse_EResponse.
var (
	CMsgClientToGCClaimSwagResponse_EResponse_name = map[int32]string{
		0:  "k_eInternalError",
		1:  "k_eSuccess",
		2:  "k_eTimeout",
		4:  "k_eTooBusy",
		5:  "k_eAlreadyClaimed",
		6:  "k_eDisabled",
		7:  "k_eInvalidRequest",
		8:  "k_eUserNotEligible",
		9:  "k_eStorageError",
		10: "k_eRewardDisabled",
	}
	CMsgClientToGCClaimSwagResponse_EResponse_value = map[string]int32{
		"k_eInternalError":   0,
		"k_eSuccess":         1,
		"k_eTimeout":         2,
		"k_eTooBusy":         4,
		"k_eAlreadyClaimed":  5,
		"k_eDisabled":        6,
		"k_eInvalidRequest":  7,
		"k_eUserNotEligible": 8,
		"k_eStorageError":    9,
		"k_eRewardDisabled":  10,
	}
)

func (x CMsgClientToGCClaimSwagResponse_EResponse) Enum() *CMsgClientToGCClaimSwagResponse_EResponse {
	p := new(CMsgClientToGCClaimSwagResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCClaimSwagResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCClaimSwagResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[74].Descriptor()
}

func (CMsgClientToGCClaimSwagResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[74]
}

func (x CMsgClientToGCClaimSwagResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCClaimSwagResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCClaimSwagResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCClaimSwagResponse_EResponse.Descriptor instead.
func (CMsgClientToGCClaimSwagResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{342, 0}
}

type CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType int32

const (
	CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_k_eUp   CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType = 0
	CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_k_eDown CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType = 1
)

// Enum value maps for CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType.
var (
	CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType_name = map[int32]string{
		0: "k_eUp",
		1: "k_eDown",
	}
	CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType_value = map[string]int32{
		"k_eUp":   0,
		"k_eDown": 1,
	}
)

func (x CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) Enum() *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType {
	p := new(CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType)
	*p = x
	return p
}

func (x CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[75].Descriptor()
}

func (CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[75]
}

func (x CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType(num)
	return nil
}

// Deprecated: Use CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType.Descriptor instead.
func (CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{344, 0, 0}
}

type CMsgGCToClientUploadMatchClipResponse_EResponse int32

const (
	CMsgGCToClientUploadMatchClipResponse_k_eInternalError CMsgGCToClientUploadMatchClipResponse_EResponse = 0
	CMsgGCToClientUploadMatchClipResponse_k_eSuccess       CMsgGCToClientUploadMatchClipResponse_EResponse = 1
	CMsgGCToClientUploadMatchClipResponse_k_eTimeout       CMsgGCToClientUploadMatchClipResponse_EResponse = 2
	CMsgGCToClientUploadMatchClipResponse_k_eTooBusy       CMsgGCToClientUploadMatchClipResponse_EResponse = 4
)

// Enum value maps for CMsgGCToClientUploadMatchClipResponse_EResponse.
var (
	CMsgGCToClientUploadMatchClipResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTimeout",
		4: "k_eTooBusy",
	}
	CMsgGCToClientUploadMatchClipResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTimeout":       2,
		"k_eTooBusy":       4,
	}
)

func (x CMsgGCToClientUploadMatchClipResponse_EResponse) Enum() *CMsgGCToClientUploadMatchClipResponse_EResponse {
	p := new(CMsgGCToClientUploadMatchClipResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToClientUploadMatchClipResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientUploadMatchClipResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[76].Descriptor()
}

func (CMsgGCToClientUploadMatchClipResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[76]
}

func (x CMsgGCToClientUploadMatchClipResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientUploadMatchClipResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientUploadMatchClipResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToClientUploadMatchClipResponse_EResponse.Descriptor instead.
func (CMsgGCToClientUploadMatchClipResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{346, 0}
}

type CMsgGCToClientMapStatsResponse_EResponse int32

const (
	CMsgGCToClientMapStatsResponse_k_eInternalError CMsgGCToClientMapStatsResponse_EResponse = 0
	CMsgGCToClientMapStatsResponse_k_eSuccess       CMsgGCToClientMapStatsResponse_EResponse = 1
)

// Enum value maps for CMsgGCToClientMapStatsResponse_EResponse.
var (
	CMsgGCToClientMapStatsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
	}
	CMsgGCToClientMapStatsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
	}
)

func (x CMsgGCToClientMapStatsResponse_EResponse) Enum() *CMsgGCToClientMapStatsResponse_EResponse {
	p := new(CMsgGCToClientMapStatsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgGCToClientMapStatsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientMapStatsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[77].Descriptor()
}

func (CMsgGCToClientMapStatsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[77]
}

func (x CMsgGCToClientMapStatsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientMapStatsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientMapStatsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgGCToClientMapStatsResponse_EResponse.Descriptor instead.
func (CMsgGCToClientMapStatsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{348, 0}
}

type CMsgClientToGCRoadToTIGetQuestsResponse_EResponse int32

const (
	CMsgClientToGCRoadToTIGetQuestsResponse_k_eInternalError CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = 0
	CMsgClientToGCRoadToTIGetQuestsResponse_k_eSuccess       CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = 1
	CMsgClientToGCRoadToTIGetQuestsResponse_k_eTooBusy       CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = 2
	CMsgClientToGCRoadToTIGetQuestsResponse_k_eDisabled      CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = 3
	CMsgClientToGCRoadToTIGetQuestsResponse_k_eTimeout       CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = 4
	CMsgClientToGCRoadToTIGetQuestsResponse_k_eInvalidID     CMsgClientToGCRoadToTIGetQuestsResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.
var (
	CMsgClientToGCRoadToTIGetQuestsResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidID",
	}
	CMsgClientToGCRoadToTIGetQuestsResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eTooBusy":       2,
		"k_eDisabled":      3,
		"k_eTimeout":       4,
		"k_eInvalidID":     5,
	}
)

func (x CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) Enum() *CMsgClientToGCRoadToTIGetQuestsResponse_EResponse {
	p := new(CMsgClientToGCRoadToTIGetQuestsResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[78].Descriptor()
}

func (CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[78]
}

func (x CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRoadToTIGetQuestsResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRoadToTIGetQuestsResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRoadToTIGetQuestsResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{352, 0}
}

type CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse int32

const (
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eInternalError CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 0
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eSuccess       CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 1
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eNone          CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 2
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eTooBusy       CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 3
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eDisabled      CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 4
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eTimeout       CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 5
	CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eInvalidID     CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.
var (
	CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eNone",
		3: "k_eTooBusy",
		4: "k_eDisabled",
		5: "k_eTimeout",
		6: "k_eInvalidID",
	}
	CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eNone":          2,
		"k_eTooBusy":       3,
		"k_eDisabled":      4,
		"k_eTimeout":       5,
		"k_eInvalidID":     6,
	}
)

func (x CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) Enum() *CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse {
	p := new(CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[79].Descriptor()
}

func (CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[79]
}

func (x CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{354, 0}
}

type CMsgClientToGCRoadToTIUseItemResponse_EResponse int32

const (
	CMsgClientToGCRoadToTIUseItemResponse_k_eInternalError CMsgClientToGCRoadToTIUseItemResponse_EResponse = 0
	CMsgClientToGCRoadToTIUseItemResponse_k_eSuccess       CMsgClientToGCRoadToTIUseItemResponse_EResponse = 1
	CMsgClientToGCRoadToTIUseItemResponse_k_eBadInput      CMsgClientToGCRoadToTIUseItemResponse_EResponse = 2
	CMsgClientToGCRoadToTIUseItemResponse_k_eNoItem        CMsgClientToGCRoadToTIUseItemResponse_EResponse = 3
	CMsgClientToGCRoadToTIUseItemResponse_k_eDisabled      CMsgClientToGCRoadToTIUseItemResponse_EResponse = 4
	CMsgClientToGCRoadToTIUseItemResponse_k_eTimeout       CMsgClientToGCRoadToTIUseItemResponse_EResponse = 5
	CMsgClientToGCRoadToTIUseItemResponse_k_eInvalidID     CMsgClientToGCRoadToTIUseItemResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCRoadToTIUseItemResponse_EResponse.
var (
	CMsgClientToGCRoadToTIUseItemResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eBadInput",
		3: "k_eNoItem",
		4: "k_eDisabled",
		5: "k_eTimeout",
		6: "k_eInvalidID",
	}
	CMsgClientToGCRoadToTIUseItemResponse_EResponse_value = map[string]int32{
		"k_eInternalError": 0,
		"k_eSuccess":       1,
		"k_eBadInput":      2,
		"k_eNoItem":        3,
		"k_eDisabled":      4,
		"k_eTimeout":       5,
		"k_eInvalidID":     6,
	}
)

func (x CMsgClientToGCRoadToTIUseItemResponse_EResponse) Enum() *CMsgClientToGCRoadToTIUseItemResponse_EResponse {
	p := new(CMsgClientToGCRoadToTIUseItemResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCRoadToTIUseItemResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCRoadToTIUseItemResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_proto_enumTypes[80].Descriptor()
}

func (CMsgClientToGCRoadToTIUseItemResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_proto_enumTypes[80]
}

func (x CMsgClientToGCRoadToTIUseItemResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCRoadToTIUseItemResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCRoadToTIUseItemResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCRoadToTIUseItemResponse_EResponse.Descriptor instead.
func (CMsgClientToGCRoadToTIUseItemResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{357, 0}
}

type CMsgClientSuspended struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeEnd       *uint32                `protobuf:"varint,1,opt,name=time_end,json=timeEnd" json:"time_end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientSuspended) Reset() {
	*x = CMsgClientSuspended{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSuspended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSuspended) ProtoMessage() {}

func (x *CMsgClientSuspended) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSuspended.ProtoReflect.Descriptor instead.
func (*CMsgClientSuspended) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientSuspended) GetTimeEnd() uint32 {
	if x != nil && x.TimeEnd != nil {
		return *x.TimeEnd
	}
	return 0
}

type CMsgBalancedShuffleLobby struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgBalancedShuffleLobby) Reset() {
	*x = CMsgBalancedShuffleLobby{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgBalancedShuffleLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBalancedShuffleLobby) ProtoMessage() {}

func (x *CMsgBalancedShuffleLobby) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBalancedShuffleLobby.ProtoReflect.Descriptor instead.
func (*CMsgBalancedShuffleLobby) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{1}
}

type CMsgInitialQuestionnaireResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InitialSkill  *uint32                `protobuf:"varint,1,opt,name=initial_skill,json=initialSkill" json:"initial_skill,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgInitialQuestionnaireResponse) Reset() {
	*x = CMsgInitialQuestionnaireResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgInitialQuestionnaireResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgInitialQuestionnaireResponse) ProtoMessage() {}

func (x *CMsgInitialQuestionnaireResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgInitialQuestionnaireResponse.ProtoReflect.Descriptor instead.
func (*CMsgInitialQuestionnaireResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgInitialQuestionnaireResponse) GetInitialSkill() uint32 {
	if x != nil && x.InitialSkill != nil {
		return *x.InitialSkill
	}
	return 0
}

type CMsgDOTARequestMatchesResponse struct {
	state            protoimpl.MessageState                   `protogen:"open.v1"`
	Matches          []*CMsgDOTAMatch                         `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	Series           []*CMsgDOTARequestMatchesResponse_Series `protobuf:"bytes,2,rep,name=series" json:"series,omitempty"`
	RequestId        *uint32                                  `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	TotalResults     *uint32                                  `protobuf:"varint,4,opt,name=total_results,json=totalResults" json:"total_results,omitempty"`
	ResultsRemaining *uint32                                  `protobuf:"varint,5,opt,name=results_remaining,json=resultsRemaining" json:"results_remaining,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgDOTARequestMatchesResponse) Reset() {
	*x = CMsgDOTARequestMatchesResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARequestMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestMatchesResponse) ProtoMessage() {}

func (x *CMsgDOTARequestMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestMatchesResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestMatchesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgDOTARequestMatchesResponse) GetMatches() []*CMsgDOTAMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgDOTARequestMatchesResponse) GetSeries() []*CMsgDOTARequestMatchesResponse_Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *CMsgDOTARequestMatchesResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgDOTARequestMatchesResponse) GetTotalResults() uint32 {
	if x != nil && x.TotalResults != nil {
		return *x.TotalResults
	}
	return 0
}

func (x *CMsgDOTARequestMatchesResponse) GetResultsRemaining() uint32 {
	if x != nil && x.ResultsRemaining != nil {
		return *x.ResultsRemaining
	}
	return 0
}

type CMsgDOTAPopup struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             *CMsgDOTAPopup_PopupID `protobuf:"varint,1,opt,name=id,enum=protocol.CMsgDOTAPopup_PopupID,def=-1" json:"id,omitempty"`
	CustomText     *string                `protobuf:"bytes,2,opt,name=custom_text,json=customText" json:"custom_text,omitempty"`
	IntData        *int32                 `protobuf:"zigzag32,3,opt,name=int_data,json=intData" json:"int_data,omitempty"`
	PopupData      []byte                 `protobuf:"bytes,4,opt,name=popup_data,json=popupData" json:"popup_data,omitempty"`
	LocTokenHeader *string                `protobuf:"bytes,5,opt,name=loc_token_header,json=locTokenHeader" json:"loc_token_header,omitempty"`
	LocTokenMsg    *string                `protobuf:"bytes,6,opt,name=loc_token_msg,json=locTokenMsg" json:"loc_token_msg,omitempty"`
	VarNames       []string               `protobuf:"bytes,7,rep,name=var_names,json=varNames" json:"var_names,omitempty"`
	VarValues      []string               `protobuf:"bytes,8,rep,name=var_values,json=varValues" json:"var_values,omitempty"`
	DebugText      *string                `protobuf:"bytes,9,opt,name=debug_text,json=debugText" json:"debug_text,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgDOTAPopup fields.
const (
	Default_CMsgDOTAPopup_Id = CMsgDOTAPopup_NONE
)

func (x *CMsgDOTAPopup) Reset() {
	*x = CMsgDOTAPopup{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPopup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPopup) ProtoMessage() {}

func (x *CMsgDOTAPopup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPopup.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPopup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgDOTAPopup) GetId() CMsgDOTAPopup_PopupID {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgDOTAPopup_Id
}

func (x *CMsgDOTAPopup) GetCustomText() string {
	if x != nil && x.CustomText != nil {
		return *x.CustomText
	}
	return ""
}

func (x *CMsgDOTAPopup) GetIntData() int32 {
	if x != nil && x.IntData != nil {
		return *x.IntData
	}
	return 0
}

func (x *CMsgDOTAPopup) GetPopupData() []byte {
	if x != nil {
		return x.PopupData
	}
	return nil
}

func (x *CMsgDOTAPopup) GetLocTokenHeader() string {
	if x != nil && x.LocTokenHeader != nil {
		return *x.LocTokenHeader
	}
	return ""
}

func (x *CMsgDOTAPopup) GetLocTokenMsg() string {
	if x != nil && x.LocTokenMsg != nil {
		return *x.LocTokenMsg
	}
	return ""
}

func (x *CMsgDOTAPopup) GetVarNames() []string {
	if x != nil {
		return x.VarNames
	}
	return nil
}

func (x *CMsgDOTAPopup) GetVarValues() []string {
	if x != nil {
		return x.VarValues
	}
	return nil
}

func (x *CMsgDOTAPopup) GetDebugText() string {
	if x != nil && x.DebugText != nil {
		return *x.DebugText
	}
	return ""
}

type CMsgDOTAReportsRemainingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAReportsRemainingRequest) Reset() {
	*x = CMsgDOTAReportsRemainingRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAReportsRemainingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAReportsRemainingRequest) ProtoMessage() {}

func (x *CMsgDOTAReportsRemainingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAReportsRemainingRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAReportsRemainingRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{5}
}

type CMsgDOTAReportsRemainingResponse struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	NumPositiveReportsRemaining *uint32                `protobuf:"varint,1,opt,name=num_positive_reports_remaining,json=numPositiveReportsRemaining" json:"num_positive_reports_remaining,omitempty"`
	NumNegativeReportsRemaining *uint32                `protobuf:"varint,2,opt,name=num_negative_reports_remaining,json=numNegativeReportsRemaining" json:"num_negative_reports_remaining,omitempty"`
	NumPositiveReportsTotal     *uint32                `protobuf:"varint,3,opt,name=num_positive_reports_total,json=numPositiveReportsTotal" json:"num_positive_reports_total,omitempty"`
	NumNegativeReportsTotal     *uint32                `protobuf:"varint,4,opt,name=num_negative_reports_total,json=numNegativeReportsTotal" json:"num_negative_reports_total,omitempty"`
	NumCommsReportsRemaining    *uint32                `protobuf:"varint,5,opt,name=num_comms_reports_remaining,json=numCommsReportsRemaining" json:"num_comms_reports_remaining,omitempty"`
	NumCommsReportsTotal        *uint32                `protobuf:"varint,6,opt,name=num_comms_reports_total,json=numCommsReportsTotal" json:"num_comms_reports_total,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CMsgDOTAReportsRemainingResponse) Reset() {
	*x = CMsgDOTAReportsRemainingResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAReportsRemainingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAReportsRemainingResponse) ProtoMessage() {}

func (x *CMsgDOTAReportsRemainingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAReportsRemainingResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAReportsRemainingResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTAReportsRemainingResponse) GetNumPositiveReportsRemaining() uint32 {
	if x != nil && x.NumPositiveReportsRemaining != nil {
		return *x.NumPositiveReportsRemaining
	}
	return 0
}

func (x *CMsgDOTAReportsRemainingResponse) GetNumNegativeReportsRemaining() uint32 {
	if x != nil && x.NumNegativeReportsRemaining != nil {
		return *x.NumNegativeReportsRemaining
	}
	return 0
}

func (x *CMsgDOTAReportsRemainingResponse) GetNumPositiveReportsTotal() uint32 {
	if x != nil && x.NumPositiveReportsTotal != nil {
		return *x.NumPositiveReportsTotal
	}
	return 0
}

func (x *CMsgDOTAReportsRemainingResponse) GetNumNegativeReportsTotal() uint32 {
	if x != nil && x.NumNegativeReportsTotal != nil {
		return *x.NumNegativeReportsTotal
	}
	return 0
}

func (x *CMsgDOTAReportsRemainingResponse) GetNumCommsReportsRemaining() uint32 {
	if x != nil && x.NumCommsReportsRemaining != nil {
		return *x.NumCommsReportsRemaining
	}
	return 0
}

func (x *CMsgDOTAReportsRemainingResponse) GetNumCommsReportsTotal() uint32 {
	if x != nil && x.NumCommsReportsTotal != nil {
		return *x.NumCommsReportsTotal
	}
	return 0
}

type CMsgDOTASubmitPlayerReport struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReportFlags     *uint32                `protobuf:"varint,2,opt,name=report_flags,json=reportFlags" json:"report_flags,omitempty"`
	LobbyId         *uint64                `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	Comment         *string                `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTASubmitPlayerReport) Reset() {
	*x = CMsgDOTASubmitPlayerReport{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitPlayerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitPlayerReport) ProtoMessage() {}

func (x *CMsgDOTASubmitPlayerReport) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitPlayerReport.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitPlayerReport) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDOTASubmitPlayerReport) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReport) GetReportFlags() uint32 {
	if x != nil && x.ReportFlags != nil {
		return *x.ReportFlags
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReport) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReport) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type CMsgDOTASubmitPlayerReportResponse struct {
	state           protoimpl.MessageState                      `protogen:"open.v1"`
	TargetAccountId *uint32                                     `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReportFlags     *uint32                                     `protobuf:"varint,2,opt,name=report_flags,json=reportFlags" json:"report_flags,omitempty"`
	DebugMessage    *string                                     `protobuf:"bytes,4,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
	EnumResult      *CMsgDOTASubmitPlayerReportResponse_EResult `protobuf:"varint,5,opt,name=enum_result,json=enumResult,enum=protocol.CMsgDOTASubmitPlayerReportResponse_EResult,def=0" json:"enum_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgDOTASubmitPlayerReportResponse fields.
const (
	Default_CMsgDOTASubmitPlayerReportResponse_EnumResult = CMsgDOTASubmitPlayerReportResponse_k_eInternalError
)

func (x *CMsgDOTASubmitPlayerReportResponse) Reset() {
	*x = CMsgDOTASubmitPlayerReportResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitPlayerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitPlayerReportResponse) ProtoMessage() {}

func (x *CMsgDOTASubmitPlayerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitPlayerReportResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitPlayerReportResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTASubmitPlayerReportResponse) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportResponse) GetReportFlags() uint32 {
	if x != nil && x.ReportFlags != nil {
		return *x.ReportFlags
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportResponse) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

func (x *CMsgDOTASubmitPlayerReportResponse) GetEnumResult() CMsgDOTASubmitPlayerReportResponse_EResult {
	if x != nil && x.EnumResult != nil {
		return *x.EnumResult
	}
	return Default_CMsgDOTASubmitPlayerReportResponse_EnumResult
}

type CMsgDOTASubmitPlayerAvoidRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	LobbyId         *uint64                `protobuf:"varint,4,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	UserNote        *string                `protobuf:"bytes,5,opt,name=user_note,json=userNote" json:"user_note,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTASubmitPlayerAvoidRequest) Reset() {
	*x = CMsgDOTASubmitPlayerAvoidRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitPlayerAvoidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitPlayerAvoidRequest) ProtoMessage() {}

func (x *CMsgDOTASubmitPlayerAvoidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitPlayerAvoidRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitPlayerAvoidRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTASubmitPlayerAvoidRequest) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerAvoidRequest) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerAvoidRequest) GetUserNote() string {
	if x != nil && x.UserNote != nil {
		return *x.UserNote
	}
	return ""
}

type CMsgDOTASubmitPlayerAvoidRequestResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	Result          *uint32                `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	DebugMessage    *string                `protobuf:"bytes,3,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTASubmitPlayerAvoidRequestResponse) Reset() {
	*x = CMsgDOTASubmitPlayerAvoidRequestResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitPlayerAvoidRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitPlayerAvoidRequestResponse) ProtoMessage() {}

func (x *CMsgDOTASubmitPlayerAvoidRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitPlayerAvoidRequestResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitPlayerAvoidRequestResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTASubmitPlayerAvoidRequestResponse) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerAvoidRequestResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerAvoidRequestResponse) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

type CMsgDOTASubmitPlayerReportV2 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReportReason    []uint32               `protobuf:"varint,2,rep,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	LobbyId         *uint64                `protobuf:"varint,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameTime        *float32               `protobuf:"fixed32,4,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	DebugSlot       *uint32                `protobuf:"varint,5,opt,name=debug_slot,json=debugSlot" json:"debug_slot,omitempty"`
	DebugMatchId    *uint64                `protobuf:"fixed64,6,opt,name=debug_match_id,json=debugMatchId" json:"debug_match_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTASubmitPlayerReportV2) Reset() {
	*x = CMsgDOTASubmitPlayerReportV2{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitPlayerReportV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitPlayerReportV2) ProtoMessage() {}

func (x *CMsgDOTASubmitPlayerReportV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitPlayerReportV2.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitPlayerReportV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTASubmitPlayerReportV2) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportV2) GetReportReason() []uint32 {
	if x != nil {
		return x.ReportReason
	}
	return nil
}

func (x *CMsgDOTASubmitPlayerReportV2) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportV2) GetGameTime() float32 {
	if x != nil && x.GameTime != nil {
		return *x.GameTime
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportV2) GetDebugSlot() uint32 {
	if x != nil && x.DebugSlot != nil {
		return *x.DebugSlot
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportV2) GetDebugMatchId() uint64 {
	if x != nil && x.DebugMatchId != nil {
		return *x.DebugMatchId
	}
	return 0
}

type CMsgDOTASubmitPlayerReportResponseV2 struct {
	state           protoimpl.MessageState                        `protogen:"open.v1"`
	TargetAccountId *uint32                                       `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	ReportReason    []uint32                                      `protobuf:"varint,2,rep,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	DebugMessage    *string                                       `protobuf:"bytes,4,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
	EnumResult      *CMsgDOTASubmitPlayerReportResponseV2_EResult `protobuf:"varint,5,opt,name=enum_result,json=enumResult,enum=protocol.CMsgDOTASubmitPlayerReportResponseV2_EResult,def=0" json:"enum_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgDOTASubmitPlayerReportResponseV2 fields.
const (
	Default_CMsgDOTASubmitPlayerReportResponseV2_EnumResult = CMsgDOTASubmitPlayerReportResponseV2_k_eInternalError
)

func (x *CMsgDOTASubmitPlayerReportResponseV2) Reset() {
	*x = CMsgDOTASubmitPlayerReportResponseV2{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitPlayerReportResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitPlayerReportResponseV2) ProtoMessage() {}

func (x *CMsgDOTASubmitPlayerReportResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitPlayerReportResponseV2.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitPlayerReportResponseV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDOTASubmitPlayerReportResponseV2) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitPlayerReportResponseV2) GetReportReason() []uint32 {
	if x != nil {
		return x.ReportReason
	}
	return nil
}

func (x *CMsgDOTASubmitPlayerReportResponseV2) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

func (x *CMsgDOTASubmitPlayerReportResponseV2) GetEnumResult() CMsgDOTASubmitPlayerReportResponseV2_EResult {
	if x != nil && x.EnumResult != nil {
		return *x.EnumResult
	}
	return Default_CMsgDOTASubmitPlayerReportResponseV2_EnumResult
}

type CMsgDOTASubmitLobbyMVPVote struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTASubmitLobbyMVPVote) Reset() {
	*x = CMsgDOTASubmitLobbyMVPVote{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitLobbyMVPVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitLobbyMVPVote) ProtoMessage() {}

func (x *CMsgDOTASubmitLobbyMVPVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitLobbyMVPVote.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitLobbyMVPVote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgDOTASubmitLobbyMVPVote) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

type CMsgDOTASubmitLobbyMVPVoteResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"varint,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	Eresult         *uint32                `protobuf:"varint,2,opt,name=eresult" json:"eresult,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTASubmitLobbyMVPVoteResponse) Reset() {
	*x = CMsgDOTASubmitLobbyMVPVoteResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitLobbyMVPVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitLobbyMVPVoteResponse) ProtoMessage() {}

func (x *CMsgDOTASubmitLobbyMVPVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitLobbyMVPVoteResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitLobbyMVPVoteResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgDOTASubmitLobbyMVPVoteResponse) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgDOTASubmitLobbyMVPVoteResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CMsgDOTALobbyMVPAwarded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MvpAccountId  []uint32               `protobuf:"varint,2,rep,name=mvp_account_id,json=mvpAccountId" json:"mvp_account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTALobbyMVPAwarded) Reset() {
	*x = CMsgDOTALobbyMVPAwarded{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALobbyMVPAwarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALobbyMVPAwarded) ProtoMessage() {}

func (x *CMsgDOTALobbyMVPAwarded) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALobbyMVPAwarded.ProtoReflect.Descriptor instead.
func (*CMsgDOTALobbyMVPAwarded) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTALobbyMVPAwarded) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTALobbyMVPAwarded) GetMvpAccountId() []uint32 {
	if x != nil {
		return x.MvpAccountId
	}
	return nil
}

type CMsgDOTAKickedFromMatchmakingQueue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchType     *MatchType             `protobuf:"varint,1,opt,name=match_type,json=matchType,enum=protocol.MatchType,def=0" json:"match_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAKickedFromMatchmakingQueue fields.
const (
	Default_CMsgDOTAKickedFromMatchmakingQueue_MatchType = MatchType_MATCH_TYPE_CASUAL
)

func (x *CMsgDOTAKickedFromMatchmakingQueue) Reset() {
	*x = CMsgDOTAKickedFromMatchmakingQueue{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAKickedFromMatchmakingQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAKickedFromMatchmakingQueue) ProtoMessage() {}

func (x *CMsgDOTAKickedFromMatchmakingQueue) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAKickedFromMatchmakingQueue.ProtoReflect.Descriptor instead.
func (*CMsgDOTAKickedFromMatchmakingQueue) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgDOTAKickedFromMatchmakingQueue) GetMatchType() MatchType {
	if x != nil && x.MatchType != nil {
		return *x.MatchType
	}
	return Default_CMsgDOTAKickedFromMatchmakingQueue_MatchType
}

type CMsgGCMatchDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCMatchDetailsRequest) Reset() {
	*x = CMsgGCMatchDetailsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCMatchDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCMatchDetailsRequest) ProtoMessage() {}

func (x *CMsgGCMatchDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCMatchDetailsRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCMatchDetailsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgGCMatchDetailsRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCMatchDetailsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Match         *CMsgDOTAMatch         `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	Vote          *DOTAMatchVote         `protobuf:"varint,3,opt,name=vote,enum=protocol.DOTAMatchVote,def=0" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCMatchDetailsResponse fields.
const (
	Default_CMsgGCMatchDetailsResponse_Vote = DOTAMatchVote_DOTAMatchVote_INVALID
)

func (x *CMsgGCMatchDetailsResponse) Reset() {
	*x = CMsgGCMatchDetailsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCMatchDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCMatchDetailsResponse) ProtoMessage() {}

func (x *CMsgGCMatchDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCMatchDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCMatchDetailsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgGCMatchDetailsResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgGCMatchDetailsResponse) GetMatch() *CMsgDOTAMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *CMsgGCMatchDetailsResponse) GetVote() DOTAMatchVote {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return Default_CMsgGCMatchDetailsResponse_Vote
}

type CMsgDOTAProfileTickets struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Result        *uint32                              `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	AccountId     *uint32                              `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	LeaguePasses  []*CMsgDOTAProfileTickets_LeaguePass `protobuf:"bytes,3,rep,name=league_passes,json=leaguePasses" json:"league_passes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAProfileTickets) Reset() {
	*x = CMsgDOTAProfileTickets{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAProfileTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileTickets) ProtoMessage() {}

func (x *CMsgDOTAProfileTickets) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileTickets.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileTickets) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgDOTAProfileTickets) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgDOTAProfileTickets) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAProfileTickets) GetLeaguePasses() []*CMsgDOTAProfileTickets_LeaguePass {
	if x != nil {
		return x.LeaguePasses
	}
	return nil
}

type CMsgClientToGCGetProfileTickets struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetProfileTickets) Reset() {
	*x = CMsgClientToGCGetProfileTickets{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetProfileTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetProfileTickets) ProtoMessage() {}

func (x *CMsgClientToGCGetProfileTickets) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetProfileTickets.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetProfileTickets) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientToGCGetProfileTickets) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCToClientPartySearchInvites struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Invites       []*CMsgGCToClientPartySearchInvite `protobuf:"bytes,1,rep,name=invites" json:"invites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientPartySearchInvites) Reset() {
	*x = CMsgGCToClientPartySearchInvites{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPartySearchInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPartySearchInvites) ProtoMessage() {}

func (x *CMsgGCToClientPartySearchInvites) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPartySearchInvites.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPartySearchInvites) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgGCToClientPartySearchInvites) GetInvites() []*CMsgGCToClientPartySearchInvite {
	if x != nil {
		return x.Invites
	}
	return nil
}

type CMsgDOTAWelcome struct {
	state                      protoimpl.MessageState            `protogen:"open.v1"`
	StoreItemHash              *uint32                           `protobuf:"varint,5,opt,name=store_item_hash,json=storeItemHash" json:"store_item_hash,omitempty"`
	Timeplayedconsecutively    *uint32                           `protobuf:"varint,6,opt,name=timeplayedconsecutively" json:"timeplayedconsecutively,omitempty"`
	Allow_3RdPartyMatchHistory *bool                             `protobuf:"varint,7,opt,name=allow_3rd_party_match_history,json=allow3rdPartyMatchHistory" json:"allow_3rd_party_match_history,omitempty"`
	LastIpAddress              *uint32                           `protobuf:"varint,13,opt,name=last_ip_address,json=lastIpAddress" json:"last_ip_address,omitempty"`
	ProfilePrivate             *bool                             `protobuf:"varint,17,opt,name=profile_private,json=profilePrivate" json:"profile_private,omitempty"`
	Currency                   *uint32                           `protobuf:"varint,18,opt,name=currency" json:"currency,omitempty"`
	ShouldRequestPlayerOrigin  *bool                             `protobuf:"varint,20,opt,name=should_request_player_origin,json=shouldRequestPlayerOrigin" json:"should_request_player_origin,omitempty"`
	GcSocacheFileVersion       *uint32                           `protobuf:"varint,22,opt,name=gc_socache_file_version,json=gcSocacheFileVersion" json:"gc_socache_file_version,omitempty"`
	IsPerfectWorldTestAccount  *bool                             `protobuf:"varint,24,opt,name=is_perfect_world_test_account,json=isPerfectWorldTestAccount" json:"is_perfect_world_test_account,omitempty"`
	ExtraMessages              []*CMsgDOTAWelcome_CExtraMsg      `protobuf:"bytes,26,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	MinimumRecentItemId        *uint64                           `protobuf:"varint,27,opt,name=minimum_recent_item_id,json=minimumRecentItemId" json:"minimum_recent_item_id,omitempty"`
	ActiveEvent                *EEvent                           `protobuf:"varint,28,opt,name=active_event,json=activeEvent,enum=protocol.EEvent,def=0" json:"active_event,omitempty"`
	AdditionalUserMessage      *uint32                           `protobuf:"varint,29,opt,name=additional_user_message,json=additionalUserMessage" json:"additional_user_message,omitempty"`
	CustomGameWhitelistVersion *uint32                           `protobuf:"varint,30,opt,name=custom_game_whitelist_version,json=customGameWhitelistVersion" json:"custom_game_whitelist_version,omitempty"`
	PartySearchFriendInvites   *CMsgGCToClientPartySearchInvites `protobuf:"bytes,31,opt,name=party_search_friend_invites,json=partySearchFriendInvites" json:"party_search_friend_invites,omitempty"`
	RemainingPlaytime          *int32                            `protobuf:"varint,32,opt,name=remaining_playtime,json=remainingPlaytime,def=-1" json:"remaining_playtime,omitempty"`
	DisableGuildPersonaInfo    *bool                             `protobuf:"varint,33,opt,name=disable_guild_persona_info,json=disableGuildPersonaInfo" json:"disable_guild_persona_info,omitempty"`
	ExtraMessageBlocks         []*CExtraMsgBlock                 `protobuf:"bytes,34,rep,name=extra_message_blocks,json=extraMessageBlocks" json:"extra_message_blocks,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for CMsgDOTAWelcome fields.
const (
	Default_CMsgDOTAWelcome_ActiveEvent       = EEvent_EVENT_ID_NONE
	Default_CMsgDOTAWelcome_RemainingPlaytime = int32(-1)
)

func (x *CMsgDOTAWelcome) Reset() {
	*x = CMsgDOTAWelcome{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAWelcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWelcome) ProtoMessage() {}

func (x *CMsgDOTAWelcome) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWelcome.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWelcome) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgDOTAWelcome) GetStoreItemHash() uint32 {
	if x != nil && x.StoreItemHash != nil {
		return *x.StoreItemHash
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetTimeplayedconsecutively() uint32 {
	if x != nil && x.Timeplayedconsecutively != nil {
		return *x.Timeplayedconsecutively
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetAllow_3RdPartyMatchHistory() bool {
	if x != nil && x.Allow_3RdPartyMatchHistory != nil {
		return *x.Allow_3RdPartyMatchHistory
	}
	return false
}

func (x *CMsgDOTAWelcome) GetLastIpAddress() uint32 {
	if x != nil && x.LastIpAddress != nil {
		return *x.LastIpAddress
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetProfilePrivate() bool {
	if x != nil && x.ProfilePrivate != nil {
		return *x.ProfilePrivate
	}
	return false
}

func (x *CMsgDOTAWelcome) GetCurrency() uint32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetShouldRequestPlayerOrigin() bool {
	if x != nil && x.ShouldRequestPlayerOrigin != nil {
		return *x.ShouldRequestPlayerOrigin
	}
	return false
}

func (x *CMsgDOTAWelcome) GetGcSocacheFileVersion() uint32 {
	if x != nil && x.GcSocacheFileVersion != nil {
		return *x.GcSocacheFileVersion
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetIsPerfectWorldTestAccount() bool {
	if x != nil && x.IsPerfectWorldTestAccount != nil {
		return *x.IsPerfectWorldTestAccount
	}
	return false
}

func (x *CMsgDOTAWelcome) GetExtraMessages() []*CMsgDOTAWelcome_CExtraMsg {
	if x != nil {
		return x.ExtraMessages
	}
	return nil
}

func (x *CMsgDOTAWelcome) GetMinimumRecentItemId() uint64 {
	if x != nil && x.MinimumRecentItemId != nil {
		return *x.MinimumRecentItemId
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetActiveEvent() EEvent {
	if x != nil && x.ActiveEvent != nil {
		return *x.ActiveEvent
	}
	return Default_CMsgDOTAWelcome_ActiveEvent
}

func (x *CMsgDOTAWelcome) GetAdditionalUserMessage() uint32 {
	if x != nil && x.AdditionalUserMessage != nil {
		return *x.AdditionalUserMessage
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetCustomGameWhitelistVersion() uint32 {
	if x != nil && x.CustomGameWhitelistVersion != nil {
		return *x.CustomGameWhitelistVersion
	}
	return 0
}

func (x *CMsgDOTAWelcome) GetPartySearchFriendInvites() *CMsgGCToClientPartySearchInvites {
	if x != nil {
		return x.PartySearchFriendInvites
	}
	return nil
}

func (x *CMsgDOTAWelcome) GetRemainingPlaytime() int32 {
	if x != nil && x.RemainingPlaytime != nil {
		return *x.RemainingPlaytime
	}
	return Default_CMsgDOTAWelcome_RemainingPlaytime
}

func (x *CMsgDOTAWelcome) GetDisableGuildPersonaInfo() bool {
	if x != nil && x.DisableGuildPersonaInfo != nil {
		return *x.DisableGuildPersonaInfo
	}
	return false
}

func (x *CMsgDOTAWelcome) GetExtraMessageBlocks() []*CExtraMsgBlock {
	if x != nil {
		return x.ExtraMessageBlocks
	}
	return nil
}

type CSODOTAGameHeroFavorites struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId        *int32                 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSODOTAGameHeroFavorites) Reset() {
	*x = CSODOTAGameHeroFavorites{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSODOTAGameHeroFavorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSODOTAGameHeroFavorites) ProtoMessage() {}

func (x *CSODOTAGameHeroFavorites) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSODOTAGameHeroFavorites.ProtoReflect.Descriptor instead.
func (*CSODOTAGameHeroFavorites) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{23}
}

func (x *CSODOTAGameHeroFavorites) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CSODOTAGameHeroFavorites) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgDOTAMatchVotes struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	MatchId       *uint64                          `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Votes         []*CMsgDOTAMatchVotes_PlayerVote `protobuf:"bytes,2,rep,name=votes" json:"votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAMatchVotes) Reset() {
	*x = CMsgDOTAMatchVotes{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAMatchVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchVotes) ProtoMessage() {}

func (x *CMsgDOTAMatchVotes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchVotes.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchVotes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgDOTAMatchVotes) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAMatchVotes) GetVotes() []*CMsgDOTAMatchVotes_PlayerVote {
	if x != nil {
		return x.Votes
	}
	return nil
}

type CMsgMatchmakingMatchGroupInfo struct {
	state                             protoimpl.MessageState   `protogen:"open.v1"`
	PlayersSearching                  *uint32                  `protobuf:"varint,1,opt,name=players_searching,json=playersSearching" json:"players_searching,omitempty"`
	AutoRegionSelectPingPenalty       *int32                   `protobuf:"zigzag32,2,opt,name=auto_region_select_ping_penalty,json=autoRegionSelectPingPenalty" json:"auto_region_select_ping_penalty,omitempty"`
	AutoRegionSelectPingPenaltyCustom *int32                   `protobuf:"zigzag32,4,opt,name=auto_region_select_ping_penalty_custom,json=autoRegionSelectPingPenaltyCustom" json:"auto_region_select_ping_penalty_custom,omitempty"`
	Status                            *EMatchGroupServerStatus `protobuf:"varint,3,opt,name=status,enum=protocol.EMatchGroupServerStatus,def=0" json:"status,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

// Default values for CMsgMatchmakingMatchGroupInfo fields.
const (
	Default_CMsgMatchmakingMatchGroupInfo_Status = EMatchGroupServerStatus_k_EMatchGroupServerStatus_OK
)

func (x *CMsgMatchmakingMatchGroupInfo) Reset() {
	*x = CMsgMatchmakingMatchGroupInfo{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgMatchmakingMatchGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMatchmakingMatchGroupInfo) ProtoMessage() {}

func (x *CMsgMatchmakingMatchGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMatchmakingMatchGroupInfo.ProtoReflect.Descriptor instead.
func (*CMsgMatchmakingMatchGroupInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgMatchmakingMatchGroupInfo) GetPlayersSearching() uint32 {
	if x != nil && x.PlayersSearching != nil {
		return *x.PlayersSearching
	}
	return 0
}

func (x *CMsgMatchmakingMatchGroupInfo) GetAutoRegionSelectPingPenalty() int32 {
	if x != nil && x.AutoRegionSelectPingPenalty != nil {
		return *x.AutoRegionSelectPingPenalty
	}
	return 0
}

func (x *CMsgMatchmakingMatchGroupInfo) GetAutoRegionSelectPingPenaltyCustom() int32 {
	if x != nil && x.AutoRegionSelectPingPenaltyCustom != nil {
		return *x.AutoRegionSelectPingPenaltyCustom
	}
	return 0
}

func (x *CMsgMatchmakingMatchGroupInfo) GetStatus() EMatchGroupServerStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_CMsgMatchmakingMatchGroupInfo_Status
}

type CMsgDOTAMatchmakingStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAMatchmakingStatsRequest) Reset() {
	*x = CMsgDOTAMatchmakingStatsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAMatchmakingStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchmakingStatsRequest) ProtoMessage() {}

func (x *CMsgDOTAMatchmakingStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchmakingStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchmakingStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{26}
}

type CMsgDOTAMatchmakingStatsResponse struct {
	state                                protoimpl.MessageState           `protogen:"open.v1"`
	MatchgroupsVersion                   *uint32                          `protobuf:"varint,1,opt,name=matchgroups_version,json=matchgroupsVersion" json:"matchgroups_version,omitempty"`
	LegacySearchingPlayersByGroupSource2 []uint32                         `protobuf:"varint,7,rep,name=legacy_searching_players_by_group_source2,json=legacySearchingPlayersByGroupSource2" json:"legacy_searching_players_by_group_source2,omitempty"`
	MatchGroups                          []*CMsgMatchmakingMatchGroupInfo `protobuf:"bytes,8,rep,name=match_groups,json=matchGroups" json:"match_groups,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *CMsgDOTAMatchmakingStatsResponse) Reset() {
	*x = CMsgDOTAMatchmakingStatsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAMatchmakingStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchmakingStatsResponse) ProtoMessage() {}

func (x *CMsgDOTAMatchmakingStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchmakingStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchmakingStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgDOTAMatchmakingStatsResponse) GetMatchgroupsVersion() uint32 {
	if x != nil && x.MatchgroupsVersion != nil {
		return *x.MatchgroupsVersion
	}
	return 0
}

func (x *CMsgDOTAMatchmakingStatsResponse) GetLegacySearchingPlayersByGroupSource2() []uint32 {
	if x != nil {
		return x.LegacySearchingPlayersByGroupSource2
	}
	return nil
}

func (x *CMsgDOTAMatchmakingStatsResponse) GetMatchGroups() []*CMsgMatchmakingMatchGroupInfo {
	if x != nil {
		return x.MatchGroups
	}
	return nil
}

type CMsgDOTAUpdateMatchmakingStats struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Stats         *CMsgDOTAMatchmakingStatsResponse `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAUpdateMatchmakingStats) Reset() {
	*x = CMsgDOTAUpdateMatchmakingStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAUpdateMatchmakingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAUpdateMatchmakingStats) ProtoMessage() {}

func (x *CMsgDOTAUpdateMatchmakingStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAUpdateMatchmakingStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAUpdateMatchmakingStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgDOTAUpdateMatchmakingStats) GetStats() *CMsgDOTAMatchmakingStatsResponse {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTAUpdateMatchManagementStats struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Stats         *CMsgDOTAMatchmakingStatsResponse `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAUpdateMatchManagementStats) Reset() {
	*x = CMsgDOTAUpdateMatchManagementStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAUpdateMatchManagementStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAUpdateMatchManagementStats) ProtoMessage() {}

func (x *CMsgDOTAUpdateMatchManagementStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAUpdateMatchManagementStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAUpdateMatchManagementStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgDOTAUpdateMatchManagementStats) GetStats() *CMsgDOTAMatchmakingStatsResponse {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CMsgDOTASetMatchHistoryAccess struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Allow_3RdPartyMatchHistory *bool                  `protobuf:"varint,1,opt,name=allow_3rd_party_match_history,json=allow3rdPartyMatchHistory" json:"allow_3rd_party_match_history,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgDOTASetMatchHistoryAccess) Reset() {
	*x = CMsgDOTASetMatchHistoryAccess{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASetMatchHistoryAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetMatchHistoryAccess) ProtoMessage() {}

func (x *CMsgDOTASetMatchHistoryAccess) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetMatchHistoryAccess.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetMatchHistoryAccess) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgDOTASetMatchHistoryAccess) GetAllow_3RdPartyMatchHistory() bool {
	if x != nil && x.Allow_3RdPartyMatchHistory != nil {
		return *x.Allow_3RdPartyMatchHistory
	}
	return false
}

type CMsgDOTASetMatchHistoryAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *uint32                `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTASetMatchHistoryAccessResponse fields.
const (
	Default_CMsgDOTASetMatchHistoryAccessResponse_Eresult = uint32(2)
)

func (x *CMsgDOTASetMatchHistoryAccessResponse) Reset() {
	*x = CMsgDOTASetMatchHistoryAccessResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASetMatchHistoryAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetMatchHistoryAccessResponse) ProtoMessage() {}

func (x *CMsgDOTASetMatchHistoryAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetMatchHistoryAccessResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetMatchHistoryAccessResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgDOTASetMatchHistoryAccessResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgDOTASetMatchHistoryAccessResponse_Eresult
}

type CMsgDOTANotifyAccountFlagsChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accountid     *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	AccountFlags  *uint32                `protobuf:"varint,2,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTANotifyAccountFlagsChange) Reset() {
	*x = CMsgDOTANotifyAccountFlagsChange{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTANotifyAccountFlagsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTANotifyAccountFlagsChange) ProtoMessage() {}

func (x *CMsgDOTANotifyAccountFlagsChange) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTANotifyAccountFlagsChange.ProtoReflect.Descriptor instead.
func (*CMsgDOTANotifyAccountFlagsChange) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgDOTANotifyAccountFlagsChange) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CMsgDOTANotifyAccountFlagsChange) GetAccountFlags() uint32 {
	if x != nil && x.AccountFlags != nil {
		return *x.AccountFlags
	}
	return 0
}

type CMsgDOTASetProfilePrivacy struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ProfilePrivate *bool                  `protobuf:"varint,1,opt,name=profile_private,json=profilePrivate" json:"profile_private,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgDOTASetProfilePrivacy) Reset() {
	*x = CMsgDOTASetProfilePrivacy{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASetProfilePrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetProfilePrivacy) ProtoMessage() {}

func (x *CMsgDOTASetProfilePrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetProfilePrivacy.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetProfilePrivacy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgDOTASetProfilePrivacy) GetProfilePrivate() bool {
	if x != nil && x.ProfilePrivate != nil {
		return *x.ProfilePrivate
	}
	return false
}

type CMsgDOTASetProfilePrivacyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *uint32                `protobuf:"varint,1,opt,name=eresult" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTASetProfilePrivacyResponse) Reset() {
	*x = CMsgDOTASetProfilePrivacyResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASetProfilePrivacyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetProfilePrivacyResponse) ProtoMessage() {}

func (x *CMsgDOTASetProfilePrivacyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetProfilePrivacyResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetProfilePrivacyResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgDOTASetProfilePrivacyResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CMsgUpgradeLeagueItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	LeagueId      *uint32                `protobuf:"varint,2,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgUpgradeLeagueItem) Reset() {
	*x = CMsgUpgradeLeagueItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgUpgradeLeagueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUpgradeLeagueItem) ProtoMessage() {}

func (x *CMsgUpgradeLeagueItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUpgradeLeagueItem.ProtoReflect.Descriptor instead.
func (*CMsgUpgradeLeagueItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgUpgradeLeagueItem) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgUpgradeLeagueItem) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgUpgradeLeagueItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgUpgradeLeagueItemResponse) Reset() {
	*x = CMsgUpgradeLeagueItemResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgUpgradeLeagueItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgUpgradeLeagueItemResponse) ProtoMessage() {}

func (x *CMsgUpgradeLeagueItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgUpgradeLeagueItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgUpgradeLeagueItemResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{36}
}

type CMsgGCWatchDownloadedReplay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	WatchType     *DOTA_WatchReplayType  `protobuf:"varint,2,opt,name=watch_type,json=watchType,enum=protocol.DOTA_WatchReplayType,def=0" json:"watch_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCWatchDownloadedReplay fields.
const (
	Default_CMsgGCWatchDownloadedReplay_WatchType = DOTA_WatchReplayType_DOTA_WATCH_REPLAY_NORMAL
)

func (x *CMsgGCWatchDownloadedReplay) Reset() {
	*x = CMsgGCWatchDownloadedReplay{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCWatchDownloadedReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCWatchDownloadedReplay) ProtoMessage() {}

func (x *CMsgGCWatchDownloadedReplay) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCWatchDownloadedReplay.ProtoReflect.Descriptor instead.
func (*CMsgGCWatchDownloadedReplay) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgGCWatchDownloadedReplay) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgGCWatchDownloadedReplay) GetWatchType() DOTA_WatchReplayType {
	if x != nil && x.WatchType != nil {
		return *x.WatchType
	}
	return Default_CMsgGCWatchDownloadedReplay_WatchType
}

type CMsgClientsRejoinChatChannels struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientsRejoinChatChannels) Reset() {
	*x = CMsgClientsRejoinChatChannels{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientsRejoinChatChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientsRejoinChatChannels) ProtoMessage() {}

func (x *CMsgClientsRejoinChatChannels) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientsRejoinChatChannels.ProtoReflect.Descriptor instead.
func (*CMsgClientsRejoinChatChannels) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{38}
}

type CMsgGCGetHeroStandings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCGetHeroStandings) Reset() {
	*x = CMsgGCGetHeroStandings{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroStandings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroStandings) ProtoMessage() {}

func (x *CMsgGCGetHeroStandings) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroStandings.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroStandings) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{39}
}

type CMsgGCGetHeroStandingsResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Standings     []*CMsgGCGetHeroStandingsResponse_Hero `protobuf:"bytes,1,rep,name=standings" json:"standings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCGetHeroStandingsResponse) Reset() {
	*x = CMsgGCGetHeroStandingsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroStandingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroStandingsResponse) ProtoMessage() {}

func (x *CMsgGCGetHeroStandingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroStandingsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroStandingsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgGCGetHeroStandingsResponse) GetStandings() []*CMsgGCGetHeroStandingsResponse_Hero {
	if x != nil {
		return x.Standings
	}
	return nil
}

type CMatchPlayerTimedStatAverages struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Kills            *float32               `protobuf:"fixed32,2,opt,name=kills" json:"kills,omitempty"`
	Deaths           *float32               `protobuf:"fixed32,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *float32               `protobuf:"fixed32,4,opt,name=assists" json:"assists,omitempty"`
	NetWorth         *float32               `protobuf:"fixed32,5,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	LastHits         *float32               `protobuf:"fixed32,6,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies           *float32               `protobuf:"fixed32,7,opt,name=denies" json:"denies,omitempty"`
	ItemValue        *float32               `protobuf:"fixed32,8,opt,name=item_value,json=itemValue" json:"item_value,omitempty"`
	SupportGoldSpent *float32               `protobuf:"fixed32,9,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	CampsStacked     *float32               `protobuf:"fixed32,10,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	WardsPlaced      *float32               `protobuf:"fixed32,11,opt,name=wards_placed,json=wardsPlaced" json:"wards_placed,omitempty"`
	Dewards          *float32               `protobuf:"fixed32,12,opt,name=dewards" json:"dewards,omitempty"`
	TripleKills      *float32               `protobuf:"fixed32,13,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	Rampages         *float32               `protobuf:"fixed32,14,opt,name=rampages" json:"rampages,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMatchPlayerTimedStatAverages) Reset() {
	*x = CMatchPlayerTimedStatAverages{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMatchPlayerTimedStatAverages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerTimedStatAverages) ProtoMessage() {}

func (x *CMatchPlayerTimedStatAverages) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerTimedStatAverages.ProtoReflect.Descriptor instead.
func (*CMatchPlayerTimedStatAverages) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{41}
}

func (x *CMatchPlayerTimedStatAverages) GetKills() float32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetDeaths() float32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetAssists() float32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetNetWorth() float32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetLastHits() float32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetDenies() float32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetItemValue() float32 {
	if x != nil && x.ItemValue != nil {
		return *x.ItemValue
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetSupportGoldSpent() float32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetCampsStacked() float32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetWardsPlaced() float32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetDewards() float32 {
	if x != nil && x.Dewards != nil {
		return *x.Dewards
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetTripleKills() float32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMatchPlayerTimedStatAverages) GetRampages() float32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

type CMatchPlayerTimedStatStdDeviations struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Kills            *float32               `protobuf:"fixed32,2,opt,name=kills,def=1" json:"kills,omitempty"`
	Deaths           *float32               `protobuf:"fixed32,3,opt,name=deaths,def=1" json:"deaths,omitempty"`
	Assists          *float32               `protobuf:"fixed32,4,opt,name=assists,def=1" json:"assists,omitempty"`
	NetWorth         *float32               `protobuf:"fixed32,5,opt,name=net_worth,json=netWorth,def=1" json:"net_worth,omitempty"`
	LastHits         *float32               `protobuf:"fixed32,6,opt,name=last_hits,json=lastHits,def=1" json:"last_hits,omitempty"`
	Denies           *float32               `protobuf:"fixed32,7,opt,name=denies,def=1" json:"denies,omitempty"`
	ItemValue        *float32               `protobuf:"fixed32,8,opt,name=item_value,json=itemValue,def=1" json:"item_value,omitempty"`
	SupportGoldSpent *float32               `protobuf:"fixed32,9,opt,name=support_gold_spent,json=supportGoldSpent,def=1" json:"support_gold_spent,omitempty"`
	CampsStacked     *float32               `protobuf:"fixed32,10,opt,name=camps_stacked,json=campsStacked,def=1" json:"camps_stacked,omitempty"`
	WardsPlaced      *float32               `protobuf:"fixed32,11,opt,name=wards_placed,json=wardsPlaced,def=1" json:"wards_placed,omitempty"`
	Dewards          *float32               `protobuf:"fixed32,12,opt,name=dewards,def=1" json:"dewards,omitempty"`
	TripleKills      *float32               `protobuf:"fixed32,13,opt,name=triple_kills,json=tripleKills,def=1" json:"triple_kills,omitempty"`
	Rampages         *float32               `protobuf:"fixed32,14,opt,name=rampages,def=1" json:"rampages,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMatchPlayerTimedStatStdDeviations fields.
const (
	Default_CMatchPlayerTimedStatStdDeviations_Kills            = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_Deaths           = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_Assists          = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_NetWorth         = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_LastHits         = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_Denies           = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_ItemValue        = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_SupportGoldSpent = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_CampsStacked     = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_WardsPlaced      = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_Dewards          = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_TripleKills      = float32(1)
	Default_CMatchPlayerTimedStatStdDeviations_Rampages         = float32(1)
)

func (x *CMatchPlayerTimedStatStdDeviations) Reset() {
	*x = CMatchPlayerTimedStatStdDeviations{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMatchPlayerTimedStatStdDeviations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMatchPlayerTimedStatStdDeviations) ProtoMessage() {}

func (x *CMatchPlayerTimedStatStdDeviations) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMatchPlayerTimedStatStdDeviations.ProtoReflect.Descriptor instead.
func (*CMatchPlayerTimedStatStdDeviations) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{42}
}

func (x *CMatchPlayerTimedStatStdDeviations) GetKills() float32 {
	if x != nil && x.Kills != nil {
		return *x.Kills
	}
	return Default_CMatchPlayerTimedStatStdDeviations_Kills
}

func (x *CMatchPlayerTimedStatStdDeviations) GetDeaths() float32 {
	if x != nil && x.Deaths != nil {
		return *x.Deaths
	}
	return Default_CMatchPlayerTimedStatStdDeviations_Deaths
}

func (x *CMatchPlayerTimedStatStdDeviations) GetAssists() float32 {
	if x != nil && x.Assists != nil {
		return *x.Assists
	}
	return Default_CMatchPlayerTimedStatStdDeviations_Assists
}

func (x *CMatchPlayerTimedStatStdDeviations) GetNetWorth() float32 {
	if x != nil && x.NetWorth != nil {
		return *x.NetWorth
	}
	return Default_CMatchPlayerTimedStatStdDeviations_NetWorth
}

func (x *CMatchPlayerTimedStatStdDeviations) GetLastHits() float32 {
	if x != nil && x.LastHits != nil {
		return *x.LastHits
	}
	return Default_CMatchPlayerTimedStatStdDeviations_LastHits
}

func (x *CMatchPlayerTimedStatStdDeviations) GetDenies() float32 {
	if x != nil && x.Denies != nil {
		return *x.Denies
	}
	return Default_CMatchPlayerTimedStatStdDeviations_Denies
}

func (x *CMatchPlayerTimedStatStdDeviations) GetItemValue() float32 {
	if x != nil && x.ItemValue != nil {
		return *x.ItemValue
	}
	return Default_CMatchPlayerTimedStatStdDeviations_ItemValue
}

func (x *CMatchPlayerTimedStatStdDeviations) GetSupportGoldSpent() float32 {
	if x != nil && x.SupportGoldSpent != nil {
		return *x.SupportGoldSpent
	}
	return Default_CMatchPlayerTimedStatStdDeviations_SupportGoldSpent
}

func (x *CMatchPlayerTimedStatStdDeviations) GetCampsStacked() float32 {
	if x != nil && x.CampsStacked != nil {
		return *x.CampsStacked
	}
	return Default_CMatchPlayerTimedStatStdDeviations_CampsStacked
}

func (x *CMatchPlayerTimedStatStdDeviations) GetWardsPlaced() float32 {
	if x != nil && x.WardsPlaced != nil {
		return *x.WardsPlaced
	}
	return Default_CMatchPlayerTimedStatStdDeviations_WardsPlaced
}

func (x *CMatchPlayerTimedStatStdDeviations) GetDewards() float32 {
	if x != nil && x.Dewards != nil {
		return *x.Dewards
	}
	return Default_CMatchPlayerTimedStatStdDeviations_Dewards
}

func (x *CMatchPlayerTimedStatStdDeviations) GetTripleKills() float32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return Default_CMatchPlayerTimedStatStdDeviations_TripleKills
}

func (x *CMatchPlayerTimedStatStdDeviations) GetRampages() float32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return Default_CMatchPlayerTimedStatStdDeviations_Rampages
}

type CMsgGCGetHeroTimedStatsResponse struct {
	state            protoimpl.MessageState                              `protogen:"open.v1"`
	HeroId           *int32                                              `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	RankChunkedStats []*CMsgGCGetHeroTimedStatsResponse_RankChunkedStats `protobuf:"bytes,2,rep,name=rank_chunked_stats,json=rankChunkedStats" json:"rank_chunked_stats,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCGetHeroTimedStatsResponse) Reset() {
	*x = CMsgGCGetHeroTimedStatsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroTimedStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroTimedStatsResponse) ProtoMessage() {}

func (x *CMsgGCGetHeroTimedStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroTimedStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroTimedStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgGCGetHeroTimedStatsResponse) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCGetHeroTimedStatsResponse) GetRankChunkedStats() []*CMsgGCGetHeroTimedStatsResponse_RankChunkedStats {
	if x != nil {
		return x.RankChunkedStats
	}
	return nil
}

type CMsgGCItemEditorReservationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReservationsRequest) Reset() {
	*x = CMsgGCItemEditorReservationsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReservationsRequest) ProtoMessage() {}

func (x *CMsgGCItemEditorReservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReservationsRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReservationsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{44}
}

type CMsgGCItemEditorReservation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefIndex      *uint32                `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReservation) Reset() {
	*x = CMsgGCItemEditorReservation{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReservation) ProtoMessage() {}

func (x *CMsgGCItemEditorReservation) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReservation.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReservation) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgGCItemEditorReservation) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReservation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CMsgGCItemEditorReservationsResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Reservations  []*CMsgGCItemEditorReservation `protobuf:"bytes,1,rep,name=reservations" json:"reservations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReservationsResponse) Reset() {
	*x = CMsgGCItemEditorReservationsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReservationsResponse) ProtoMessage() {}

func (x *CMsgGCItemEditorReservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReservationsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReservationsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgGCItemEditorReservationsResponse) GetReservations() []*CMsgGCItemEditorReservation {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type CMsgGCItemEditorReserveItemDef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefIndex      *uint32                `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReserveItemDef) Reset() {
	*x = CMsgGCItemEditorReserveItemDef{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReserveItemDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReserveItemDef) ProtoMessage() {}

func (x *CMsgGCItemEditorReserveItemDef) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReserveItemDef.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReserveItemDef) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgGCItemEditorReserveItemDef) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReserveItemDef) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type CMsgGCItemEditorReserveItemDefResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefIndex      *uint32                `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Result        *uint32                `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReserveItemDefResponse) Reset() {
	*x = CMsgGCItemEditorReserveItemDefResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReserveItemDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReserveItemDefResponse) ProtoMessage() {}

func (x *CMsgGCItemEditorReserveItemDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReserveItemDefResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReserveItemDefResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgGCItemEditorReserveItemDefResponse) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReserveItemDefResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *CMsgGCItemEditorReserveItemDefResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgGCItemEditorReleaseReservation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefIndex      *uint32                `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReleaseReservation) Reset() {
	*x = CMsgGCItemEditorReleaseReservation{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReleaseReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReleaseReservation) ProtoMessage() {}

func (x *CMsgGCItemEditorReleaseReservation) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReleaseReservation.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReleaseReservation) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgGCItemEditorReleaseReservation) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReleaseReservation) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type CMsgGCItemEditorReleaseReservationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefIndex      *uint32                `protobuf:"varint,1,opt,name=def_index,json=defIndex" json:"def_index,omitempty"`
	Released      *bool                  `protobuf:"varint,2,opt,name=released" json:"released,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCItemEditorReleaseReservationResponse) Reset() {
	*x = CMsgGCItemEditorReleaseReservationResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCItemEditorReleaseReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCItemEditorReleaseReservationResponse) ProtoMessage() {}

func (x *CMsgGCItemEditorReleaseReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCItemEditorReleaseReservationResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCItemEditorReleaseReservationResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgGCItemEditorReleaseReservationResponse) GetDefIndex() uint32 {
	if x != nil && x.DefIndex != nil {
		return *x.DefIndex
	}
	return 0
}

func (x *CMsgGCItemEditorReleaseReservationResponse) GetReleased() bool {
	if x != nil && x.Released != nil {
		return *x.Released
	}
	return false
}

type CMsgFlipLobbyTeams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgFlipLobbyTeams) Reset() {
	*x = CMsgFlipLobbyTeams{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgFlipLobbyTeams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgFlipLobbyTeams) ProtoMessage() {}

func (x *CMsgFlipLobbyTeams) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgFlipLobbyTeams.ProtoReflect.Descriptor instead.
func (*CMsgFlipLobbyTeams) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{51}
}

type CMsgGCLobbyUpdateBroadcastChannelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint32                `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode   *string                `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode  *string                `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) Reset() {
	*x = CMsgGCLobbyUpdateBroadcastChannelInfo{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCLobbyUpdateBroadcastChannelInfo) ProtoMessage() {}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCLobbyUpdateBroadcastChannelInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCLobbyUpdateBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgGCLobbyUpdateBroadcastChannelInfo) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

type CMsgDOTAClaimEventActionData struct {
	state             protoimpl.MessageState                          `protogen:"open.v1"`
	GrantItemGiftData *CMsgDOTAClaimEventActionData_GrantItemGiftData `protobuf:"bytes,4,opt,name=grant_item_gift_data,json=grantItemGiftData" json:"grant_item_gift_data,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgDOTAClaimEventActionData) Reset() {
	*x = CMsgDOTAClaimEventActionData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAClaimEventActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClaimEventActionData) ProtoMessage() {}

func (x *CMsgDOTAClaimEventActionData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClaimEventActionData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClaimEventActionData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{53}
}

func (x *CMsgDOTAClaimEventActionData) GetGrantItemGiftData() *CMsgDOTAClaimEventActionData_GrantItemGiftData {
	if x != nil {
		return x.GrantItemGiftData
	}
	return nil
}

type CMsgDOTAClaimEventAction struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	EventId       *uint32                       `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ActionId      *uint32                       `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Quantity      *uint32                       `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	Data          *CMsgDOTAClaimEventActionData `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	ScoreMode     *EEventActionScoreMode        `protobuf:"varint,5,opt,name=score_mode,json=scoreMode,enum=protocol.EEventActionScoreMode,def=0" json:"score_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAClaimEventAction fields.
const (
	Default_CMsgDOTAClaimEventAction_ScoreMode = EEventActionScoreMode_k_eEventActionScoreMode_Add
)

func (x *CMsgDOTAClaimEventAction) Reset() {
	*x = CMsgDOTAClaimEventAction{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAClaimEventAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClaimEventAction) ProtoMessage() {}

func (x *CMsgDOTAClaimEventAction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClaimEventAction.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClaimEventAction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{54}
}

func (x *CMsgDOTAClaimEventAction) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgDOTAClaimEventAction) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgDOTAClaimEventAction) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CMsgDOTAClaimEventAction) GetData() *CMsgDOTAClaimEventActionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgDOTAClaimEventAction) GetScoreMode() EEventActionScoreMode {
	if x != nil && x.ScoreMode != nil {
		return *x.ScoreMode
	}
	return Default_CMsgDOTAClaimEventAction_ScoreMode
}

type CMsgClientToGCClaimEventActionUsingItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ActionId      *uint32                `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	ItemId        *uint64                `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Quantity      *uint32                `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCClaimEventActionUsingItem) Reset() {
	*x = CMsgClientToGCClaimEventActionUsingItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCClaimEventActionUsingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClaimEventActionUsingItem) ProtoMessage() {}

func (x *CMsgClientToGCClaimEventActionUsingItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClaimEventActionUsingItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClaimEventActionUsingItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{55}
}

func (x *CMsgClientToGCClaimEventActionUsingItem) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCClaimEventActionUsingItem) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgClientToGCClaimEventActionUsingItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgClientToGCClaimEventActionUsingItem) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type CMsgClientToGCClaimEventActionUsingItemResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ActionResults *CMsgDOTAClaimEventActionResponse `protobuf:"bytes,1,opt,name=action_results,json=actionResults" json:"action_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCClaimEventActionUsingItemResponse) Reset() {
	*x = CMsgClientToGCClaimEventActionUsingItemResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCClaimEventActionUsingItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClaimEventActionUsingItemResponse) ProtoMessage() {}

func (x *CMsgClientToGCClaimEventActionUsingItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClaimEventActionUsingItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClaimEventActionUsingItemResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{56}
}

func (x *CMsgClientToGCClaimEventActionUsingItemResponse) GetActionResults() *CMsgDOTAClaimEventActionResponse {
	if x != nil {
		return x.ActionResults
	}
	return nil
}

type CMsgGCToClientClaimEventActionUsingItemCompleted struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ItemId        *uint64                           `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ActionResults *CMsgDOTAClaimEventActionResponse `protobuf:"bytes,2,opt,name=action_results,json=actionResults" json:"action_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientClaimEventActionUsingItemCompleted) Reset() {
	*x = CMsgGCToClientClaimEventActionUsingItemCompleted{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientClaimEventActionUsingItemCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientClaimEventActionUsingItemCompleted) ProtoMessage() {}

func (x *CMsgGCToClientClaimEventActionUsingItemCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientClaimEventActionUsingItemCompleted.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientClaimEventActionUsingItemCompleted) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{57}
}

func (x *CMsgGCToClientClaimEventActionUsingItemCompleted) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CMsgGCToClientClaimEventActionUsingItemCompleted) GetActionResults() *CMsgDOTAClaimEventActionResponse {
	if x != nil {
		return x.ActionResults
	}
	return nil
}

type CMsgDOTAGetEventPoints struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountId     *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAGetEventPoints) Reset() {
	*x = CMsgDOTAGetEventPoints{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetEventPoints) ProtoMessage() {}

func (x *CMsgDOTAGetEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{58}
}

func (x *CMsgDOTAGetEventPoints) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgDOTAGetEventPoints) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgDOTAGetEventPointsResponse struct {
	state              protoimpl.MessageState                   `protogen:"open.v1"`
	TotalPoints        *uint32                                  `protobuf:"varint,1,opt,name=total_points,json=totalPoints" json:"total_points,omitempty"`
	TotalPremiumPoints *uint32                                  `protobuf:"varint,2,opt,name=total_premium_points,json=totalPremiumPoints" json:"total_premium_points,omitempty"`
	EventId            *uint32                                  `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Points             *uint32                                  `protobuf:"varint,4,opt,name=points" json:"points,omitempty"`
	PremiumPoints      *uint32                                  `protobuf:"varint,5,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	CompletedActions   []*CMsgDOTAGetEventPointsResponse_Action `protobuf:"bytes,6,rep,name=completed_actions,json=completedActions" json:"completed_actions,omitempty"`
	AccountId          *uint32                                  `protobuf:"varint,7,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Owned              *bool                                    `protobuf:"varint,8,opt,name=owned" json:"owned,omitempty"`
	AuditAction        *uint32                                  `protobuf:"varint,9,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
	ActiveSeasonId     *uint32                                  `protobuf:"varint,10,opt,name=active_season_id,json=activeSeasonId" json:"active_season_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgDOTAGetEventPointsResponse) Reset() {
	*x = CMsgDOTAGetEventPointsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetEventPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetEventPointsResponse) ProtoMessage() {}

func (x *CMsgDOTAGetEventPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetEventPointsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetEventPointsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{59}
}

func (x *CMsgDOTAGetEventPointsResponse) GetTotalPoints() uint32 {
	if x != nil && x.TotalPoints != nil {
		return *x.TotalPoints
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetTotalPremiumPoints() uint32 {
	if x != nil && x.TotalPremiumPoints != nil {
		return *x.TotalPremiumPoints
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetPremiumPoints() uint32 {
	if x != nil && x.PremiumPoints != nil {
		return *x.PremiumPoints
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetCompletedActions() []*CMsgDOTAGetEventPointsResponse_Action {
	if x != nil {
		return x.CompletedActions
	}
	return nil
}

func (x *CMsgDOTAGetEventPointsResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

func (x *CMsgDOTAGetEventPointsResponse) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse) GetActiveSeasonId() uint32 {
	if x != nil && x.ActiveSeasonId != nil {
		return *x.ActiveSeasonId
	}
	return 0
}

type CMsgDOTAGetPeriodicResource struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccountId          *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PeriodicResourceId *uint32                `protobuf:"varint,2,opt,name=periodic_resource_id,json=periodicResourceId" json:"periodic_resource_id,omitempty"`
	Timestamp          *uint32                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgDOTAGetPeriodicResource) Reset() {
	*x = CMsgDOTAGetPeriodicResource{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetPeriodicResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetPeriodicResource) ProtoMessage() {}

func (x *CMsgDOTAGetPeriodicResource) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetPeriodicResource.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetPeriodicResource) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{60}
}

func (x *CMsgDOTAGetPeriodicResource) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAGetPeriodicResource) GetPeriodicResourceId() uint32 {
	if x != nil && x.PeriodicResourceId != nil {
		return *x.PeriodicResourceId
	}
	return 0
}

func (x *CMsgDOTAGetPeriodicResource) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgDOTAGetPeriodicResourceResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PeriodicResourceMax  *uint32                `protobuf:"varint,1,opt,name=periodic_resource_max,json=periodicResourceMax" json:"periodic_resource_max,omitempty"`
	PeriodicResourceUsed *uint32                `protobuf:"varint,2,opt,name=periodic_resource_used,json=periodicResourceUsed" json:"periodic_resource_used,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgDOTAGetPeriodicResourceResponse) Reset() {
	*x = CMsgDOTAGetPeriodicResourceResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetPeriodicResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetPeriodicResourceResponse) ProtoMessage() {}

func (x *CMsgDOTAGetPeriodicResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetPeriodicResourceResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetPeriodicResourceResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{61}
}

func (x *CMsgDOTAGetPeriodicResourceResponse) GetPeriodicResourceMax() uint32 {
	if x != nil && x.PeriodicResourceMax != nil {
		return *x.PeriodicResourceMax
	}
	return 0
}

func (x *CMsgDOTAGetPeriodicResourceResponse) GetPeriodicResourceUsed() uint32 {
	if x != nil && x.PeriodicResourceUsed != nil {
		return *x.PeriodicResourceUsed
	}
	return 0
}

type CMsgDOTAPeriodicResourceUpdated struct {
	state                 protoimpl.MessageState               `protogen:"open.v1"`
	PeriodicResourceKey   *CMsgDOTAGetPeriodicResource         `protobuf:"bytes,1,opt,name=periodic_resource_key,json=periodicResourceKey" json:"periodic_resource_key,omitempty"`
	PeriodicResourceValue *CMsgDOTAGetPeriodicResourceResponse `protobuf:"bytes,2,opt,name=periodic_resource_value,json=periodicResourceValue" json:"periodic_resource_value,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgDOTAPeriodicResourceUpdated) Reset() {
	*x = CMsgDOTAPeriodicResourceUpdated{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPeriodicResourceUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPeriodicResourceUpdated) ProtoMessage() {}

func (x *CMsgDOTAPeriodicResourceUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPeriodicResourceUpdated.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPeriodicResourceUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{62}
}

func (x *CMsgDOTAPeriodicResourceUpdated) GetPeriodicResourceKey() *CMsgDOTAGetPeriodicResource {
	if x != nil {
		return x.PeriodicResourceKey
	}
	return nil
}

func (x *CMsgDOTAPeriodicResourceUpdated) GetPeriodicResourceValue() *CMsgDOTAGetPeriodicResourceResponse {
	if x != nil {
		return x.PeriodicResourceValue
	}
	return nil
}

type CMsgDOTACompendiumSelection struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SelectionIndex *uint32                `protobuf:"varint,1,opt,name=selection_index,json=selectionIndex" json:"selection_index,omitempty"`
	Selection      *uint32                `protobuf:"varint,2,opt,name=selection" json:"selection,omitempty"`
	Leagueid       *uint32                `protobuf:"varint,3,opt,name=leagueid" json:"leagueid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgDOTACompendiumSelection) Reset() {
	*x = CMsgDOTACompendiumSelection{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumSelection) ProtoMessage() {}

func (x *CMsgDOTACompendiumSelection) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumSelection.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumSelection) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{63}
}

func (x *CMsgDOTACompendiumSelection) GetSelectionIndex() uint32 {
	if x != nil && x.SelectionIndex != nil {
		return *x.SelectionIndex
	}
	return 0
}

func (x *CMsgDOTACompendiumSelection) GetSelection() uint32 {
	if x != nil && x.Selection != nil {
		return *x.Selection
	}
	return 0
}

func (x *CMsgDOTACompendiumSelection) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

type CMsgDOTACompendiumSelectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *uint32                `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTACompendiumSelectionResponse fields.
const (
	Default_CMsgDOTACompendiumSelectionResponse_Eresult = uint32(2)
)

func (x *CMsgDOTACompendiumSelectionResponse) Reset() {
	*x = CMsgDOTACompendiumSelectionResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumSelectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumSelectionResponse) ProtoMessage() {}

func (x *CMsgDOTACompendiumSelectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumSelectionResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumSelectionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{64}
}

func (x *CMsgDOTACompendiumSelectionResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgDOTACompendiumSelectionResponse_Eresult
}

type CMsgDOTACompendiumRemoveAllSelections struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Leagueid      *uint32                `protobuf:"varint,1,opt,name=leagueid" json:"leagueid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTACompendiumRemoveAllSelections) Reset() {
	*x = CMsgDOTACompendiumRemoveAllSelections{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumRemoveAllSelections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumRemoveAllSelections) ProtoMessage() {}

func (x *CMsgDOTACompendiumRemoveAllSelections) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumRemoveAllSelections.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumRemoveAllSelections) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{65}
}

func (x *CMsgDOTACompendiumRemoveAllSelections) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

type CMsgDOTACompendiumRemoveAllSelectionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *uint32                `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTACompendiumRemoveAllSelectionsResponse fields.
const (
	Default_CMsgDOTACompendiumRemoveAllSelectionsResponse_Eresult = uint32(2)
)

func (x *CMsgDOTACompendiumRemoveAllSelectionsResponse) Reset() {
	*x = CMsgDOTACompendiumRemoveAllSelectionsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumRemoveAllSelectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumRemoveAllSelectionsResponse) ProtoMessage() {}

func (x *CMsgDOTACompendiumRemoveAllSelectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumRemoveAllSelectionsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumRemoveAllSelectionsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{66}
}

func (x *CMsgDOTACompendiumRemoveAllSelectionsResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgDOTACompendiumRemoveAllSelectionsResponse_Eresult
}

type CMsgDOTACompendiumData struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Selections    []*CMsgDOTACompendiumSelection `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTACompendiumData) Reset() {
	*x = CMsgDOTACompendiumData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumData) ProtoMessage() {}

func (x *CMsgDOTACompendiumData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumData.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{67}
}

func (x *CMsgDOTACompendiumData) GetSelections() []*CMsgDOTACompendiumSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

type CMsgDOTACompendiumDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Leagueid      *uint32                `protobuf:"varint,2,opt,name=leagueid" json:"leagueid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTACompendiumDataRequest) Reset() {
	*x = CMsgDOTACompendiumDataRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumDataRequest) ProtoMessage() {}

func (x *CMsgDOTACompendiumDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumDataRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumDataRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{68}
}

func (x *CMsgDOTACompendiumDataRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTACompendiumDataRequest) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

type CMsgDOTACompendiumDataResponse struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	AccountId      *uint32                 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Leagueid       *uint32                 `protobuf:"varint,2,opt,name=leagueid" json:"leagueid,omitempty"`
	Result         *uint32                 `protobuf:"varint,3,opt,name=result,def=2" json:"result,omitempty"`
	CompendiumData *CMsgDOTACompendiumData `protobuf:"bytes,4,opt,name=compendium_data,json=compendiumData" json:"compendium_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgDOTACompendiumDataResponse fields.
const (
	Default_CMsgDOTACompendiumDataResponse_Result = uint32(2)
)

func (x *CMsgDOTACompendiumDataResponse) Reset() {
	*x = CMsgDOTACompendiumDataResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACompendiumDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACompendiumDataResponse) ProtoMessage() {}

func (x *CMsgDOTACompendiumDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACompendiumDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTACompendiumDataResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{69}
}

func (x *CMsgDOTACompendiumDataResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTACompendiumDataResponse) GetLeagueid() uint32 {
	if x != nil && x.Leagueid != nil {
		return *x.Leagueid
	}
	return 0
}

func (x *CMsgDOTACompendiumDataResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTACompendiumDataResponse_Result
}

func (x *CMsgDOTACompendiumDataResponse) GetCompendiumData() *CMsgDOTACompendiumData {
	if x != nil {
		return x.CompendiumData
	}
	return nil
}

type CMsgDOTAGetPlayerMatchHistory struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	AccountId              *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	StartAtMatchId         *uint64                `protobuf:"varint,2,opt,name=start_at_match_id,json=startAtMatchId" json:"start_at_match_id,omitempty"`
	MatchesRequested       *uint32                `protobuf:"varint,3,opt,name=matches_requested,json=matchesRequested" json:"matches_requested,omitempty"`
	HeroId                 *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	RequestId              *uint32                `protobuf:"varint,5,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	IncludePracticeMatches *bool                  `protobuf:"varint,7,opt,name=include_practice_matches,json=includePracticeMatches" json:"include_practice_matches,omitempty"`
	IncludeCustomGames     *bool                  `protobuf:"varint,8,opt,name=include_custom_games,json=includeCustomGames" json:"include_custom_games,omitempty"`
	IncludeEventGames      *bool                  `protobuf:"varint,9,opt,name=include_event_games,json=includeEventGames" json:"include_event_games,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgDOTAGetPlayerMatchHistory) Reset() {
	*x = CMsgDOTAGetPlayerMatchHistory{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetPlayerMatchHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetPlayerMatchHistory) ProtoMessage() {}

func (x *CMsgDOTAGetPlayerMatchHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetPlayerMatchHistory.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetPlayerMatchHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{70}
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetStartAtMatchId() uint64 {
	if x != nil && x.StartAtMatchId != nil {
		return *x.StartAtMatchId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetMatchesRequested() uint32 {
	if x != nil && x.MatchesRequested != nil {
		return *x.MatchesRequested
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetIncludePracticeMatches() bool {
	if x != nil && x.IncludePracticeMatches != nil {
		return *x.IncludePracticeMatches
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetIncludeCustomGames() bool {
	if x != nil && x.IncludeCustomGames != nil {
		return *x.IncludeCustomGames
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistory) GetIncludeEventGames() bool {
	if x != nil && x.IncludeEventGames != nil {
		return *x.IncludeEventGames
	}
	return false
}

type CMsgDOTAGetPlayerMatchHistoryResponse struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Matches       []*CMsgDOTAGetPlayerMatchHistoryResponse_Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	RequestId     *uint32                                        `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse) Reset() {
	*x = CMsgDOTAGetPlayerMatchHistoryResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetPlayerMatchHistoryResponse) ProtoMessage() {}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetPlayerMatchHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetPlayerMatchHistoryResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{71}
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse) GetMatches() []*CMsgDOTAGetPlayerMatchHistoryResponse_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type CMsgGCNotificationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCNotificationsRequest) Reset() {
	*x = CMsgGCNotificationsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotificationsRequest) ProtoMessage() {}

func (x *CMsgGCNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotificationsRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{72}
}

type CMsgGCNotifications_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type          *uint32                `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Timestamp     *uint32                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	ReferenceA    *uint32                `protobuf:"varint,4,opt,name=reference_a,json=referenceA" json:"reference_a,omitempty"`
	ReferenceB    *uint32                `protobuf:"varint,5,opt,name=reference_b,json=referenceB" json:"reference_b,omitempty"`
	ReferenceC    *uint32                `protobuf:"varint,6,opt,name=reference_c,json=referenceC" json:"reference_c,omitempty"`
	Message       *string                `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
	Unread        *bool                  `protobuf:"varint,8,opt,name=unread" json:"unread,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCNotifications_Notification) Reset() {
	*x = CMsgGCNotifications_Notification{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCNotifications_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotifications_Notification) ProtoMessage() {}

func (x *CMsgGCNotifications_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotifications_Notification.ProtoReflect.Descriptor instead.
func (*CMsgGCNotifications_Notification) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{73}
}

func (x *CMsgGCNotifications_Notification) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgGCNotifications_Notification) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CMsgGCNotifications_Notification) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgGCNotifications_Notification) GetReferenceA() uint32 {
	if x != nil && x.ReferenceA != nil {
		return *x.ReferenceA
	}
	return 0
}

func (x *CMsgGCNotifications_Notification) GetReferenceB() uint32 {
	if x != nil && x.ReferenceB != nil {
		return *x.ReferenceB
	}
	return 0
}

func (x *CMsgGCNotifications_Notification) GetReferenceC() uint32 {
	if x != nil && x.ReferenceC != nil {
		return *x.ReferenceC
	}
	return 0
}

func (x *CMsgGCNotifications_Notification) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgGCNotifications_Notification) GetUnread() bool {
	if x != nil && x.Unread != nil {
		return *x.Unread
	}
	return false
}

type CMsgGCNotificationsUpdate struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Result        *CMsgGCNotificationsUpdate_EResult  `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCNotificationsUpdate_EResult,def=0" json:"result,omitempty"`
	Notifications []*CMsgGCNotifications_Notification `protobuf:"bytes,2,rep,name=notifications" json:"notifications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCNotificationsUpdate fields.
const (
	Default_CMsgGCNotificationsUpdate_Result = CMsgGCNotificationsUpdate_SUCCESS
)

func (x *CMsgGCNotificationsUpdate) Reset() {
	*x = CMsgGCNotificationsUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCNotificationsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotificationsUpdate) ProtoMessage() {}

func (x *CMsgGCNotificationsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotificationsUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCNotificationsUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{74}
}

func (x *CMsgGCNotificationsUpdate) GetResult() CMsgGCNotificationsUpdate_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCNotificationsUpdate_Result
}

func (x *CMsgGCNotificationsUpdate) GetNotifications() []*CMsgGCNotifications_Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type CMsgGCNotificationsResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Update        *CMsgGCNotificationsUpdate `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCNotificationsResponse) Reset() {
	*x = CMsgGCNotificationsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotificationsResponse) ProtoMessage() {}

func (x *CMsgGCNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotificationsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{75}
}

func (x *CMsgGCNotificationsResponse) GetUpdate() *CMsgGCNotificationsUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

type CMsgGCNotificationsMarkReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCNotificationsMarkReadRequest) Reset() {
	*x = CMsgGCNotificationsMarkReadRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCNotificationsMarkReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCNotificationsMarkReadRequest) ProtoMessage() {}

func (x *CMsgGCNotificationsMarkReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCNotificationsMarkReadRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCNotificationsMarkReadRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{76}
}

type CMsgGCPlayerInfoSubmit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CountryCode   *string                `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	FantasyRole   *uint32                `protobuf:"varint,3,opt,name=fantasy_role,json=fantasyRole" json:"fantasy_role,omitempty"`
	TeamId        *uint32                `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Sponsor       *string                `protobuf:"bytes,5,opt,name=sponsor" json:"sponsor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCPlayerInfoSubmit) Reset() {
	*x = CMsgGCPlayerInfoSubmit{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCPlayerInfoSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCPlayerInfoSubmit) ProtoMessage() {}

func (x *CMsgGCPlayerInfoSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCPlayerInfoSubmit.ProtoReflect.Descriptor instead.
func (*CMsgGCPlayerInfoSubmit) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{77}
}

func (x *CMsgGCPlayerInfoSubmit) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCPlayerInfoSubmit) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CMsgGCPlayerInfoSubmit) GetFantasyRole() uint32 {
	if x != nil && x.FantasyRole != nil {
		return *x.FantasyRole
	}
	return 0
}

func (x *CMsgGCPlayerInfoSubmit) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgGCPlayerInfoSubmit) GetSponsor() string {
	if x != nil && x.Sponsor != nil {
		return *x.Sponsor
	}
	return ""
}

type CMsgGCPlayerInfoSubmitResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Result        *CMsgGCPlayerInfoSubmitResponse_EResult `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCPlayerInfoSubmitResponse_EResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCPlayerInfoSubmitResponse fields.
const (
	Default_CMsgGCPlayerInfoSubmitResponse_Result = CMsgGCPlayerInfoSubmitResponse_SUCCESS
)

func (x *CMsgGCPlayerInfoSubmitResponse) Reset() {
	*x = CMsgGCPlayerInfoSubmitResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCPlayerInfoSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCPlayerInfoSubmitResponse) ProtoMessage() {}

func (x *CMsgGCPlayerInfoSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCPlayerInfoSubmitResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCPlayerInfoSubmitResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{78}
}

func (x *CMsgGCPlayerInfoSubmitResponse) GetResult() CMsgGCPlayerInfoSubmitResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCPlayerInfoSubmitResponse_Result
}

type CMsgDOTAEmoticonAccessSDO struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountId         *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	UnlockedEmoticons []byte                 `protobuf:"bytes,2,opt,name=unlocked_emoticons,json=unlockedEmoticons" json:"unlocked_emoticons,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgDOTAEmoticonAccessSDO) Reset() {
	*x = CMsgDOTAEmoticonAccessSDO{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAEmoticonAccessSDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAEmoticonAccessSDO) ProtoMessage() {}

func (x *CMsgDOTAEmoticonAccessSDO) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAEmoticonAccessSDO.ProtoReflect.Descriptor instead.
func (*CMsgDOTAEmoticonAccessSDO) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{79}
}

func (x *CMsgDOTAEmoticonAccessSDO) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAEmoticonAccessSDO) GetUnlockedEmoticons() []byte {
	if x != nil {
		return x.UnlockedEmoticons
	}
	return nil
}

type CMsgClientToGCEmoticonDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCEmoticonDataRequest) Reset() {
	*x = CMsgClientToGCEmoticonDataRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCEmoticonDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCEmoticonDataRequest) ProtoMessage() {}

func (x *CMsgClientToGCEmoticonDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCEmoticonDataRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCEmoticonDataRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{80}
}

type CMsgGCToClientEmoticonData struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	EmoticonAccess *CMsgDOTAEmoticonAccessSDO `protobuf:"bytes,1,opt,name=emoticon_access,json=emoticonAccess" json:"emoticon_access,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCToClientEmoticonData) Reset() {
	*x = CMsgGCToClientEmoticonData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientEmoticonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientEmoticonData) ProtoMessage() {}

func (x *CMsgGCToClientEmoticonData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientEmoticonData.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientEmoticonData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{81}
}

func (x *CMsgGCToClientEmoticonData) GetEmoticonAccess() *CMsgDOTAEmoticonAccessSDO {
	if x != nil {
		return x.EmoticonAccess
	}
	return nil
}

type CMsgGCToClientTournamentItemDrop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemDef       *uint32                `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	EventType     *uint32                `protobuf:"varint,2,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientTournamentItemDrop) Reset() {
	*x = CMsgGCToClientTournamentItemDrop{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientTournamentItemDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTournamentItemDrop) ProtoMessage() {}

func (x *CMsgGCToClientTournamentItemDrop) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTournamentItemDrop.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTournamentItemDrop) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{82}
}

func (x *CMsgGCToClientTournamentItemDrop) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgGCToClientTournamentItemDrop) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

type CMsgClientToGCGetAllHeroOrder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetAllHeroOrder) Reset() {
	*x = CMsgClientToGCGetAllHeroOrder{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetAllHeroOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAllHeroOrder) ProtoMessage() {}

func (x *CMsgClientToGCGetAllHeroOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAllHeroOrder.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAllHeroOrder) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{83}
}

type CMsgClientToGCGetAllHeroOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroIds       []int32                `protobuf:"varint,1,rep,name=hero_ids,json=heroIds" json:"hero_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetAllHeroOrderResponse) Reset() {
	*x = CMsgClientToGCGetAllHeroOrderResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetAllHeroOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAllHeroOrderResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetAllHeroOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAllHeroOrderResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAllHeroOrderResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{84}
}

func (x *CMsgClientToGCGetAllHeroOrderResponse) GetHeroIds() []int32 {
	if x != nil {
		return x.HeroIds
	}
	return nil
}

type CMsgClientToGCGetAllHeroProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetAllHeroProgress) Reset() {
	*x = CMsgClientToGCGetAllHeroProgress{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetAllHeroProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAllHeroProgress) ProtoMessage() {}

func (x *CMsgClientToGCGetAllHeroProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAllHeroProgress.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAllHeroProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{85}
}

func (x *CMsgClientToGCGetAllHeroProgress) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCGetAllHeroProgressResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccountId          *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	CurrHeroId         *int32                 `protobuf:"varint,2,opt,name=curr_hero_id,json=currHeroId" json:"curr_hero_id,omitempty"`
	LapsCompleted      *uint32                `protobuf:"varint,3,opt,name=laps_completed,json=lapsCompleted" json:"laps_completed,omitempty"`
	CurrHeroGames      *uint32                `protobuf:"varint,4,opt,name=curr_hero_games,json=currHeroGames" json:"curr_hero_games,omitempty"`
	CurrLapTimeStarted *uint32                `protobuf:"varint,5,opt,name=curr_lap_time_started,json=currLapTimeStarted" json:"curr_lap_time_started,omitempty"`
	CurrLapGames       *uint32                `protobuf:"varint,6,opt,name=curr_lap_games,json=currLapGames" json:"curr_lap_games,omitempty"`
	BestLapGames       *uint32                `protobuf:"varint,7,opt,name=best_lap_games,json=bestLapGames" json:"best_lap_games,omitempty"`
	BestLapTime        *uint32                `protobuf:"varint,8,opt,name=best_lap_time,json=bestLapTime" json:"best_lap_time,omitempty"`
	LapHeroesCompleted *uint32                `protobuf:"varint,9,opt,name=lap_heroes_completed,json=lapHeroesCompleted" json:"lap_heroes_completed,omitempty"`
	LapHeroesRemaining *uint32                `protobuf:"varint,10,opt,name=lap_heroes_remaining,json=lapHeroesRemaining" json:"lap_heroes_remaining,omitempty"`
	NextHeroId         *int32                 `protobuf:"varint,11,opt,name=next_hero_id,json=nextHeroId" json:"next_hero_id,omitempty"`
	PrevHeroId         *int32                 `protobuf:"varint,12,opt,name=prev_hero_id,json=prevHeroId" json:"prev_hero_id,omitempty"`
	PrevHeroGames      *uint32                `protobuf:"varint,13,opt,name=prev_hero_games,json=prevHeroGames" json:"prev_hero_games,omitempty"`
	PrevAvgTries       *float32               `protobuf:"fixed32,14,opt,name=prev_avg_tries,json=prevAvgTries" json:"prev_avg_tries,omitempty"`
	CurrAvgTries       *float32               `protobuf:"fixed32,15,opt,name=curr_avg_tries,json=currAvgTries" json:"curr_avg_tries,omitempty"`
	NextAvgTries       *float32               `protobuf:"fixed32,16,opt,name=next_avg_tries,json=nextAvgTries" json:"next_avg_tries,omitempty"`
	FullLapAvgTries    *float32               `protobuf:"fixed32,17,opt,name=full_lap_avg_tries,json=fullLapAvgTries" json:"full_lap_avg_tries,omitempty"`
	CurrLapAvgTries    *float32               `protobuf:"fixed32,18,opt,name=curr_lap_avg_tries,json=currLapAvgTries" json:"curr_lap_avg_tries,omitempty"`
	ProfileName        *string                `protobuf:"bytes,19,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
	StartHeroId        *int32                 `protobuf:"varint,20,opt,name=start_hero_id,json=startHeroId" json:"start_hero_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) Reset() {
	*x = CMsgClientToGCGetAllHeroProgressResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetAllHeroProgressResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetAllHeroProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetAllHeroProgressResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetAllHeroProgressResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{86}
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetCurrHeroId() int32 {
	if x != nil && x.CurrHeroId != nil {
		return *x.CurrHeroId
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetLapsCompleted() uint32 {
	if x != nil && x.LapsCompleted != nil {
		return *x.LapsCompleted
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetCurrHeroGames() uint32 {
	if x != nil && x.CurrHeroGames != nil {
		return *x.CurrHeroGames
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetCurrLapTimeStarted() uint32 {
	if x != nil && x.CurrLapTimeStarted != nil {
		return *x.CurrLapTimeStarted
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetCurrLapGames() uint32 {
	if x != nil && x.CurrLapGames != nil {
		return *x.CurrLapGames
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetBestLapGames() uint32 {
	if x != nil && x.BestLapGames != nil {
		return *x.BestLapGames
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetBestLapTime() uint32 {
	if x != nil && x.BestLapTime != nil {
		return *x.BestLapTime
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetLapHeroesCompleted() uint32 {
	if x != nil && x.LapHeroesCompleted != nil {
		return *x.LapHeroesCompleted
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetLapHeroesRemaining() uint32 {
	if x != nil && x.LapHeroesRemaining != nil {
		return *x.LapHeroesRemaining
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetNextHeroId() int32 {
	if x != nil && x.NextHeroId != nil {
		return *x.NextHeroId
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetPrevHeroId() int32 {
	if x != nil && x.PrevHeroId != nil {
		return *x.PrevHeroId
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetPrevHeroGames() uint32 {
	if x != nil && x.PrevHeroGames != nil {
		return *x.PrevHeroGames
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetPrevAvgTries() float32 {
	if x != nil && x.PrevAvgTries != nil {
		return *x.PrevAvgTries
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetCurrAvgTries() float32 {
	if x != nil && x.CurrAvgTries != nil {
		return *x.CurrAvgTries
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetNextAvgTries() float32 {
	if x != nil && x.NextAvgTries != nil {
		return *x.NextAvgTries
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetFullLapAvgTries() float32 {
	if x != nil && x.FullLapAvgTries != nil {
		return *x.FullLapAvgTries
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetCurrLapAvgTries() float32 {
	if x != nil && x.CurrLapAvgTries != nil {
		return *x.CurrLapAvgTries
	}
	return 0
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetProfileName() string {
	if x != nil && x.ProfileName != nil {
		return *x.ProfileName
	}
	return ""
}

func (x *CMsgClientToGCGetAllHeroProgressResponse) GetStartHeroId() int32 {
	if x != nil && x.StartHeroId != nil {
		return *x.StartHeroId
	}
	return 0
}

type CMsgClientToGCGetTrophyList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetTrophyList) Reset() {
	*x = CMsgClientToGCGetTrophyList{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetTrophyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetTrophyList) ProtoMessage() {}

func (x *CMsgClientToGCGetTrophyList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetTrophyList.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetTrophyList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{87}
}

func (x *CMsgClientToGCGetTrophyList) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCGetTrophyListResponse struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Trophies      []*CMsgClientToGCGetTrophyListResponse_Trophy `protobuf:"bytes,2,rep,name=trophies" json:"trophies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetTrophyListResponse) Reset() {
	*x = CMsgClientToGCGetTrophyListResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetTrophyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetTrophyListResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetTrophyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetTrophyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetTrophyListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{88}
}

func (x *CMsgClientToGCGetTrophyListResponse) GetTrophies() []*CMsgClientToGCGetTrophyListResponse_Trophy {
	if x != nil {
		return x.Trophies
	}
	return nil
}

type CMsgGCToClientTrophyAwarded struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TrophyId       *uint32                `protobuf:"varint,1,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	TrophyScore    *uint32                `protobuf:"varint,2,opt,name=trophy_score,json=trophyScore" json:"trophy_score,omitempty"`
	TrophyOldScore *uint32                `protobuf:"varint,3,opt,name=trophy_old_score,json=trophyOldScore" json:"trophy_old_score,omitempty"`
	LastUpdated    *uint32                `protobuf:"varint,4,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCToClientTrophyAwarded) Reset() {
	*x = CMsgGCToClientTrophyAwarded{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientTrophyAwarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientTrophyAwarded) ProtoMessage() {}

func (x *CMsgGCToClientTrophyAwarded) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientTrophyAwarded.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientTrophyAwarded) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{89}
}

func (x *CMsgGCToClientTrophyAwarded) GetTrophyId() uint32 {
	if x != nil && x.TrophyId != nil {
		return *x.TrophyId
	}
	return 0
}

func (x *CMsgGCToClientTrophyAwarded) GetTrophyScore() uint32 {
	if x != nil && x.TrophyScore != nil {
		return *x.TrophyScore
	}
	return 0
}

func (x *CMsgGCToClientTrophyAwarded) GetTrophyOldScore() uint32 {
	if x != nil && x.TrophyOldScore != nil {
		return *x.TrophyOldScore
	}
	return 0
}

func (x *CMsgGCToClientTrophyAwarded) GetLastUpdated() uint32 {
	if x != nil && x.LastUpdated != nil {
		return *x.LastUpdated
	}
	return 0
}

type CMsgClientToGCRankRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RankType      *ERankType             `protobuf:"varint,1,opt,name=rank_type,json=rankType,enum=protocol.ERankType,def=0" json:"rank_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRankRequest fields.
const (
	Default_CMsgClientToGCRankRequest_RankType = ERankType_k_ERankType_Invalid
)

func (x *CMsgClientToGCRankRequest) Reset() {
	*x = CMsgClientToGCRankRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRankRequest) ProtoMessage() {}

func (x *CMsgClientToGCRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRankRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRankRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{90}
}

func (x *CMsgClientToGCRankRequest) GetRankType() ERankType {
	if x != nil && x.RankType != nil {
		return *x.RankType
	}
	return Default_CMsgClientToGCRankRequest_RankType
}

type CMsgGCToClientRankResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Result        *CMsgGCToClientRankResponse_EResultCode `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCToClientRankResponse_EResultCode,def=0" json:"result,omitempty"`
	RankValue     *uint32                                 `protobuf:"varint,2,opt,name=rank_value,json=rankValue" json:"rank_value,omitempty"`
	RankData1     *uint32                                 `protobuf:"varint,3,opt,name=rank_data1,json=rankData1" json:"rank_data1,omitempty"`
	RankData2     *uint32                                 `protobuf:"varint,4,opt,name=rank_data2,json=rankData2" json:"rank_data2,omitempty"`
	RankData3     *uint32                                 `protobuf:"varint,5,opt,name=rank_data3,json=rankData3" json:"rank_data3,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientRankResponse fields.
const (
	Default_CMsgGCToClientRankResponse_Result = CMsgGCToClientRankResponse_k_Succeeded
)

func (x *CMsgGCToClientRankResponse) Reset() {
	*x = CMsgGCToClientRankResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRankResponse) ProtoMessage() {}

func (x *CMsgGCToClientRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRankResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRankResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{91}
}

func (x *CMsgGCToClientRankResponse) GetResult() CMsgGCToClientRankResponse_EResultCode {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToClientRankResponse_Result
}

func (x *CMsgGCToClientRankResponse) GetRankValue() uint32 {
	if x != nil && x.RankValue != nil {
		return *x.RankValue
	}
	return 0
}

func (x *CMsgGCToClientRankResponse) GetRankData1() uint32 {
	if x != nil && x.RankData1 != nil {
		return *x.RankData1
	}
	return 0
}

func (x *CMsgGCToClientRankResponse) GetRankData2() uint32 {
	if x != nil && x.RankData2 != nil {
		return *x.RankData2
	}
	return 0
}

func (x *CMsgGCToClientRankResponse) GetRankData3() uint32 {
	if x != nil && x.RankData3 != nil {
		return *x.RankData3
	}
	return 0
}

type CMsgGCToClientRankUpdate struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	RankType      *ERankType                  `protobuf:"varint,1,opt,name=rank_type,json=rankType,enum=protocol.ERankType,def=0" json:"rank_type,omitempty"`
	RankInfo      *CMsgGCToClientRankResponse `protobuf:"bytes,2,opt,name=rank_info,json=rankInfo" json:"rank_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientRankUpdate fields.
const (
	Default_CMsgGCToClientRankUpdate_RankType = ERankType_k_ERankType_Invalid
)

func (x *CMsgGCToClientRankUpdate) Reset() {
	*x = CMsgGCToClientRankUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientRankUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRankUpdate) ProtoMessage() {}

func (x *CMsgGCToClientRankUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRankUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRankUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{92}
}

func (x *CMsgGCToClientRankUpdate) GetRankType() ERankType {
	if x != nil && x.RankType != nil {
		return *x.RankType
	}
	return Default_CMsgGCToClientRankUpdate_RankType
}

func (x *CMsgGCToClientRankUpdate) GetRankInfo() *CMsgGCToClientRankResponse {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

type CMsgClientToGCGetProfileCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetProfileCard) Reset() {
	*x = CMsgClientToGCGetProfileCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetProfileCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetProfileCard) ProtoMessage() {}

func (x *CMsgClientToGCGetProfileCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetProfileCard.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetProfileCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{93}
}

func (x *CMsgClientToGCGetProfileCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCSetProfileCardSlots struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Slots         []*CMsgClientToGCSetProfileCardSlots_CardSlot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSetProfileCardSlots) Reset() {
	*x = CMsgClientToGCSetProfileCardSlots{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetProfileCardSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetProfileCardSlots) ProtoMessage() {}

func (x *CMsgClientToGCSetProfileCardSlots) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetProfileCardSlots.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetProfileCardSlots) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{94}
}

func (x *CMsgClientToGCSetProfileCardSlots) GetSlots() []*CMsgClientToGCSetProfileCardSlots_CardSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type CMsgClientToGCGetProfileCardStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetProfileCardStats) Reset() {
	*x = CMsgClientToGCGetProfileCardStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetProfileCardStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetProfileCardStats) ProtoMessage() {}

func (x *CMsgClientToGCGetProfileCardStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetProfileCardStats.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetProfileCardStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{95}
}

type CMsgClientToGCCreateHeroStatue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SourceItemId   *uint64                `protobuf:"varint,1,opt,name=source_item_id,json=sourceItemId" json:"source_item_id,omitempty"`
	HeroId         *int32                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	SequenceName   *string                `protobuf:"bytes,4,opt,name=sequence_name,json=sequenceName" json:"sequence_name,omitempty"`
	Cycle          *float32               `protobuf:"fixed32,5,opt,name=cycle" json:"cycle,omitempty"`
	Wearables      []uint32               `protobuf:"varint,6,rep,name=wearables" json:"wearables,omitempty"`
	Inscription    *string                `protobuf:"bytes,7,opt,name=inscription" json:"inscription,omitempty"`
	Styles         []uint32               `protobuf:"varint,8,rep,name=styles" json:"styles,omitempty"`
	ReforgerItemId *uint64                `protobuf:"varint,9,opt,name=reforger_item_id,json=reforgerItemId" json:"reforger_item_id,omitempty"`
	TournamentDrop *bool                  `protobuf:"varint,10,opt,name=tournament_drop,json=tournamentDrop" json:"tournament_drop,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCCreateHeroStatue) Reset() {
	*x = CMsgClientToGCCreateHeroStatue{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreateHeroStatue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateHeroStatue) ProtoMessage() {}

func (x *CMsgClientToGCCreateHeroStatue) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateHeroStatue.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateHeroStatue) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{96}
}

func (x *CMsgClientToGCCreateHeroStatue) GetSourceItemId() uint64 {
	if x != nil && x.SourceItemId != nil {
		return *x.SourceItemId
	}
	return 0
}

func (x *CMsgClientToGCCreateHeroStatue) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCCreateHeroStatue) GetSequenceName() string {
	if x != nil && x.SequenceName != nil {
		return *x.SequenceName
	}
	return ""
}

func (x *CMsgClientToGCCreateHeroStatue) GetCycle() float32 {
	if x != nil && x.Cycle != nil {
		return *x.Cycle
	}
	return 0
}

func (x *CMsgClientToGCCreateHeroStatue) GetWearables() []uint32 {
	if x != nil {
		return x.Wearables
	}
	return nil
}

func (x *CMsgClientToGCCreateHeroStatue) GetInscription() string {
	if x != nil && x.Inscription != nil {
		return *x.Inscription
	}
	return ""
}

func (x *CMsgClientToGCCreateHeroStatue) GetStyles() []uint32 {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *CMsgClientToGCCreateHeroStatue) GetReforgerItemId() uint64 {
	if x != nil && x.ReforgerItemId != nil {
		return *x.ReforgerItemId
	}
	return 0
}

func (x *CMsgClientToGCCreateHeroStatue) GetTournamentDrop() bool {
	if x != nil && x.TournamentDrop != nil {
		return *x.TournamentDrop
	}
	return false
}

type CMsgGCToClientHeroStatueCreateResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ResultingItemId *uint64                `protobuf:"varint,1,opt,name=resulting_item_id,json=resultingItemId" json:"resulting_item_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCToClientHeroStatueCreateResult) Reset() {
	*x = CMsgGCToClientHeroStatueCreateResult{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientHeroStatueCreateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientHeroStatueCreateResult) ProtoMessage() {}

func (x *CMsgGCToClientHeroStatueCreateResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientHeroStatueCreateResult.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientHeroStatueCreateResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{97}
}

func (x *CMsgGCToClientHeroStatueCreateResult) GetResultingItemId() uint64 {
	if x != nil && x.ResultingItemId != nil {
		return *x.ResultingItemId
	}
	return 0
}

type CMsgClientToGCPlayerStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCPlayerStatsRequest) Reset() {
	*x = CMsgClientToGCPlayerStatsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlayerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlayerStatsRequest) ProtoMessage() {}

func (x *CMsgClientToGCPlayerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlayerStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlayerStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{98}
}

func (x *CMsgClientToGCPlayerStatsRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCToClientPlayerStatsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountId         *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerStats       []float32              `protobuf:"fixed32,2,rep,name=player_stats,json=playerStats" json:"player_stats,omitempty"`
	MatchCount        *uint32                `protobuf:"varint,3,opt,name=match_count,json=matchCount" json:"match_count,omitempty"`
	MeanGpm           *float32               `protobuf:"fixed32,4,opt,name=mean_gpm,json=meanGpm" json:"mean_gpm,omitempty"`
	MeanXppm          *float32               `protobuf:"fixed32,5,opt,name=mean_xppm,json=meanXppm" json:"mean_xppm,omitempty"`
	MeanLasthits      *float32               `protobuf:"fixed32,6,opt,name=mean_lasthits,json=meanLasthits" json:"mean_lasthits,omitempty"`
	Rampages          *uint32                `protobuf:"varint,7,opt,name=rampages" json:"rampages,omitempty"`
	TripleKills       *uint32                `protobuf:"varint,8,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	FirstBloodClaimed *uint32                `protobuf:"varint,9,opt,name=first_blood_claimed,json=firstBloodClaimed" json:"first_blood_claimed,omitempty"`
	FirstBloodGiven   *uint32                `protobuf:"varint,10,opt,name=first_blood_given,json=firstBloodGiven" json:"first_blood_given,omitempty"`
	CouriersKilled    *uint32                `protobuf:"varint,11,opt,name=couriers_killed,json=couriersKilled" json:"couriers_killed,omitempty"`
	AegisesSnatched   *uint32                `protobuf:"varint,12,opt,name=aegises_snatched,json=aegisesSnatched" json:"aegises_snatched,omitempty"`
	CheesesEaten      *uint32                `protobuf:"varint,13,opt,name=cheeses_eaten,json=cheesesEaten" json:"cheeses_eaten,omitempty"`
	CreepsStacked     *uint32                `protobuf:"varint,14,opt,name=creeps_stacked,json=creepsStacked" json:"creeps_stacked,omitempty"`
	FightScore        *float32               `protobuf:"fixed32,15,opt,name=fight_score,json=fightScore" json:"fight_score,omitempty"`
	FarmScore         *float32               `protobuf:"fixed32,16,opt,name=farm_score,json=farmScore" json:"farm_score,omitempty"`
	SupportScore      *float32               `protobuf:"fixed32,17,opt,name=support_score,json=supportScore" json:"support_score,omitempty"`
	PushScore         *float32               `protobuf:"fixed32,18,opt,name=push_score,json=pushScore" json:"push_score,omitempty"`
	VersatilityScore  *float32               `protobuf:"fixed32,19,opt,name=versatility_score,json=versatilityScore" json:"versatility_score,omitempty"`
	MeanNetworth      *float32               `protobuf:"fixed32,20,opt,name=mean_networth,json=meanNetworth" json:"mean_networth,omitempty"`
	MeanDamage        *float32               `protobuf:"fixed32,21,opt,name=mean_damage,json=meanDamage" json:"mean_damage,omitempty"`
	MeanHeals         *float32               `protobuf:"fixed32,22,opt,name=mean_heals,json=meanHeals" json:"mean_heals,omitempty"`
	RapiersPurchased  *uint32                `protobuf:"varint,23,opt,name=rapiers_purchased,json=rapiersPurchased" json:"rapiers_purchased,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGCToClientPlayerStatsResponse) Reset() {
	*x = CMsgGCToClientPlayerStatsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPlayerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPlayerStatsResponse) ProtoMessage() {}

func (x *CMsgGCToClientPlayerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPlayerStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPlayerStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{99}
}

func (x *CMsgGCToClientPlayerStatsResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetPlayerStats() []float32 {
	if x != nil {
		return x.PlayerStats
	}
	return nil
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMatchCount() uint32 {
	if x != nil && x.MatchCount != nil {
		return *x.MatchCount
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMeanGpm() float32 {
	if x != nil && x.MeanGpm != nil {
		return *x.MeanGpm
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMeanXppm() float32 {
	if x != nil && x.MeanXppm != nil {
		return *x.MeanXppm
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMeanLasthits() float32 {
	if x != nil && x.MeanLasthits != nil {
		return *x.MeanLasthits
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetRampages() uint32 {
	if x != nil && x.Rampages != nil {
		return *x.Rampages
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetTripleKills() uint32 {
	if x != nil && x.TripleKills != nil {
		return *x.TripleKills
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetFirstBloodClaimed() uint32 {
	if x != nil && x.FirstBloodClaimed != nil {
		return *x.FirstBloodClaimed
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetFirstBloodGiven() uint32 {
	if x != nil && x.FirstBloodGiven != nil {
		return *x.FirstBloodGiven
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetCouriersKilled() uint32 {
	if x != nil && x.CouriersKilled != nil {
		return *x.CouriersKilled
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetAegisesSnatched() uint32 {
	if x != nil && x.AegisesSnatched != nil {
		return *x.AegisesSnatched
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetCheesesEaten() uint32 {
	if x != nil && x.CheesesEaten != nil {
		return *x.CheesesEaten
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetCreepsStacked() uint32 {
	if x != nil && x.CreepsStacked != nil {
		return *x.CreepsStacked
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetFightScore() float32 {
	if x != nil && x.FightScore != nil {
		return *x.FightScore
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetFarmScore() float32 {
	if x != nil && x.FarmScore != nil {
		return *x.FarmScore
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetSupportScore() float32 {
	if x != nil && x.SupportScore != nil {
		return *x.SupportScore
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetPushScore() float32 {
	if x != nil && x.PushScore != nil {
		return *x.PushScore
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetVersatilityScore() float32 {
	if x != nil && x.VersatilityScore != nil {
		return *x.VersatilityScore
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMeanNetworth() float32 {
	if x != nil && x.MeanNetworth != nil {
		return *x.MeanNetworth
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMeanDamage() float32 {
	if x != nil && x.MeanDamage != nil {
		return *x.MeanDamage
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetMeanHeals() float32 {
	if x != nil && x.MeanHeals != nil {
		return *x.MeanHeals
	}
	return 0
}

func (x *CMsgGCToClientPlayerStatsResponse) GetRapiersPurchased() uint32 {
	if x != nil && x.RapiersPurchased != nil {
		return *x.RapiersPurchased
	}
	return 0
}

type CMsgClientToGCCustomGamesFriendsPlayedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCCustomGamesFriendsPlayedRequest) Reset() {
	*x = CMsgClientToGCCustomGamesFriendsPlayedRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCustomGamesFriendsPlayedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCustomGamesFriendsPlayedRequest) ProtoMessage() {}

func (x *CMsgClientToGCCustomGamesFriendsPlayedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCustomGamesFriendsPlayedRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCustomGamesFriendsPlayedRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{100}
}

type CMsgGCToClientCustomGamesFriendsPlayedResponse struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	AccountId     *uint32                                                      `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Games         []*CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame `protobuf:"bytes,2,rep,name=games" json:"games,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse) Reset() {
	*x = CMsgGCToClientCustomGamesFriendsPlayedResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCustomGamesFriendsPlayedResponse) ProtoMessage() {}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCustomGamesFriendsPlayedResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCustomGamesFriendsPlayedResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{101}
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse) GetGames() []*CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame {
	if x != nil {
		return x.Games
	}
	return nil
}

type CMsgClientToGCSocialFeedPostCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint64                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Comment       *string                `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSocialFeedPostCommentRequest) Reset() {
	*x = CMsgClientToGCSocialFeedPostCommentRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSocialFeedPostCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSocialFeedPostCommentRequest) ProtoMessage() {}

func (x *CMsgClientToGCSocialFeedPostCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSocialFeedPostCommentRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSocialFeedPostCommentRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{102}
}

func (x *CMsgClientToGCSocialFeedPostCommentRequest) GetEventId() uint64 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCSocialFeedPostCommentRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type CMsgGCToClientSocialFeedPostCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientSocialFeedPostCommentResponse) Reset() {
	*x = CMsgGCToClientSocialFeedPostCommentResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientSocialFeedPostCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSocialFeedPostCommentResponse) ProtoMessage() {}

func (x *CMsgGCToClientSocialFeedPostCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSocialFeedPostCommentResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSocialFeedPostCommentResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{103}
}

func (x *CMsgGCToClientSocialFeedPostCommentResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgClientToGCSocialFeedPostMessageRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Message        *string                `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	MatchId        *uint64                `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchTimestamp *uint32                `protobuf:"varint,3,opt,name=match_timestamp,json=matchTimestamp" json:"match_timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCSocialFeedPostMessageRequest) Reset() {
	*x = CMsgClientToGCSocialFeedPostMessageRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSocialFeedPostMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSocialFeedPostMessageRequest) ProtoMessage() {}

func (x *CMsgClientToGCSocialFeedPostMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSocialFeedPostMessageRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSocialFeedPostMessageRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{104}
}

func (x *CMsgClientToGCSocialFeedPostMessageRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CMsgClientToGCSocialFeedPostMessageRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCSocialFeedPostMessageRequest) GetMatchTimestamp() uint32 {
	if x != nil && x.MatchTimestamp != nil {
		return *x.MatchTimestamp
	}
	return 0
}

type CMsgGCToClientSocialFeedPostMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientSocialFeedPostMessageResponse) Reset() {
	*x = CMsgGCToClientSocialFeedPostMessageResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientSocialFeedPostMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientSocialFeedPostMessageResponse) ProtoMessage() {}

func (x *CMsgGCToClientSocialFeedPostMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientSocialFeedPostMessageResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientSocialFeedPostMessageResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{105}
}

func (x *CMsgGCToClientSocialFeedPostMessageResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgClientToGCFriendsPlayedCustomGameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomGameId  *uint64                `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCFriendsPlayedCustomGameRequest) Reset() {
	*x = CMsgClientToGCFriendsPlayedCustomGameRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFriendsPlayedCustomGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFriendsPlayedCustomGameRequest) ProtoMessage() {}

func (x *CMsgClientToGCFriendsPlayedCustomGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFriendsPlayedCustomGameRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFriendsPlayedCustomGameRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{106}
}

func (x *CMsgClientToGCFriendsPlayedCustomGameRequest) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

type CMsgGCToClientFriendsPlayedCustomGameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomGameId  *uint64                `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	AccountIds    []uint32               `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientFriendsPlayedCustomGameResponse) Reset() {
	*x = CMsgGCToClientFriendsPlayedCustomGameResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientFriendsPlayedCustomGameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFriendsPlayedCustomGameResponse) ProtoMessage() {}

func (x *CMsgGCToClientFriendsPlayedCustomGameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFriendsPlayedCustomGameResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFriendsPlayedCustomGameResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{107}
}

func (x *CMsgGCToClientFriendsPlayedCustomGameResponse) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgGCToClientFriendsPlayedCustomGameResponse) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgDOTAPartyRichPresence struct {
	state          protoimpl.MessageState                    `protogen:"open.v1"`
	PartyId        *uint64                                   `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	PartyState     *CSODOTAParty_State                       `protobuf:"varint,2,opt,name=party_state,json=partyState,enum=protocol.CSODOTAParty_State,def=0" json:"party_state,omitempty"`
	Open           *bool                                     `protobuf:"varint,3,opt,name=open" json:"open,omitempty"`
	LowPriority    *bool                                     `protobuf:"varint,5,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	TeamId         *uint32                                   `protobuf:"varint,7,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName       *string                                   `protobuf:"bytes,8,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	UgcTeamUiLogo  *uint64                                   `protobuf:"varint,9,opt,name=ugc_team_ui_logo,json=ugcTeamUiLogo" json:"ugc_team_ui_logo,omitempty"`
	Members        []*CMsgDOTAPartyRichPresence_Member       `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	WeekendTourney *CMsgDOTAPartyRichPresence_WeekendTourney `protobuf:"bytes,6,opt,name=weekend_tourney,json=weekendTourney" json:"weekend_tourney,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgDOTAPartyRichPresence fields.
const (
	Default_CMsgDOTAPartyRichPresence_PartyState = CSODOTAParty_UI
)

func (x *CMsgDOTAPartyRichPresence) Reset() {
	*x = CMsgDOTAPartyRichPresence{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPartyRichPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPartyRichPresence) ProtoMessage() {}

func (x *CMsgDOTAPartyRichPresence) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPartyRichPresence.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPartyRichPresence) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{108}
}

func (x *CMsgDOTAPartyRichPresence) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence) GetPartyState() CSODOTAParty_State {
	if x != nil && x.PartyState != nil {
		return *x.PartyState
	}
	return Default_CMsgDOTAPartyRichPresence_PartyState
}

func (x *CMsgDOTAPartyRichPresence) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

func (x *CMsgDOTAPartyRichPresence) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CMsgDOTAPartyRichPresence) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAPartyRichPresence) GetUgcTeamUiLogo() uint64 {
	if x != nil && x.UgcTeamUiLogo != nil {
		return *x.UgcTeamUiLogo
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence) GetMembers() []*CMsgDOTAPartyRichPresence_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CMsgDOTAPartyRichPresence) GetWeekendTourney() *CMsgDOTAPartyRichPresence_WeekendTourney {
	if x != nil {
		return x.WeekendTourney
	}
	return nil
}

type CMsgDOTALobbyRichPresence struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LobbyId        *uint64                `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LobbyState     *CSODOTALobby_State    `protobuf:"varint,2,opt,name=lobby_state,json=lobbyState,enum=protocol.CSODOTALobby_State,def=0" json:"lobby_state,omitempty"`
	Password       *bool                  `protobuf:"varint,3,opt,name=password" json:"password,omitempty"`
	GameMode       *DOTA_GameMode         `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=protocol.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	MemberCount    *uint32                `protobuf:"varint,5,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	MaxMemberCount *uint32                `protobuf:"varint,6,opt,name=max_member_count,json=maxMemberCount" json:"max_member_count,omitempty"`
	CustomGameId   *uint64                `protobuf:"fixed64,7,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	Name           *string                `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	LobbyType      *uint32                `protobuf:"varint,9,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgDOTALobbyRichPresence fields.
const (
	Default_CMsgDOTALobbyRichPresence_LobbyState = CSODOTALobby_UI
	Default_CMsgDOTALobbyRichPresence_GameMode   = DOTA_GameMode_DOTA_GAMEMODE_NONE
)

func (x *CMsgDOTALobbyRichPresence) Reset() {
	*x = CMsgDOTALobbyRichPresence{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALobbyRichPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALobbyRichPresence) ProtoMessage() {}

func (x *CMsgDOTALobbyRichPresence) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALobbyRichPresence.ProtoReflect.Descriptor instead.
func (*CMsgDOTALobbyRichPresence) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{109}
}

func (x *CMsgDOTALobbyRichPresence) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTALobbyRichPresence) GetLobbyState() CSODOTALobby_State {
	if x != nil && x.LobbyState != nil {
		return *x.LobbyState
	}
	return Default_CMsgDOTALobbyRichPresence_LobbyState
}

func (x *CMsgDOTALobbyRichPresence) GetPassword() bool {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return false
}

func (x *CMsgDOTALobbyRichPresence) GetGameMode() DOTA_GameMode {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return Default_CMsgDOTALobbyRichPresence_GameMode
}

func (x *CMsgDOTALobbyRichPresence) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

func (x *CMsgDOTALobbyRichPresence) GetMaxMemberCount() uint32 {
	if x != nil && x.MaxMemberCount != nil {
		return *x.MaxMemberCount
	}
	return 0
}

func (x *CMsgDOTALobbyRichPresence) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgDOTALobbyRichPresence) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTALobbyRichPresence) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

type CMsgDOTACustomGameListenServerStartedLoading struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LobbyId       *uint64                `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	CustomGameId  *uint64                `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	LobbyMembers  []uint32               `protobuf:"varint,3,rep,name=lobby_members,json=lobbyMembers" json:"lobby_members,omitempty"`
	StartTime     *uint32                `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTACustomGameListenServerStartedLoading) Reset() {
	*x = CMsgDOTACustomGameListenServerStartedLoading{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACustomGameListenServerStartedLoading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACustomGameListenServerStartedLoading) ProtoMessage() {}

func (x *CMsgDOTACustomGameListenServerStartedLoading) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACustomGameListenServerStartedLoading.ProtoReflect.Descriptor instead.
func (*CMsgDOTACustomGameListenServerStartedLoading) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{110}
}

func (x *CMsgDOTACustomGameListenServerStartedLoading) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTACustomGameListenServerStartedLoading) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgDOTACustomGameListenServerStartedLoading) GetLobbyMembers() []uint32 {
	if x != nil {
		return x.LobbyMembers
	}
	return nil
}

func (x *CMsgDOTACustomGameListenServerStartedLoading) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type CMsgDOTACustomGameClientFinishedLoading struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LobbyId         *uint64                `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LoadingDuration *uint32                `protobuf:"varint,2,opt,name=loading_duration,json=loadingDuration" json:"loading_duration,omitempty"`
	ResultCode      *int32                 `protobuf:"zigzag32,3,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
	ResultString    *string                `protobuf:"bytes,4,opt,name=result_string,json=resultString" json:"result_string,omitempty"`
	SignonStates    *uint32                `protobuf:"varint,5,opt,name=signon_states,json=signonStates" json:"signon_states,omitempty"`
	Comment         *string                `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTACustomGameClientFinishedLoading) Reset() {
	*x = CMsgDOTACustomGameClientFinishedLoading{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTACustomGameClientFinishedLoading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTACustomGameClientFinishedLoading) ProtoMessage() {}

func (x *CMsgDOTACustomGameClientFinishedLoading) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTACustomGameClientFinishedLoading.ProtoReflect.Descriptor instead.
func (*CMsgDOTACustomGameClientFinishedLoading) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{111}
}

func (x *CMsgDOTACustomGameClientFinishedLoading) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgDOTACustomGameClientFinishedLoading) GetLoadingDuration() uint32 {
	if x != nil && x.LoadingDuration != nil {
		return *x.LoadingDuration
	}
	return 0
}

func (x *CMsgDOTACustomGameClientFinishedLoading) GetResultCode() int32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *CMsgDOTACustomGameClientFinishedLoading) GetResultString() string {
	if x != nil && x.ResultString != nil {
		return *x.ResultString
	}
	return ""
}

func (x *CMsgDOTACustomGameClientFinishedLoading) GetSignonStates() uint32 {
	if x != nil && x.SignonStates != nil {
		return *x.SignonStates
	}
	return 0
}

func (x *CMsgDOTACustomGameClientFinishedLoading) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type CMsgClientToGCApplyGemCombiner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId_1      *uint64                `protobuf:"varint,1,opt,name=item_id_1,json=itemId1" json:"item_id_1,omitempty"`
	ItemId_2      *uint64                `protobuf:"varint,2,opt,name=item_id_2,json=itemId2" json:"item_id_2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCApplyGemCombiner) Reset() {
	*x = CMsgClientToGCApplyGemCombiner{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCApplyGemCombiner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCApplyGemCombiner) ProtoMessage() {}

func (x *CMsgClientToGCApplyGemCombiner) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCApplyGemCombiner.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCApplyGemCombiner) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{112}
}

func (x *CMsgClientToGCApplyGemCombiner) GetItemId_1() uint64 {
	if x != nil && x.ItemId_1 != nil {
		return *x.ItemId_1
	}
	return 0
}

func (x *CMsgClientToGCApplyGemCombiner) GetItemId_2() uint64 {
	if x != nil && x.ItemId_2 != nil {
		return *x.ItemId_2
	}
	return 0
}

type CMsgClientToGCH264Unsupported struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCH264Unsupported) Reset() {
	*x = CMsgClientToGCH264Unsupported{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCH264Unsupported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCH264Unsupported) ProtoMessage() {}

func (x *CMsgClientToGCH264Unsupported) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCH264Unsupported.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCH264Unsupported) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{113}
}

type CMsgClientToGCGetQuestProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestIds      []uint32               `protobuf:"varint,1,rep,name=quest_ids,json=questIds" json:"quest_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetQuestProgress) Reset() {
	*x = CMsgClientToGCGetQuestProgress{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetQuestProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetQuestProgress) ProtoMessage() {}

func (x *CMsgClientToGCGetQuestProgress) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetQuestProgress.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetQuestProgress) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{114}
}

func (x *CMsgClientToGCGetQuestProgress) GetQuestIds() []uint32 {
	if x != nil {
		return x.QuestIds
	}
	return nil
}

type CMsgClientToGCGetQuestProgressResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Success       *bool                                           `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Quests        []*CMsgClientToGCGetQuestProgressResponse_Quest `protobuf:"bytes,2,rep,name=quests" json:"quests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetQuestProgressResponse) Reset() {
	*x = CMsgClientToGCGetQuestProgressResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetQuestProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetQuestProgressResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetQuestProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetQuestProgressResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetQuestProgressResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{115}
}

func (x *CMsgClientToGCGetQuestProgressResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgClientToGCGetQuestProgressResponse) GetQuests() []*CMsgClientToGCGetQuestProgressResponse_Quest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type CMsgGCToClientMatchSignedOut struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientMatchSignedOut) Reset() {
	*x = CMsgGCToClientMatchSignedOut{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientMatchSignedOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientMatchSignedOut) ProtoMessage() {}

func (x *CMsgGCToClientMatchSignedOut) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientMatchSignedOut.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientMatchSignedOut) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{116}
}

func (x *CMsgGCToClientMatchSignedOut) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgGCGetHeroStatsHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCGetHeroStatsHistory) Reset() {
	*x = CMsgGCGetHeroStatsHistory{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroStatsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroStatsHistory) ProtoMessage() {}

func (x *CMsgGCGetHeroStatsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroStatsHistory.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroStatsHistory) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{117}
}

func (x *CMsgGCGetHeroStatsHistory) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgGCGetHeroStatsHistoryResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	HeroId        *int32                         `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Records       []*CMsgDOTASDOHeroStatsHistory `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCGetHeroStatsHistoryResponse) Reset() {
	*x = CMsgGCGetHeroStatsHistoryResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroStatsHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroStatsHistoryResponse) ProtoMessage() {}

func (x *CMsgGCGetHeroStatsHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroStatsHistoryResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroStatsHistoryResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{118}
}

func (x *CMsgGCGetHeroStatsHistoryResponse) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCGetHeroStatsHistoryResponse) GetRecords() []*CMsgDOTASDOHeroStatsHistory {
	if x != nil {
		return x.Records
	}
	return nil
}

type CMsgPlayerConductScorecardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPlayerConductScorecardRequest) Reset() {
	*x = CMsgPlayerConductScorecardRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPlayerConductScorecardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerConductScorecardRequest) ProtoMessage() {}

func (x *CMsgPlayerConductScorecardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerConductScorecardRequest.ProtoReflect.Descriptor instead.
func (*CMsgPlayerConductScorecardRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{119}
}

type CMsgPlayerConductScorecard struct {
	state               protoimpl.MessageState                      `protogen:"open.v1"`
	AccountId           *uint32                                     `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId             *uint64                                     `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	SeqNum              *uint32                                     `protobuf:"varint,3,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	Reasons             *uint32                                     `protobuf:"varint,4,opt,name=reasons" json:"reasons,omitempty"`
	MatchesInReport     *uint32                                     `protobuf:"varint,5,opt,name=matches_in_report,json=matchesInReport" json:"matches_in_report,omitempty"`
	MatchesClean        *uint32                                     `protobuf:"varint,6,opt,name=matches_clean,json=matchesClean" json:"matches_clean,omitempty"`
	MatchesReported     *uint32                                     `protobuf:"varint,7,opt,name=matches_reported,json=matchesReported" json:"matches_reported,omitempty"`
	MatchesAbandoned    *uint32                                     `protobuf:"varint,8,opt,name=matches_abandoned,json=matchesAbandoned" json:"matches_abandoned,omitempty"`
	ReportsCount        *uint32                                     `protobuf:"varint,9,opt,name=reports_count,json=reportsCount" json:"reports_count,omitempty"`
	ReportsParties      *uint32                                     `protobuf:"varint,10,opt,name=reports_parties,json=reportsParties" json:"reports_parties,omitempty"`
	CommendCount        *uint32                                     `protobuf:"varint,11,opt,name=commend_count,json=commendCount" json:"commend_count,omitempty"`
	Date                *uint32                                     `protobuf:"varint,14,opt,name=date" json:"date,omitempty"`
	RawBehaviorScore    *uint32                                     `protobuf:"varint,17,opt,name=raw_behavior_score,json=rawBehaviorScore" json:"raw_behavior_score,omitempty"`
	OldRawBehaviorScore *uint32                                     `protobuf:"varint,18,opt,name=old_raw_behavior_score,json=oldRawBehaviorScore" json:"old_raw_behavior_score,omitempty"`
	CommsReports        *uint32                                     `protobuf:"varint,19,opt,name=comms_reports,json=commsReports" json:"comms_reports,omitempty"`
	CommsParties        *uint32                                     `protobuf:"varint,20,opt,name=comms_parties,json=commsParties" json:"comms_parties,omitempty"`
	BehaviorRating      *CMsgPlayerConductScorecard_EBehaviorRating `protobuf:"varint,21,opt,name=behavior_rating,json=behaviorRating,enum=protocol.CMsgPlayerConductScorecard_EBehaviorRating,def=0" json:"behavior_rating,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CMsgPlayerConductScorecard fields.
const (
	Default_CMsgPlayerConductScorecard_BehaviorRating = CMsgPlayerConductScorecard_k_eBehaviorGood
)

func (x *CMsgPlayerConductScorecard) Reset() {
	*x = CMsgPlayerConductScorecard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPlayerConductScorecard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPlayerConductScorecard) ProtoMessage() {}

func (x *CMsgPlayerConductScorecard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPlayerConductScorecard.ProtoReflect.Descriptor instead.
func (*CMsgPlayerConductScorecard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{120}
}

func (x *CMsgPlayerConductScorecard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetSeqNum() uint32 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetReasons() uint32 {
	if x != nil && x.Reasons != nil {
		return *x.Reasons
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetMatchesInReport() uint32 {
	if x != nil && x.MatchesInReport != nil {
		return *x.MatchesInReport
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetMatchesClean() uint32 {
	if x != nil && x.MatchesClean != nil {
		return *x.MatchesClean
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetMatchesReported() uint32 {
	if x != nil && x.MatchesReported != nil {
		return *x.MatchesReported
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetMatchesAbandoned() uint32 {
	if x != nil && x.MatchesAbandoned != nil {
		return *x.MatchesAbandoned
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetReportsCount() uint32 {
	if x != nil && x.ReportsCount != nil {
		return *x.ReportsCount
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetReportsParties() uint32 {
	if x != nil && x.ReportsParties != nil {
		return *x.ReportsParties
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetCommendCount() uint32 {
	if x != nil && x.CommendCount != nil {
		return *x.CommendCount
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetDate() uint32 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetRawBehaviorScore() uint32 {
	if x != nil && x.RawBehaviorScore != nil {
		return *x.RawBehaviorScore
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetOldRawBehaviorScore() uint32 {
	if x != nil && x.OldRawBehaviorScore != nil {
		return *x.OldRawBehaviorScore
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetCommsReports() uint32 {
	if x != nil && x.CommsReports != nil {
		return *x.CommsReports
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetCommsParties() uint32 {
	if x != nil && x.CommsParties != nil {
		return *x.CommsParties
	}
	return 0
}

func (x *CMsgPlayerConductScorecard) GetBehaviorRating() CMsgPlayerConductScorecard_EBehaviorRating {
	if x != nil && x.BehaviorRating != nil {
		return *x.BehaviorRating
	}
	return Default_CMsgPlayerConductScorecard_BehaviorRating
}

type CMsgClientToGCWageringRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCWageringRequest) Reset() {
	*x = CMsgClientToGCWageringRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCWageringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCWageringRequest) ProtoMessage() {}

func (x *CMsgClientToGCWageringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCWageringRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCWageringRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{121}
}

func (x *CMsgClientToGCWageringRequest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgGCToClientWageringResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	CoinsRemaining            *uint32                `protobuf:"varint,1,opt,name=coins_remaining,json=coinsRemaining" json:"coins_remaining,omitempty"`
	TotalPointsWon            *uint32                `protobuf:"varint,2,opt,name=total_points_won,json=totalPointsWon" json:"total_points_won,omitempty"`
	TotalPointsWagered        *uint32                `protobuf:"varint,3,opt,name=total_points_wagered,json=totalPointsWagered" json:"total_points_wagered,omitempty"`
	TotalPointsTipped         *uint32                `protobuf:"varint,4,opt,name=total_points_tipped,json=totalPointsTipped" json:"total_points_tipped,omitempty"`
	SuccessRate               *uint32                `protobuf:"varint,5,opt,name=success_rate,json=successRate" json:"success_rate,omitempty"`
	TotalGamesWagered         *uint32                `protobuf:"varint,6,opt,name=total_games_wagered,json=totalGamesWagered" json:"total_games_wagered,omitempty"`
	CoinsMax                  *uint32                `protobuf:"varint,7,opt,name=coins_max,json=coinsMax" json:"coins_max,omitempty"`
	RankWagersRemaining       *uint32                `protobuf:"varint,8,opt,name=rank_wagers_remaining,json=rankWagersRemaining" json:"rank_wagers_remaining,omitempty"`
	RankWagersMax             *uint32                `protobuf:"varint,9,opt,name=rank_wagers_max,json=rankWagersMax" json:"rank_wagers_max,omitempty"`
	PredictionTokensRemaining *uint32                `protobuf:"varint,10,opt,name=prediction_tokens_remaining,json=predictionTokensRemaining" json:"prediction_tokens_remaining,omitempty"`
	PredictionTokensMax       *uint32                `protobuf:"varint,11,opt,name=prediction_tokens_max,json=predictionTokensMax" json:"prediction_tokens_max,omitempty"`
	BountiesRemaining         *uint32                `protobuf:"varint,12,opt,name=bounties_remaining,json=bountiesRemaining" json:"bounties_remaining,omitempty"`
	BountiesMax               *uint32                `protobuf:"varint,13,opt,name=bounties_max,json=bountiesMax" json:"bounties_max,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CMsgGCToClientWageringResponse) Reset() {
	*x = CMsgGCToClientWageringResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientWageringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientWageringResponse) ProtoMessage() {}

func (x *CMsgGCToClientWageringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientWageringResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientWageringResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{122}
}

func (x *CMsgGCToClientWageringResponse) GetCoinsRemaining() uint32 {
	if x != nil && x.CoinsRemaining != nil {
		return *x.CoinsRemaining
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetTotalPointsWon() uint32 {
	if x != nil && x.TotalPointsWon != nil {
		return *x.TotalPointsWon
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetTotalPointsWagered() uint32 {
	if x != nil && x.TotalPointsWagered != nil {
		return *x.TotalPointsWagered
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetTotalPointsTipped() uint32 {
	if x != nil && x.TotalPointsTipped != nil {
		return *x.TotalPointsTipped
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetSuccessRate() uint32 {
	if x != nil && x.SuccessRate != nil {
		return *x.SuccessRate
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetTotalGamesWagered() uint32 {
	if x != nil && x.TotalGamesWagered != nil {
		return *x.TotalGamesWagered
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetCoinsMax() uint32 {
	if x != nil && x.CoinsMax != nil {
		return *x.CoinsMax
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetRankWagersRemaining() uint32 {
	if x != nil && x.RankWagersRemaining != nil {
		return *x.RankWagersRemaining
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetRankWagersMax() uint32 {
	if x != nil && x.RankWagersMax != nil {
		return *x.RankWagersMax
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetPredictionTokensRemaining() uint32 {
	if x != nil && x.PredictionTokensRemaining != nil {
		return *x.PredictionTokensRemaining
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetPredictionTokensMax() uint32 {
	if x != nil && x.PredictionTokensMax != nil {
		return *x.PredictionTokensMax
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetBountiesRemaining() uint32 {
	if x != nil && x.BountiesRemaining != nil {
		return *x.BountiesRemaining
	}
	return 0
}

func (x *CMsgGCToClientWageringResponse) GetBountiesMax() uint32 {
	if x != nil && x.BountiesMax != nil {
		return *x.BountiesMax
	}
	return 0
}

type CMsgGCToClientWageringUpdate struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	EventId       *uint32                         `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	WageringInfo  *CMsgGCToClientWageringResponse `protobuf:"bytes,2,opt,name=wagering_info,json=wageringInfo" json:"wagering_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientWageringUpdate) Reset() {
	*x = CMsgGCToClientWageringUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientWageringUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientWageringUpdate) ProtoMessage() {}

func (x *CMsgGCToClientWageringUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientWageringUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientWageringUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{123}
}

func (x *CMsgGCToClientWageringUpdate) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientWageringUpdate) GetWageringInfo() *CMsgGCToClientWageringResponse {
	if x != nil {
		return x.WageringInfo
	}
	return nil
}

type CMsgGCToClientArcanaVotesUpdate struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	EventId       *uint32                                            `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ArcanaVotes   *CMsgClientToGCRequestArcanaVotesRemainingResponse `protobuf:"bytes,2,opt,name=arcana_votes,json=arcanaVotes" json:"arcana_votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientArcanaVotesUpdate) Reset() {
	*x = CMsgGCToClientArcanaVotesUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientArcanaVotesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientArcanaVotesUpdate) ProtoMessage() {}

func (x *CMsgGCToClientArcanaVotesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientArcanaVotesUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientArcanaVotesUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{124}
}

func (x *CMsgGCToClientArcanaVotesUpdate) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientArcanaVotesUpdate) GetArcanaVotes() *CMsgClientToGCRequestArcanaVotesRemainingResponse {
	if x != nil {
		return x.ArcanaVotes
	}
	return nil
}

type CMsgClientToGCGetEventGoals struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventIds      []EEvent               `protobuf:"varint,1,rep,name=event_ids,json=eventIds,enum=protocol.EEvent" json:"event_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetEventGoals) Reset() {
	*x = CMsgClientToGCGetEventGoals{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetEventGoals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetEventGoals) ProtoMessage() {}

func (x *CMsgClientToGCGetEventGoals) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetEventGoals.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetEventGoals) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{125}
}

func (x *CMsgClientToGCGetEventGoals) GetEventIds() []EEvent {
	if x != nil {
		return x.EventIds
	}
	return nil
}

type CMsgEventGoals struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	EventGoals    []*CMsgEventGoals_EventGoal `protobuf:"bytes,1,rep,name=event_goals,json=eventGoals" json:"event_goals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgEventGoals) Reset() {
	*x = CMsgEventGoals{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEventGoals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventGoals) ProtoMessage() {}

func (x *CMsgEventGoals) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventGoals.ProtoReflect.Descriptor instead.
func (*CMsgEventGoals) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{126}
}

func (x *CMsgEventGoals) GetEventGoals() []*CMsgEventGoals_EventGoal {
	if x != nil {
		return x.EventGoals
	}
	return nil
}

type CMsgGCToGCLeaguePredictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeagueId      *uint32                `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToGCLeaguePredictions) Reset() {
	*x = CMsgGCToGCLeaguePredictions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToGCLeaguePredictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToGCLeaguePredictions) ProtoMessage() {}

func (x *CMsgGCToGCLeaguePredictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToGCLeaguePredictions.ProtoReflect.Descriptor instead.
func (*CMsgGCToGCLeaguePredictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{127}
}

func (x *CMsgGCToGCLeaguePredictions) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgPredictionRankings struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Predictions   []*CMsgPredictionRankings_Prediction `protobuf:"bytes,1,rep,name=predictions" json:"predictions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPredictionRankings) Reset() {
	*x = CMsgPredictionRankings{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPredictionRankings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPredictionRankings) ProtoMessage() {}

func (x *CMsgPredictionRankings) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPredictionRankings.ProtoReflect.Descriptor instead.
func (*CMsgPredictionRankings) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{128}
}

func (x *CMsgPredictionRankings) GetPredictions() []*CMsgPredictionRankings_Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

type CMsgPredictionResults struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Results       []*CMsgPredictionResults_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPredictionResults) Reset() {
	*x = CMsgPredictionResults{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPredictionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPredictionResults) ProtoMessage() {}

func (x *CMsgPredictionResults) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPredictionResults.ProtoReflect.Descriptor instead.
func (*CMsgPredictionResults) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{129}
}

func (x *CMsgPredictionResults) GetResults() []*CMsgPredictionResults_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgClientToGCHasPlayerVotedForMVP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCHasPlayerVotedForMVP) Reset() {
	*x = CMsgClientToGCHasPlayerVotedForMVP{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCHasPlayerVotedForMVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHasPlayerVotedForMVP) ProtoMessage() {}

func (x *CMsgClientToGCHasPlayerVotedForMVP) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHasPlayerVotedForMVP.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHasPlayerVotedForMVP) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{130}
}

func (x *CMsgClientToGCHasPlayerVotedForMVP) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgClientToGCHasPlayerVotedForMVPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *bool                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCHasPlayerVotedForMVPResponse) Reset() {
	*x = CMsgClientToGCHasPlayerVotedForMVPResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCHasPlayerVotedForMVPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCHasPlayerVotedForMVPResponse) ProtoMessage() {}

func (x *CMsgClientToGCHasPlayerVotedForMVPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCHasPlayerVotedForMVPResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCHasPlayerVotedForMVPResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{131}
}

func (x *CMsgClientToGCHasPlayerVotedForMVPResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CMsgClientToGCVoteForMVP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AccountId     *uint32                `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCVoteForMVP) Reset() {
	*x = CMsgClientToGCVoteForMVP{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCVoteForMVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCVoteForMVP) ProtoMessage() {}

func (x *CMsgClientToGCVoteForMVP) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCVoteForMVP.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCVoteForMVP) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{132}
}

func (x *CMsgClientToGCVoteForMVP) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCVoteForMVP) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCVoteForMVPResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *bool                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCVoteForMVPResponse) Reset() {
	*x = CMsgClientToGCVoteForMVPResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCVoteForMVPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCVoteForMVPResponse) ProtoMessage() {}

func (x *CMsgClientToGCVoteForMVPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCVoteForMVPResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCVoteForMVPResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{133}
}

func (x *CMsgClientToGCVoteForMVPResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CMsgClientToGCMVPVoteTimeout struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCMVPVoteTimeout) Reset() {
	*x = CMsgClientToGCMVPVoteTimeout{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCMVPVoteTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMVPVoteTimeout) ProtoMessage() {}

func (x *CMsgClientToGCMVPVoteTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMVPVoteTimeout.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMVPVoteTimeout) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{134}
}

func (x *CMsgClientToGCMVPVoteTimeout) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgClientToGCMVPVoteTimeoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *bool                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCMVPVoteTimeoutResponse) Reset() {
	*x = CMsgClientToGCMVPVoteTimeoutResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCMVPVoteTimeoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMVPVoteTimeoutResponse) ProtoMessage() {}

func (x *CMsgClientToGCMVPVoteTimeoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMVPVoteTimeoutResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMVPVoteTimeoutResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{135}
}

func (x *CMsgClientToGCMVPVoteTimeoutResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

type CMsgClientToGCTeammateStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCTeammateStatsRequest) Reset() {
	*x = CMsgClientToGCTeammateStatsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTeammateStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTeammateStatsRequest) ProtoMessage() {}

func (x *CMsgClientToGCTeammateStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTeammateStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTeammateStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{136}
}

type CMsgClientToGCTeammateStatsResponse struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Success       *bool                                               `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	TeammateStats []*CMsgClientToGCTeammateStatsResponse_TeammateStat `protobuf:"bytes,2,rep,name=teammate_stats,json=teammateStats" json:"teammate_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCTeammateStatsResponse) Reset() {
	*x = CMsgClientToGCTeammateStatsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTeammateStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTeammateStatsResponse) ProtoMessage() {}

func (x *CMsgClientToGCTeammateStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTeammateStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTeammateStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{137}
}

func (x *CMsgClientToGCTeammateStatsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgClientToGCTeammateStatsResponse) GetTeammateStats() []*CMsgClientToGCTeammateStatsResponse_TeammateStat {
	if x != nil {
		return x.TeammateStats
	}
	return nil
}

type CMsgClientToGCVoteForArcana struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Matches       []*CMsgArcanaVoteMatchVotes `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCVoteForArcana) Reset() {
	*x = CMsgClientToGCVoteForArcana{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCVoteForArcana) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCVoteForArcana) ProtoMessage() {}

func (x *CMsgClientToGCVoteForArcana) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCVoteForArcana.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCVoteForArcana) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{138}
}

func (x *CMsgClientToGCVoteForArcana) GetMatches() []*CMsgArcanaVoteMatchVotes {
	if x != nil {
		return x.Matches
	}
	return nil
}

type CMsgClientToGCVoteForArcanaResponse struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Result        *CMsgClientToGCVoteForArcanaResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCVoteForArcanaResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCVoteForArcanaResponse fields.
const (
	Default_CMsgClientToGCVoteForArcanaResponse_Result = CMsgClientToGCVoteForArcanaResponse_SUCCEEDED
)

func (x *CMsgClientToGCVoteForArcanaResponse) Reset() {
	*x = CMsgClientToGCVoteForArcanaResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCVoteForArcanaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCVoteForArcanaResponse) ProtoMessage() {}

func (x *CMsgClientToGCVoteForArcanaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCVoteForArcanaResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCVoteForArcanaResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{139}
}

func (x *CMsgClientToGCVoteForArcanaResponse) GetResult() CMsgClientToGCVoteForArcanaResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCVoteForArcanaResponse_Result
}

type CMsgClientToGCRequestArcanaVotesRemaining struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestArcanaVotesRemaining) Reset() {
	*x = CMsgClientToGCRequestArcanaVotesRemaining{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestArcanaVotesRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestArcanaVotesRemaining) ProtoMessage() {}

func (x *CMsgClientToGCRequestArcanaVotesRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestArcanaVotesRemaining.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestArcanaVotesRemaining) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{140}
}

type CMsgClientToGCRequestArcanaVotesRemainingResponse struct {
	state                     protoimpl.MessageState      `protogen:"open.v1"`
	Result                    *bool                       `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	VotesRemaining            *uint32                     `protobuf:"varint,2,opt,name=votes_remaining,json=votesRemaining" json:"votes_remaining,omitempty"`
	VotesTotal                *uint32                     `protobuf:"varint,3,opt,name=votes_total,json=votesTotal" json:"votes_total,omitempty"`
	MatchesPreviouslyVotedFor []*CMsgArcanaVoteMatchVotes `protobuf:"bytes,4,rep,name=matches_previously_voted_for,json=matchesPreviouslyVotedFor" json:"matches_previously_voted_for,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) Reset() {
	*x = CMsgClientToGCRequestArcanaVotesRemainingResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestArcanaVotesRemainingResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestArcanaVotesRemainingResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestArcanaVotesRemainingResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{141}
}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) GetVotesRemaining() uint32 {
	if x != nil && x.VotesRemaining != nil {
		return *x.VotesRemaining
	}
	return 0
}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) GetVotesTotal() uint32 {
	if x != nil && x.VotesTotal != nil {
		return *x.VotesTotal
	}
	return 0
}

func (x *CMsgClientToGCRequestArcanaVotesRemainingResponse) GetMatchesPreviouslyVotedFor() []*CMsgArcanaVoteMatchVotes {
	if x != nil {
		return x.MatchesPreviouslyVotedFor
	}
	return nil
}

type CMsgClientToGCRequestEventPointLogV2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestEventPointLogV2) Reset() {
	*x = CMsgClientToGCRequestEventPointLogV2{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestEventPointLogV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestEventPointLogV2) ProtoMessage() {}

func (x *CMsgClientToGCRequestEventPointLogV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestEventPointLogV2.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestEventPointLogV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{142}
}

func (x *CMsgClientToGCRequestEventPointLogV2) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCRequestEventPointLogResponseV2 struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Result        *bool                                                    `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	EventId       *EEvent                                                  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	LogEntries    []*CMsgClientToGCRequestEventPointLogResponseV2_LogEntry `protobuf:"bytes,3,rep,name=log_entries,json=logEntries" json:"log_entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestEventPointLogResponseV2 fields.
const (
	Default_CMsgClientToGCRequestEventPointLogResponseV2_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgClientToGCRequestEventPointLogResponseV2) Reset() {
	*x = CMsgClientToGCRequestEventPointLogResponseV2{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestEventPointLogResponseV2) ProtoMessage() {}

func (x *CMsgClientToGCRequestEventPointLogResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestEventPointLogResponseV2.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestEventPointLogResponseV2) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{143}
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCRequestEventPointLogResponseV2_EventId
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2) GetLogEntries() []*CMsgClientToGCRequestEventPointLogResponseV2_LogEntry {
	if x != nil {
		return x.LogEntries
	}
	return nil
}

type CMsgClientToGCPublishUserStat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserStatsEvent *uint32                `protobuf:"varint,1,opt,name=user_stats_event,json=userStatsEvent" json:"user_stats_event,omitempty"`
	ReferenceData  *uint64                `protobuf:"varint,2,opt,name=reference_data,json=referenceData" json:"reference_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCPublishUserStat) Reset() {
	*x = CMsgClientToGCPublishUserStat{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPublishUserStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPublishUserStat) ProtoMessage() {}

func (x *CMsgClientToGCPublishUserStat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPublishUserStat.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPublishUserStat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{144}
}

func (x *CMsgClientToGCPublishUserStat) GetUserStatsEvent() uint32 {
	if x != nil && x.UserStatsEvent != nil {
		return *x.UserStatsEvent
	}
	return 0
}

func (x *CMsgClientToGCPublishUserStat) GetReferenceData() uint64 {
	if x != nil && x.ReferenceData != nil {
		return *x.ReferenceData
	}
	return 0
}

type CMsgClientToGCRequestSlarkGameResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	SlotChosen    *uint32                `protobuf:"varint,2,opt,name=slot_chosen,json=slotChosen" json:"slot_chosen,omitempty"`
	Week          *uint32                `protobuf:"varint,3,opt,name=week" json:"week,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestSlarkGameResult fields.
const (
	Default_CMsgClientToGCRequestSlarkGameResult_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgClientToGCRequestSlarkGameResult) Reset() {
	*x = CMsgClientToGCRequestSlarkGameResult{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestSlarkGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestSlarkGameResult) ProtoMessage() {}

func (x *CMsgClientToGCRequestSlarkGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestSlarkGameResult.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestSlarkGameResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{145}
}

func (x *CMsgClientToGCRequestSlarkGameResult) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCRequestSlarkGameResult_EventId
}

func (x *CMsgClientToGCRequestSlarkGameResult) GetSlotChosen() uint32 {
	if x != nil && x.SlotChosen != nil {
		return *x.SlotChosen
	}
	return 0
}

func (x *CMsgClientToGCRequestSlarkGameResult) GetWeek() uint32 {
	if x != nil && x.Week != nil {
		return *x.Week
	}
	return 0
}

type CMsgClientToGCRequestSlarkGameResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PointsWon     *uint32                `protobuf:"varint,1,opt,name=points_won,json=pointsWon" json:"points_won,omitempty"`
	AuraWon       *bool                  `protobuf:"varint,2,opt,name=aura_won,json=auraWon" json:"aura_won,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestSlarkGameResultResponse) Reset() {
	*x = CMsgClientToGCRequestSlarkGameResultResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestSlarkGameResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestSlarkGameResultResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestSlarkGameResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestSlarkGameResultResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestSlarkGameResultResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{146}
}

func (x *CMsgClientToGCRequestSlarkGameResultResponse) GetPointsWon() uint32 {
	if x != nil && x.PointsWon != nil {
		return *x.PointsWon
	}
	return 0
}

func (x *CMsgClientToGCRequestSlarkGameResultResponse) GetAuraWon() bool {
	if x != nil && x.AuraWon != nil {
		return *x.AuraWon
	}
	return false
}

type CMsgGCToClientQuestProgressUpdated struct {
	state               protoimpl.MessageState                          `protogen:"open.v1"`
	QuestId             *uint32                                         `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	CompletedChallenges []*CMsgGCToClientQuestProgressUpdated_Challenge `protobuf:"bytes,2,rep,name=completed_challenges,json=completedChallenges" json:"completed_challenges,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCToClientQuestProgressUpdated) Reset() {
	*x = CMsgGCToClientQuestProgressUpdated{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientQuestProgressUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientQuestProgressUpdated) ProtoMessage() {}

func (x *CMsgGCToClientQuestProgressUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientQuestProgressUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientQuestProgressUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{147}
}

func (x *CMsgGCToClientQuestProgressUpdated) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated) GetCompletedChallenges() []*CMsgGCToClientQuestProgressUpdated_Challenge {
	if x != nil {
		return x.CompletedChallenges
	}
	return nil
}

type CMsgDOTARedeemItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyId    *uint64                `protobuf:"varint,1,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	PurchaseDef   *uint32                `protobuf:"varint,2,opt,name=purchase_def,json=purchaseDef" json:"purchase_def,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTARedeemItem) Reset() {
	*x = CMsgDOTARedeemItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARedeemItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARedeemItem) ProtoMessage() {}

func (x *CMsgDOTARedeemItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARedeemItem.ProtoReflect.Descriptor instead.
func (*CMsgDOTARedeemItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{148}
}

func (x *CMsgDOTARedeemItem) GetCurrencyId() uint64 {
	if x != nil && x.CurrencyId != nil {
		return *x.CurrencyId
	}
	return 0
}

func (x *CMsgDOTARedeemItem) GetPurchaseDef() uint32 {
	if x != nil && x.PurchaseDef != nil {
		return *x.PurchaseDef
	}
	return 0
}

type CMsgDOTARedeemItemResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Response      *CMsgDOTARedeemItemResponse_EResultCode `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgDOTARedeemItemResponse_EResultCode,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTARedeemItemResponse fields.
const (
	Default_CMsgDOTARedeemItemResponse_Response = CMsgDOTARedeemItemResponse_k_Succeeded
)

func (x *CMsgDOTARedeemItemResponse) Reset() {
	*x = CMsgDOTARedeemItemResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARedeemItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARedeemItemResponse) ProtoMessage() {}

func (x *CMsgDOTARedeemItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARedeemItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTARedeemItemResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{149}
}

func (x *CMsgDOTARedeemItemResponse) GetResponse() CMsgDOTARedeemItemResponse_EResultCode {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgDOTARedeemItemResponse_Response
}

type CMsgClientToGCSelectCompendiumInGamePrediction struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	MatchId       *uint64                                                      `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Predictions   []*CMsgClientToGCSelectCompendiumInGamePrediction_Prediction `protobuf:"bytes,2,rep,name=predictions" json:"predictions,omitempty"`
	LeagueId      *uint32                                                      `protobuf:"varint,3,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction) Reset() {
	*x = CMsgClientToGCSelectCompendiumInGamePrediction{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSelectCompendiumInGamePrediction) ProtoMessage() {}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSelectCompendiumInGamePrediction.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSelectCompendiumInGamePrediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{150}
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction) GetPredictions() []*CMsgClientToGCSelectCompendiumInGamePrediction_Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgClientToGCSelectCompendiumInGamePredictionResponse struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Result        *CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSelectCompendiumInGamePredictionResponse fields.
const (
	Default_CMsgClientToGCSelectCompendiumInGamePredictionResponse_Result = CMsgClientToGCSelectCompendiumInGamePredictionResponse_SUCCESS
)

func (x *CMsgClientToGCSelectCompendiumInGamePredictionResponse) Reset() {
	*x = CMsgClientToGCSelectCompendiumInGamePredictionResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSelectCompendiumInGamePredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSelectCompendiumInGamePredictionResponse) ProtoMessage() {}

func (x *CMsgClientToGCSelectCompendiumInGamePredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSelectCompendiumInGamePredictionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSelectCompendiumInGamePredictionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{151}
}

func (x *CMsgClientToGCSelectCompendiumInGamePredictionResponse) GetResult() CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSelectCompendiumInGamePredictionResponse_Result
}

type CMsgClientToGCOpenPlayerCardPack struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PlayerCardPackItemId *uint64                `protobuf:"varint,1,opt,name=player_card_pack_item_id,json=playerCardPackItemId" json:"player_card_pack_item_id,omitempty"`
	TeamId               *uint32                `protobuf:"varint,2,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	DeprecatedLeagueId   *uint32                `protobuf:"varint,3,opt,name=deprecated_league_id,json=deprecatedLeagueId" json:"deprecated_league_id,omitempty"`
	Region               *ELeagueRegion         `protobuf:"varint,4,opt,name=region,enum=protocol.ELeagueRegion,def=0" json:"region,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for CMsgClientToGCOpenPlayerCardPack fields.
const (
	Default_CMsgClientToGCOpenPlayerCardPack_Region = ELeagueRegion_LEAGUE_REGION_UNSET
)

func (x *CMsgClientToGCOpenPlayerCardPack) Reset() {
	*x = CMsgClientToGCOpenPlayerCardPack{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOpenPlayerCardPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOpenPlayerCardPack) ProtoMessage() {}

func (x *CMsgClientToGCOpenPlayerCardPack) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOpenPlayerCardPack.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOpenPlayerCardPack) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{152}
}

func (x *CMsgClientToGCOpenPlayerCardPack) GetPlayerCardPackItemId() uint64 {
	if x != nil && x.PlayerCardPackItemId != nil {
		return *x.PlayerCardPackItemId
	}
	return 0
}

func (x *CMsgClientToGCOpenPlayerCardPack) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgClientToGCOpenPlayerCardPack) GetDeprecatedLeagueId() uint32 {
	if x != nil && x.DeprecatedLeagueId != nil {
		return *x.DeprecatedLeagueId
	}
	return 0
}

func (x *CMsgClientToGCOpenPlayerCardPack) GetRegion() ELeagueRegion {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return Default_CMsgClientToGCOpenPlayerCardPack_Region
}

type CMsgClientToGCOpenPlayerCardPackResponse struct {
	state             protoimpl.MessageState                           `protogen:"open.v1"`
	Result            *CMsgClientToGCOpenPlayerCardPackResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCOpenPlayerCardPackResponse_Result,def=1" json:"result,omitempty"`
	PlayerCardItemIds []uint64                                         `protobuf:"varint,2,rep,name=player_card_item_ids,json=playerCardItemIds" json:"player_card_item_ids,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgClientToGCOpenPlayerCardPackResponse fields.
const (
	Default_CMsgClientToGCOpenPlayerCardPackResponse_Result = CMsgClientToGCOpenPlayerCardPackResponse_SUCCESS
)

func (x *CMsgClientToGCOpenPlayerCardPackResponse) Reset() {
	*x = CMsgClientToGCOpenPlayerCardPackResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOpenPlayerCardPackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOpenPlayerCardPackResponse) ProtoMessage() {}

func (x *CMsgClientToGCOpenPlayerCardPackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOpenPlayerCardPackResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOpenPlayerCardPackResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{153}
}

func (x *CMsgClientToGCOpenPlayerCardPackResponse) GetResult() CMsgClientToGCOpenPlayerCardPackResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCOpenPlayerCardPackResponse_Result
}

func (x *CMsgClientToGCOpenPlayerCardPackResponse) GetPlayerCardItemIds() []uint64 {
	if x != nil {
		return x.PlayerCardItemIds
	}
	return nil
}

type CMsgClientToGCRecyclePlayerCard struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PlayerCardItemIds []uint64               `protobuf:"varint,3,rep,name=player_card_item_ids,json=playerCardItemIds" json:"player_card_item_ids,omitempty"`
	EventId           *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCRecyclePlayerCard) Reset() {
	*x = CMsgClientToGCRecyclePlayerCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRecyclePlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecyclePlayerCard) ProtoMessage() {}

func (x *CMsgClientToGCRecyclePlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecyclePlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecyclePlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{154}
}

func (x *CMsgClientToGCRecyclePlayerCard) GetPlayerCardItemIds() []uint64 {
	if x != nil {
		return x.PlayerCardItemIds
	}
	return nil
}

func (x *CMsgClientToGCRecyclePlayerCard) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCRecyclePlayerCardResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Result        *CMsgClientToGCRecyclePlayerCardResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCRecyclePlayerCardResponse_Result,def=1" json:"result,omitempty"`
	DustAmount    *uint32                                         `protobuf:"varint,2,opt,name=dust_amount,json=dustAmount" json:"dust_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRecyclePlayerCardResponse fields.
const (
	Default_CMsgClientToGCRecyclePlayerCardResponse_Result = CMsgClientToGCRecyclePlayerCardResponse_SUCCESS
)

func (x *CMsgClientToGCRecyclePlayerCardResponse) Reset() {
	*x = CMsgClientToGCRecyclePlayerCardResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRecyclePlayerCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecyclePlayerCardResponse) ProtoMessage() {}

func (x *CMsgClientToGCRecyclePlayerCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecyclePlayerCardResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecyclePlayerCardResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{155}
}

func (x *CMsgClientToGCRecyclePlayerCardResponse) GetResult() CMsgClientToGCRecyclePlayerCardResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRecyclePlayerCardResponse_Result
}

func (x *CMsgClientToGCRecyclePlayerCardResponse) GetDustAmount() uint32 {
	if x != nil && x.DustAmount != nil {
		return *x.DustAmount
	}
	return 0
}

type CMsgClientToGCCreatePlayerCardPack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CardDustItemId *uint64                `protobuf:"varint,1,opt,name=card_dust_item_id,json=cardDustItemId" json:"card_dust_item_id,omitempty"`
	EventId        *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	PremiumPack    *bool                  `protobuf:"varint,3,opt,name=premium_pack,json=premiumPack" json:"premium_pack,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCCreatePlayerCardPack) Reset() {
	*x = CMsgClientToGCCreatePlayerCardPack{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreatePlayerCardPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreatePlayerCardPack) ProtoMessage() {}

func (x *CMsgClientToGCCreatePlayerCardPack) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreatePlayerCardPack.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreatePlayerCardPack) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{156}
}

func (x *CMsgClientToGCCreatePlayerCardPack) GetCardDustItemId() uint64 {
	if x != nil && x.CardDustItemId != nil {
		return *x.CardDustItemId
	}
	return 0
}

func (x *CMsgClientToGCCreatePlayerCardPack) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCCreatePlayerCardPack) GetPremiumPack() bool {
	if x != nil && x.PremiumPack != nil {
		return *x.PremiumPack
	}
	return false
}

type CMsgClientToGCCreatePlayerCardPackResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Result        *CMsgClientToGCCreatePlayerCardPackResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCreatePlayerCardPackResponse_Result,def=1" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCreatePlayerCardPackResponse fields.
const (
	Default_CMsgClientToGCCreatePlayerCardPackResponse_Result = CMsgClientToGCCreatePlayerCardPackResponse_SUCCESS
)

func (x *CMsgClientToGCCreatePlayerCardPackResponse) Reset() {
	*x = CMsgClientToGCCreatePlayerCardPackResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreatePlayerCardPackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreatePlayerCardPackResponse) ProtoMessage() {}

func (x *CMsgClientToGCCreatePlayerCardPackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreatePlayerCardPackResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreatePlayerCardPackResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{157}
}

func (x *CMsgClientToGCCreatePlayerCardPackResponse) GetResult() CMsgClientToGCCreatePlayerCardPackResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCreatePlayerCardPackResponse_Result
}

type CMsgClientToGCCreateTeamPlayerCardPack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CardDustItemId *uint64                `protobuf:"varint,1,opt,name=card_dust_item_id,json=cardDustItemId" json:"card_dust_item_id,omitempty"`
	EventId        *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	PremiumPack    *bool                  `protobuf:"varint,3,opt,name=premium_pack,json=premiumPack" json:"premium_pack,omitempty"`
	TeamId         *uint32                `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) Reset() {
	*x = CMsgClientToGCCreateTeamPlayerCardPack{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateTeamPlayerCardPack) ProtoMessage() {}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateTeamPlayerCardPack.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateTeamPlayerCardPack) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{158}
}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) GetCardDustItemId() uint64 {
	if x != nil && x.CardDustItemId != nil {
		return *x.CardDustItemId
	}
	return 0
}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) GetPremiumPack() bool {
	if x != nil && x.PremiumPack != nil {
		return *x.PremiumPack
	}
	return false
}

func (x *CMsgClientToGCCreateTeamPlayerCardPack) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type CMsgClientToGCCreateTeamPlayerCardPackResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Result        *CMsgClientToGCCreateTeamPlayerCardPackResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCreateTeamPlayerCardPackResponse_Result,def=1" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCreateTeamPlayerCardPackResponse fields.
const (
	Default_CMsgClientToGCCreateTeamPlayerCardPackResponse_Result = CMsgClientToGCCreateTeamPlayerCardPackResponse_SUCCESS
)

func (x *CMsgClientToGCCreateTeamPlayerCardPackResponse) Reset() {
	*x = CMsgClientToGCCreateTeamPlayerCardPackResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreateTeamPlayerCardPackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateTeamPlayerCardPackResponse) ProtoMessage() {}

func (x *CMsgClientToGCCreateTeamPlayerCardPackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateTeamPlayerCardPackResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateTeamPlayerCardPackResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{159}
}

func (x *CMsgClientToGCCreateTeamPlayerCardPackResponse) GetResult() CMsgClientToGCCreateTeamPlayerCardPackResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCreateTeamPlayerCardPackResponse_Result
}

type CMsgGCToClientBattlePassRollup_International2016 struct {
	state            protoimpl.MessageState                                             `protogen:"open.v1"`
	BattlePassLevel  *uint32                                                            `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	Questlines       []*CMsgGCToClientBattlePassRollup_International2016_Questlines     `protobuf:"bytes,2,rep,name=questlines" json:"questlines,omitempty"`
	Wagering         *CMsgGCToClientBattlePassRollup_International2016_Wagering         `protobuf:"bytes,3,opt,name=wagering" json:"wagering,omitempty"`
	Achievements     *CMsgGCToClientBattlePassRollup_International2016_Achievements     `protobuf:"bytes,4,opt,name=achievements" json:"achievements,omitempty"`
	BattleCup        *CMsgGCToClientBattlePassRollup_International2016_BattleCup        `protobuf:"bytes,5,opt,name=battle_cup,json=battleCup" json:"battle_cup,omitempty"`
	Predictions      *CMsgGCToClientBattlePassRollup_International2016_Predictions      `protobuf:"bytes,6,opt,name=predictions" json:"predictions,omitempty"`
	Bracket          *CMsgGCToClientBattlePassRollup_International2016_Bracket          `protobuf:"bytes,7,opt,name=bracket" json:"bracket,omitempty"`
	PlayerCards      []*CMsgGCToClientBattlePassRollup_International2016_PlayerCard     `protobuf:"bytes,8,rep,name=player_cards,json=playerCards" json:"player_cards,omitempty"`
	FantasyChallenge *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge `protobuf:"bytes,9,opt,name=fantasy_challenge,json=fantasyChallenge" json:"fantasy_challenge,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160}
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetQuestlines() []*CMsgGCToClientBattlePassRollup_International2016_Questlines {
	if x != nil {
		return x.Questlines
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetWagering() *CMsgGCToClientBattlePassRollup_International2016_Wagering {
	if x != nil {
		return x.Wagering
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetAchievements() *CMsgGCToClientBattlePassRollup_International2016_Achievements {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetBattleCup() *CMsgGCToClientBattlePassRollup_International2016_BattleCup {
	if x != nil {
		return x.BattleCup
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetPredictions() *CMsgGCToClientBattlePassRollup_International2016_Predictions {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetBracket() *CMsgGCToClientBattlePassRollup_International2016_Bracket {
	if x != nil {
		return x.Bracket
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetPlayerCards() []*CMsgGCToClientBattlePassRollup_International2016_PlayerCard {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_International2016) GetFantasyChallenge() *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge {
	if x != nil {
		return x.FantasyChallenge
	}
	return nil
}

type CMsgGCToClientBattlePassRollup_Fall2016 struct {
	state            protoimpl.MessageState                                    `protogen:"open.v1"`
	BattlePassLevel  *uint32                                                   `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	Questlines       []*CMsgGCToClientBattlePassRollup_Fall2016_Questlines     `protobuf:"bytes,2,rep,name=questlines" json:"questlines,omitempty"`
	Wagering         *CMsgGCToClientBattlePassRollup_Fall2016_Wagering         `protobuf:"bytes,3,opt,name=wagering" json:"wagering,omitempty"`
	Achievements     *CMsgGCToClientBattlePassRollup_Fall2016_Achievements     `protobuf:"bytes,4,opt,name=achievements" json:"achievements,omitempty"`
	BattleCup        *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup        `protobuf:"bytes,5,opt,name=battle_cup,json=battleCup" json:"battle_cup,omitempty"`
	Predictions      *CMsgGCToClientBattlePassRollup_Fall2016_Predictions      `protobuf:"bytes,6,opt,name=predictions" json:"predictions,omitempty"`
	Bracket          *CMsgGCToClientBattlePassRollup_Fall2016_Bracket          `protobuf:"bytes,7,opt,name=bracket" json:"bracket,omitempty"`
	PlayerCards      []*CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard     `protobuf:"bytes,8,rep,name=player_cards,json=playerCards" json:"player_cards,omitempty"`
	FantasyChallenge *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge `protobuf:"bytes,9,opt,name=fantasy_challenge,json=fantasyChallenge" json:"fantasy_challenge,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetQuestlines() []*CMsgGCToClientBattlePassRollup_Fall2016_Questlines {
	if x != nil {
		return x.Questlines
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetWagering() *CMsgGCToClientBattlePassRollup_Fall2016_Wagering {
	if x != nil {
		return x.Wagering
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetAchievements() *CMsgGCToClientBattlePassRollup_Fall2016_Achievements {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetBattleCup() *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup {
	if x != nil {
		return x.BattleCup
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetPredictions() *CMsgGCToClientBattlePassRollup_Fall2016_Predictions {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetBracket() *CMsgGCToClientBattlePassRollup_Fall2016_Bracket {
	if x != nil {
		return x.Bracket
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetPlayerCards() []*CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016) GetFantasyChallenge() *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge {
	if x != nil {
		return x.FantasyChallenge
	}
	return nil
}

type CMsgGCToClientBattlePassRollup_Winter2017 struct {
	state            protoimpl.MessageState                                      `protogen:"open.v1"`
	BattlePassLevel  *uint32                                                     `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	Questlines       []*CMsgGCToClientBattlePassRollup_Winter2017_Questlines     `protobuf:"bytes,2,rep,name=questlines" json:"questlines,omitempty"`
	Wagering         *CMsgGCToClientBattlePassRollup_Winter2017_Wagering         `protobuf:"bytes,3,opt,name=wagering" json:"wagering,omitempty"`
	Achievements     *CMsgGCToClientBattlePassRollup_Winter2017_Achievements     `protobuf:"bytes,4,opt,name=achievements" json:"achievements,omitempty"`
	BattleCup        *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup        `protobuf:"bytes,5,opt,name=battle_cup,json=battleCup" json:"battle_cup,omitempty"`
	Predictions      *CMsgGCToClientBattlePassRollup_Winter2017_Predictions      `protobuf:"bytes,6,opt,name=predictions" json:"predictions,omitempty"`
	Bracket          *CMsgGCToClientBattlePassRollup_Winter2017_Bracket          `protobuf:"bytes,7,opt,name=bracket" json:"bracket,omitempty"`
	PlayerCards      []*CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard     `protobuf:"bytes,8,rep,name=player_cards,json=playerCards" json:"player_cards,omitempty"`
	FantasyChallenge *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge `protobuf:"bytes,9,opt,name=fantasy_challenge,json=fantasyChallenge" json:"fantasy_challenge,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetQuestlines() []*CMsgGCToClientBattlePassRollup_Winter2017_Questlines {
	if x != nil {
		return x.Questlines
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetWagering() *CMsgGCToClientBattlePassRollup_Winter2017_Wagering {
	if x != nil {
		return x.Wagering
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetAchievements() *CMsgGCToClientBattlePassRollup_Winter2017_Achievements {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetBattleCup() *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup {
	if x != nil {
		return x.BattleCup
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetPredictions() *CMsgGCToClientBattlePassRollup_Winter2017_Predictions {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetBracket() *CMsgGCToClientBattlePassRollup_Winter2017_Bracket {
	if x != nil {
		return x.Bracket
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetPlayerCards() []*CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017) GetFantasyChallenge() *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge {
	if x != nil {
		return x.FantasyChallenge
	}
	return nil
}

type CMsgGCToClientBattlePassRollup_TI7 struct {
	state            protoimpl.MessageState                               `protogen:"open.v1"`
	BattlePassLevel  *uint32                                              `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	Questlines       []*CMsgGCToClientBattlePassRollup_TI7_Questlines     `protobuf:"bytes,2,rep,name=questlines" json:"questlines,omitempty"`
	Wagering         *CMsgGCToClientBattlePassRollup_TI7_Wagering         `protobuf:"bytes,3,opt,name=wagering" json:"wagering,omitempty"`
	Achievements     *CMsgGCToClientBattlePassRollup_TI7_Achievements     `protobuf:"bytes,4,opt,name=achievements" json:"achievements,omitempty"`
	BattleCup        *CMsgGCToClientBattlePassRollup_TI7_BattleCup        `protobuf:"bytes,5,opt,name=battle_cup,json=battleCup" json:"battle_cup,omitempty"`
	Predictions      *CMsgGCToClientBattlePassRollup_TI7_Predictions      `protobuf:"bytes,6,opt,name=predictions" json:"predictions,omitempty"`
	Bracket          *CMsgGCToClientBattlePassRollup_TI7_Bracket          `protobuf:"bytes,7,opt,name=bracket" json:"bracket,omitempty"`
	PlayerCards      []*CMsgGCToClientBattlePassRollup_TI7_PlayerCard     `protobuf:"bytes,8,rep,name=player_cards,json=playerCards" json:"player_cards,omitempty"`
	FantasyChallenge *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge `protobuf:"bytes,9,opt,name=fantasy_challenge,json=fantasyChallenge" json:"fantasy_challenge,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163}
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetQuestlines() []*CMsgGCToClientBattlePassRollup_TI7_Questlines {
	if x != nil {
		return x.Questlines
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetWagering() *CMsgGCToClientBattlePassRollup_TI7_Wagering {
	if x != nil {
		return x.Wagering
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetAchievements() *CMsgGCToClientBattlePassRollup_TI7_Achievements {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetBattleCup() *CMsgGCToClientBattlePassRollup_TI7_BattleCup {
	if x != nil {
		return x.BattleCup
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetPredictions() *CMsgGCToClientBattlePassRollup_TI7_Predictions {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetBracket() *CMsgGCToClientBattlePassRollup_TI7_Bracket {
	if x != nil {
		return x.Bracket
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetPlayerCards() []*CMsgGCToClientBattlePassRollup_TI7_PlayerCard {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI7) GetFantasyChallenge() *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge {
	if x != nil {
		return x.FantasyChallenge
	}
	return nil
}

type CMsgGCToClientBattlePassRollup_TI8 struct {
	state            protoimpl.MessageState                               `protogen:"open.v1"`
	BattlePassLevel  *uint32                                              `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	CavernCrawl      *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl      `protobuf:"bytes,2,opt,name=cavern_crawl,json=cavernCrawl" json:"cavern_crawl,omitempty"`
	Wagering         *CMsgGCToClientBattlePassRollup_TI8_Wagering         `protobuf:"bytes,3,opt,name=wagering" json:"wagering,omitempty"`
	Achievements     *CMsgGCToClientBattlePassRollup_TI8_Achievements     `protobuf:"bytes,4,opt,name=achievements" json:"achievements,omitempty"`
	Predictions      *CMsgGCToClientBattlePassRollup_TI8_Predictions      `protobuf:"bytes,6,opt,name=predictions" json:"predictions,omitempty"`
	Bracket          *CMsgGCToClientBattlePassRollup_TI8_Bracket          `protobuf:"bytes,7,opt,name=bracket" json:"bracket,omitempty"`
	PlayerCards      []*CMsgGCToClientBattlePassRollup_TI8_PlayerCard     `protobuf:"bytes,8,rep,name=player_cards,json=playerCards" json:"player_cards,omitempty"`
	FantasyChallenge *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge `protobuf:"bytes,9,opt,name=fantasy_challenge,json=fantasyChallenge" json:"fantasy_challenge,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164}
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetCavernCrawl() *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl {
	if x != nil {
		return x.CavernCrawl
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetWagering() *CMsgGCToClientBattlePassRollup_TI8_Wagering {
	if x != nil {
		return x.Wagering
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetAchievements() *CMsgGCToClientBattlePassRollup_TI8_Achievements {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetPredictions() *CMsgGCToClientBattlePassRollup_TI8_Predictions {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetBracket() *CMsgGCToClientBattlePassRollup_TI8_Bracket {
	if x != nil {
		return x.Bracket
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetPlayerCards() []*CMsgGCToClientBattlePassRollup_TI8_PlayerCard {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollup_TI8) GetFantasyChallenge() *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge {
	if x != nil {
		return x.FantasyChallenge
	}
	return nil
}

type CMsgGCToClientBattlePassRollup_TI9 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BattlePassLevel *uint32                `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI9) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI9{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI9) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI9) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI9) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI9.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI9) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{165}
}

func (x *CMsgGCToClientBattlePassRollup_TI9) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI10 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BattlePassLevel *uint32                `protobuf:"varint,1,opt,name=battle_pass_level,json=battlePassLevel" json:"battle_pass_level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI10) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI10{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI10) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI10) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI10.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI10) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{166}
}

func (x *CMsgGCToClientBattlePassRollup_TI10) GetBattlePassLevel() uint32 {
	if x != nil && x.BattlePassLevel != nil {
		return *x.BattlePassLevel
	}
	return 0
}

type CMsgGCToClientBattlePassRollupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	AccountId     *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollupRequest) Reset() {
	*x = CMsgGCToClientBattlePassRollupRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollupRequest) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollupRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollupRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{167}
}

func (x *CMsgGCToClientBattlePassRollupRequest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollupRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCToClientBattlePassRollupResponse struct {
	state           protoimpl.MessageState                            `protogen:"open.v1"`
	EventTi6        *CMsgGCToClientBattlePassRollup_International2016 `protobuf:"bytes,1,opt,name=event_ti6,json=eventTi6" json:"event_ti6,omitempty"`
	EventFall2016   *CMsgGCToClientBattlePassRollup_Fall2016          `protobuf:"bytes,2,opt,name=event_fall2016,json=eventFall2016" json:"event_fall2016,omitempty"`
	EventWinter2017 *CMsgGCToClientBattlePassRollup_Winter2017        `protobuf:"bytes,3,opt,name=event_winter2017,json=eventWinter2017" json:"event_winter2017,omitempty"`
	EventTi7        *CMsgGCToClientBattlePassRollup_TI7               `protobuf:"bytes,4,opt,name=event_ti7,json=eventTi7" json:"event_ti7,omitempty"`
	EventTi8        *CMsgGCToClientBattlePassRollup_TI8               `protobuf:"bytes,5,opt,name=event_ti8,json=eventTi8" json:"event_ti8,omitempty"`
	EventTi9        *CMsgGCToClientBattlePassRollup_TI9               `protobuf:"bytes,6,opt,name=event_ti9,json=eventTi9" json:"event_ti9,omitempty"`
	EventTi10       *CMsgGCToClientBattlePassRollup_TI10              `protobuf:"bytes,7,opt,name=event_ti10,json=eventTi10" json:"event_ti10,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollupResponse) Reset() {
	*x = CMsgGCToClientBattlePassRollupResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollupResponse) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollupResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollupResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{168}
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventTi6() *CMsgGCToClientBattlePassRollup_International2016 {
	if x != nil {
		return x.EventTi6
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventFall2016() *CMsgGCToClientBattlePassRollup_Fall2016 {
	if x != nil {
		return x.EventFall2016
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventWinter2017() *CMsgGCToClientBattlePassRollup_Winter2017 {
	if x != nil {
		return x.EventWinter2017
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventTi7() *CMsgGCToClientBattlePassRollup_TI7 {
	if x != nil {
		return x.EventTi7
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventTi8() *CMsgGCToClientBattlePassRollup_TI8 {
	if x != nil {
		return x.EventTi8
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventTi9() *CMsgGCToClientBattlePassRollup_TI9 {
	if x != nil {
		return x.EventTi9
	}
	return nil
}

func (x *CMsgGCToClientBattlePassRollupResponse) GetEventTi10() *CMsgGCToClientBattlePassRollup_TI10 {
	if x != nil {
		return x.EventTi10
	}
	return nil
}

type CMsgGCToClientBattlePassRollupListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollupListRequest) Reset() {
	*x = CMsgGCToClientBattlePassRollupListRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollupListRequest) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollupListRequest.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollupListRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{169}
}

func (x *CMsgGCToClientBattlePassRollupListRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCToClientBattlePassRollupListResponse struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	EventInfo     []*CMsgGCToClientBattlePassRollupListResponse_EventInfo `protobuf:"bytes,1,rep,name=event_info,json=eventInfo" json:"event_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollupListResponse) Reset() {
	*x = CMsgGCToClientBattlePassRollupListResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollupListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollupListResponse) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollupListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollupListResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollupListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{170}
}

func (x *CMsgGCToClientBattlePassRollupListResponse) GetEventInfo() []*CMsgGCToClientBattlePassRollupListResponse_EventInfo {
	if x != nil {
		return x.EventInfo
	}
	return nil
}

type CMsgClientToGCTransferSeasonalMMRRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsParty       *bool                  `protobuf:"varint,1,opt,name=is_party,json=isParty" json:"is_party,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCTransferSeasonalMMRRequest) Reset() {
	*x = CMsgClientToGCTransferSeasonalMMRRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTransferSeasonalMMRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTransferSeasonalMMRRequest) ProtoMessage() {}

func (x *CMsgClientToGCTransferSeasonalMMRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTransferSeasonalMMRRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTransferSeasonalMMRRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{171}
}

func (x *CMsgClientToGCTransferSeasonalMMRRequest) GetIsParty() bool {
	if x != nil && x.IsParty != nil {
		return *x.IsParty
	}
	return false
}

type CMsgClientToGCTransferSeasonalMMRResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCTransferSeasonalMMRResponse) Reset() {
	*x = CMsgClientToGCTransferSeasonalMMRResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTransferSeasonalMMRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTransferSeasonalMMRResponse) ProtoMessage() {}

func (x *CMsgClientToGCTransferSeasonalMMRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTransferSeasonalMMRResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTransferSeasonalMMRResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{172}
}

func (x *CMsgClientToGCTransferSeasonalMMRResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CMsgGCToClientPlaytestStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Active        *bool                  `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientPlaytestStatus) Reset() {
	*x = CMsgGCToClientPlaytestStatus{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPlaytestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPlaytestStatus) ProtoMessage() {}

func (x *CMsgGCToClientPlaytestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPlaytestStatus.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPlaytestStatus) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{173}
}

func (x *CMsgGCToClientPlaytestStatus) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

type CMsgClientToGCJoinPlaytest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientVersion *uint32                `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCJoinPlaytest) Reset() {
	*x = CMsgClientToGCJoinPlaytest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCJoinPlaytest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinPlaytest) ProtoMessage() {}

func (x *CMsgClientToGCJoinPlaytest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinPlaytest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinPlaytest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{174}
}

func (x *CMsgClientToGCJoinPlaytest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CMsgClientToGCJoinPlaytestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *string                `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCJoinPlaytestResponse) Reset() {
	*x = CMsgClientToGCJoinPlaytestResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCJoinPlaytestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinPlaytestResponse) ProtoMessage() {}

func (x *CMsgClientToGCJoinPlaytestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinPlaytestResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinPlaytestResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{175}
}

func (x *CMsgClientToGCJoinPlaytestResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type CMsgDOTASetFavoriteTeam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        *uint32                `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTASetFavoriteTeam) Reset() {
	*x = CMsgDOTASetFavoriteTeam{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASetFavoriteTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASetFavoriteTeam) ProtoMessage() {}

func (x *CMsgDOTASetFavoriteTeam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASetFavoriteTeam.ProtoReflect.Descriptor instead.
func (*CMsgDOTASetFavoriteTeam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{176}
}

func (x *CMsgDOTASetFavoriteTeam) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTASetFavoriteTeam) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgDOTATriviaCurrentQuestions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Questions     []*CMsgDOTATriviaQuestion `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty"`
	TriviaEnabled *bool                     `protobuf:"varint,2,opt,name=trivia_enabled,json=triviaEnabled" json:"trivia_enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTATriviaCurrentQuestions) Reset() {
	*x = CMsgDOTATriviaCurrentQuestions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTATriviaCurrentQuestions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTATriviaCurrentQuestions) ProtoMessage() {}

func (x *CMsgDOTATriviaCurrentQuestions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTATriviaCurrentQuestions.ProtoReflect.Descriptor instead.
func (*CMsgDOTATriviaCurrentQuestions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{177}
}

func (x *CMsgDOTATriviaCurrentQuestions) GetQuestions() []*CMsgDOTATriviaQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *CMsgDOTATriviaCurrentQuestions) GetTriviaEnabled() bool {
	if x != nil && x.TriviaEnabled != nil {
		return *x.TriviaEnabled
	}
	return false
}

type CMsgDOTASubmitTriviaQuestionAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    *uint32                `protobuf:"varint,1,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	AnswerIndex   *uint32                `protobuf:"varint,2,opt,name=answer_index,json=answerIndex" json:"answer_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTASubmitTriviaQuestionAnswer) Reset() {
	*x = CMsgDOTASubmitTriviaQuestionAnswer{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitTriviaQuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitTriviaQuestionAnswer) ProtoMessage() {}

func (x *CMsgDOTASubmitTriviaQuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitTriviaQuestionAnswer.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitTriviaQuestionAnswer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{178}
}

func (x *CMsgDOTASubmitTriviaQuestionAnswer) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *CMsgDOTASubmitTriviaQuestionAnswer) GetAnswerIndex() uint32 {
	if x != nil && x.AnswerIndex != nil {
		return *x.AnswerIndex
	}
	return 0
}

type CMsgDOTASubmitTriviaQuestionAnswerResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Result        *EDOTATriviaAnswerResult `protobuf:"varint,1,opt,name=result,enum=protocol.EDOTATriviaAnswerResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTASubmitTriviaQuestionAnswerResponse fields.
const (
	Default_CMsgDOTASubmitTriviaQuestionAnswerResponse_Result = EDOTATriviaAnswerResult_k_EDOTATriviaAnswerResult_Success
)

func (x *CMsgDOTASubmitTriviaQuestionAnswerResponse) Reset() {
	*x = CMsgDOTASubmitTriviaQuestionAnswerResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASubmitTriviaQuestionAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASubmitTriviaQuestionAnswerResponse) ProtoMessage() {}

func (x *CMsgDOTASubmitTriviaQuestionAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASubmitTriviaQuestionAnswerResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASubmitTriviaQuestionAnswerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{179}
}

func (x *CMsgDOTASubmitTriviaQuestionAnswerResponse) GetResult() EDOTATriviaAnswerResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTASubmitTriviaQuestionAnswerResponse_Result
}

type CMsgDOTAStartTriviaSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAStartTriviaSession) Reset() {
	*x = CMsgDOTAStartTriviaSession{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAStartTriviaSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAStartTriviaSession) ProtoMessage() {}

func (x *CMsgDOTAStartTriviaSession) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAStartTriviaSession.ProtoReflect.Descriptor instead.
func (*CMsgDOTAStartTriviaSession) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{180}
}

type CMsgDOTAStartTriviaSessionResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TriviaEnabled    *bool                  `protobuf:"varint,1,opt,name=trivia_enabled,json=triviaEnabled" json:"trivia_enabled,omitempty"`
	CurrentTimestamp *uint32                `protobuf:"varint,2,opt,name=current_timestamp,json=currentTimestamp" json:"current_timestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgDOTAStartTriviaSessionResponse) Reset() {
	*x = CMsgDOTAStartTriviaSessionResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAStartTriviaSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAStartTriviaSessionResponse) ProtoMessage() {}

func (x *CMsgDOTAStartTriviaSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAStartTriviaSessionResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAStartTriviaSessionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{181}
}

func (x *CMsgDOTAStartTriviaSessionResponse) GetTriviaEnabled() bool {
	if x != nil && x.TriviaEnabled != nil {
		return *x.TriviaEnabled
	}
	return false
}

func (x *CMsgDOTAStartTriviaSessionResponse) GetCurrentTimestamp() uint32 {
	if x != nil && x.CurrentTimestamp != nil {
		return *x.CurrentTimestamp
	}
	return 0
}

type CMsgDOTAAnchorPhoneNumberRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAAnchorPhoneNumberRequest) Reset() {
	*x = CMsgDOTAAnchorPhoneNumberRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAAnchorPhoneNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAAnchorPhoneNumberRequest) ProtoMessage() {}

func (x *CMsgDOTAAnchorPhoneNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAAnchorPhoneNumberRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAAnchorPhoneNumberRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{182}
}

type CMsgDOTAAnchorPhoneNumberResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Result        *CMsgDOTAAnchorPhoneNumberResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgDOTAAnchorPhoneNumberResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAAnchorPhoneNumberResponse fields.
const (
	Default_CMsgDOTAAnchorPhoneNumberResponse_Result = CMsgDOTAAnchorPhoneNumberResponse_SUCCESS
)

func (x *CMsgDOTAAnchorPhoneNumberResponse) Reset() {
	*x = CMsgDOTAAnchorPhoneNumberResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAAnchorPhoneNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAAnchorPhoneNumberResponse) ProtoMessage() {}

func (x *CMsgDOTAAnchorPhoneNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAAnchorPhoneNumberResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAAnchorPhoneNumberResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{183}
}

func (x *CMsgDOTAAnchorPhoneNumberResponse) GetResult() CMsgDOTAAnchorPhoneNumberResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAAnchorPhoneNumberResponse_Result
}

type CMsgDOTAUnanchorPhoneNumberRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAUnanchorPhoneNumberRequest) Reset() {
	*x = CMsgDOTAUnanchorPhoneNumberRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAUnanchorPhoneNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAUnanchorPhoneNumberRequest) ProtoMessage() {}

func (x *CMsgDOTAUnanchorPhoneNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAUnanchorPhoneNumberRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAUnanchorPhoneNumberRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{184}
}

type CMsgDOTAUnanchorPhoneNumberResponse struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Result        *CMsgDOTAUnanchorPhoneNumberResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgDOTAUnanchorPhoneNumberResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAUnanchorPhoneNumberResponse fields.
const (
	Default_CMsgDOTAUnanchorPhoneNumberResponse_Result = CMsgDOTAUnanchorPhoneNumberResponse_SUCCESS
)

func (x *CMsgDOTAUnanchorPhoneNumberResponse) Reset() {
	*x = CMsgDOTAUnanchorPhoneNumberResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAUnanchorPhoneNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAUnanchorPhoneNumberResponse) ProtoMessage() {}

func (x *CMsgDOTAUnanchorPhoneNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAUnanchorPhoneNumberResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAUnanchorPhoneNumberResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{185}
}

func (x *CMsgDOTAUnanchorPhoneNumberResponse) GetResult() CMsgDOTAUnanchorPhoneNumberResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAUnanchorPhoneNumberResponse_Result
}

type CMsgGCToClientCommendNotification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CommenderAccountId *uint32                `protobuf:"varint,1,opt,name=commender_account_id,json=commenderAccountId" json:"commender_account_id,omitempty"`
	CommenderName      *string                `protobuf:"bytes,2,opt,name=commender_name,json=commenderName" json:"commender_name,omitempty"`
	Flags              *uint32                `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	CommenderHeroId    *int32                 `protobuf:"varint,4,opt,name=commender_hero_id,json=commenderHeroId" json:"commender_hero_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgGCToClientCommendNotification) Reset() {
	*x = CMsgGCToClientCommendNotification{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCommendNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCommendNotification) ProtoMessage() {}

func (x *CMsgGCToClientCommendNotification) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCommendNotification.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCommendNotification) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{186}
}

func (x *CMsgGCToClientCommendNotification) GetCommenderAccountId() uint32 {
	if x != nil && x.CommenderAccountId != nil {
		return *x.CommenderAccountId
	}
	return 0
}

func (x *CMsgGCToClientCommendNotification) GetCommenderName() string {
	if x != nil && x.CommenderName != nil {
		return *x.CommenderName
	}
	return ""
}

func (x *CMsgGCToClientCommendNotification) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGCToClientCommendNotification) GetCommenderHeroId() int32 {
	if x != nil && x.CommenderHeroId != nil {
		return *x.CommenderHeroId
	}
	return 0
}

type CMsgDOTAClientToGCQuickStatsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PlayerAccountId *uint32                `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	HeroId          *int32                 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	ItemId          *int32                 `protobuf:"varint,3,opt,name=item_id,json=itemId,def=-1" json:"item_id,omitempty"`
	LeagueId        *uint32                `protobuf:"varint,4,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgDOTAClientToGCQuickStatsRequest fields.
const (
	Default_CMsgDOTAClientToGCQuickStatsRequest_ItemId = int32(-1)
)

func (x *CMsgDOTAClientToGCQuickStatsRequest) Reset() {
	*x = CMsgDOTAClientToGCQuickStatsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAClientToGCQuickStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClientToGCQuickStatsRequest) ProtoMessage() {}

func (x *CMsgDOTAClientToGCQuickStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClientToGCQuickStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClientToGCQuickStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{187}
}

func (x *CMsgDOTAClientToGCQuickStatsRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAClientToGCQuickStatsRequest) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAClientToGCQuickStatsRequest) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return Default_CMsgDOTAClientToGCQuickStatsRequest_ItemId
}

func (x *CMsgDOTAClientToGCQuickStatsRequest) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

type CMsgDOTAClientToGCQuickStatsResponse struct {
	state           protoimpl.MessageState                            `protogen:"open.v1"`
	OriginalRequest *CMsgDOTAClientToGCQuickStatsRequest              `protobuf:"bytes,1,opt,name=original_request,json=originalRequest" json:"original_request,omitempty"`
	HeroStats       *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats `protobuf:"bytes,2,opt,name=hero_stats,json=heroStats" json:"hero_stats,omitempty"`
	ItemStats       *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats `protobuf:"bytes,3,opt,name=item_stats,json=itemStats" json:"item_stats,omitempty"`
	ItemHeroStats   *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats `protobuf:"bytes,4,opt,name=item_hero_stats,json=itemHeroStats" json:"item_hero_stats,omitempty"`
	ItemPlayerStats *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats `protobuf:"bytes,5,opt,name=item_player_stats,json=itemPlayerStats" json:"item_player_stats,omitempty"`
	HeroPlayerStats *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats `protobuf:"bytes,6,opt,name=hero_player_stats,json=heroPlayerStats" json:"hero_player_stats,omitempty"`
	FullSetStats    *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats `protobuf:"bytes,7,opt,name=full_set_stats,json=fullSetStats" json:"full_set_stats,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) Reset() {
	*x = CMsgDOTAClientToGCQuickStatsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClientToGCQuickStatsResponse) ProtoMessage() {}

func (x *CMsgDOTAClientToGCQuickStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClientToGCQuickStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClientToGCQuickStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{188}
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetOriginalRequest() *CMsgDOTAClientToGCQuickStatsRequest {
	if x != nil {
		return x.OriginalRequest
	}
	return nil
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetHeroStats() *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
	if x != nil {
		return x.HeroStats
	}
	return nil
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetItemStats() *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
	if x != nil {
		return x.ItemStats
	}
	return nil
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetItemHeroStats() *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
	if x != nil {
		return x.ItemHeroStats
	}
	return nil
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetItemPlayerStats() *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
	if x != nil {
		return x.ItemPlayerStats
	}
	return nil
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetHeroPlayerStats() *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
	if x != nil {
		return x.HeroPlayerStats
	}
	return nil
}

func (x *CMsgDOTAClientToGCQuickStatsResponse) GetFullSetStats() *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
	if x != nil {
		return x.FullSetStats
	}
	return nil
}

type CMsgDOTASelectionPriorityChoiceRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Choice        *DOTASelectionPriorityChoice `protobuf:"varint,1,opt,name=choice,enum=protocol.DOTASelectionPriorityChoice,def=0" json:"choice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTASelectionPriorityChoiceRequest fields.
const (
	Default_CMsgDOTASelectionPriorityChoiceRequest_Choice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
)

func (x *CMsgDOTASelectionPriorityChoiceRequest) Reset() {
	*x = CMsgDOTASelectionPriorityChoiceRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASelectionPriorityChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASelectionPriorityChoiceRequest) ProtoMessage() {}

func (x *CMsgDOTASelectionPriorityChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASelectionPriorityChoiceRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTASelectionPriorityChoiceRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{189}
}

func (x *CMsgDOTASelectionPriorityChoiceRequest) GetChoice() DOTASelectionPriorityChoice {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return Default_CMsgDOTASelectionPriorityChoiceRequest_Choice
}

type CMsgDOTASelectionPriorityChoiceResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Result        *CMsgDOTASelectionPriorityChoiceResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgDOTASelectionPriorityChoiceResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTASelectionPriorityChoiceResponse fields.
const (
	Default_CMsgDOTASelectionPriorityChoiceResponse_Result = CMsgDOTASelectionPriorityChoiceResponse_SUCCESS
)

func (x *CMsgDOTASelectionPriorityChoiceResponse) Reset() {
	*x = CMsgDOTASelectionPriorityChoiceResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTASelectionPriorityChoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTASelectionPriorityChoiceResponse) ProtoMessage() {}

func (x *CMsgDOTASelectionPriorityChoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTASelectionPriorityChoiceResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTASelectionPriorityChoiceResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{190}
}

func (x *CMsgDOTASelectionPriorityChoiceResponse) GetResult() CMsgDOTASelectionPriorityChoiceResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTASelectionPriorityChoiceResponse_Result
}

type CMsgDOTAGameAutographReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BadgeId       *string                `protobuf:"bytes,1,opt,name=badge_id,json=badgeId" json:"badge_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAGameAutographReward) Reset() {
	*x = CMsgDOTAGameAutographReward{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGameAutographReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGameAutographReward) ProtoMessage() {}

func (x *CMsgDOTAGameAutographReward) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGameAutographReward.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGameAutographReward) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{191}
}

func (x *CMsgDOTAGameAutographReward) GetBadgeId() string {
	if x != nil && x.BadgeId != nil {
		return *x.BadgeId
	}
	return ""
}

type CMsgDOTAGameAutographRewardResponse struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Result        *CMsgDOTAGameAutographRewardResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgDOTAGameAutographRewardResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAGameAutographRewardResponse fields.
const (
	Default_CMsgDOTAGameAutographRewardResponse_Result = CMsgDOTAGameAutographRewardResponse_SUCCESS
)

func (x *CMsgDOTAGameAutographRewardResponse) Reset() {
	*x = CMsgDOTAGameAutographRewardResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGameAutographRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGameAutographRewardResponse) ProtoMessage() {}

func (x *CMsgDOTAGameAutographRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGameAutographRewardResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGameAutographRewardResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{192}
}

func (x *CMsgDOTAGameAutographRewardResponse) GetResult() CMsgDOTAGameAutographRewardResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAGameAutographRewardResponse_Result
}

type CMsgDOTADestroyLobbyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTADestroyLobbyRequest) Reset() {
	*x = CMsgDOTADestroyLobbyRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTADestroyLobbyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADestroyLobbyRequest) ProtoMessage() {}

func (x *CMsgDOTADestroyLobbyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADestroyLobbyRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTADestroyLobbyRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{193}
}

type CMsgDOTADestroyLobbyResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Result        *CMsgDOTADestroyLobbyResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgDOTADestroyLobbyResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTADestroyLobbyResponse fields.
const (
	Default_CMsgDOTADestroyLobbyResponse_Result = CMsgDOTADestroyLobbyResponse_SUCCESS
)

func (x *CMsgDOTADestroyLobbyResponse) Reset() {
	*x = CMsgDOTADestroyLobbyResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTADestroyLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTADestroyLobbyResponse) ProtoMessage() {}

func (x *CMsgDOTADestroyLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTADestroyLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTADestroyLobbyResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{194}
}

func (x *CMsgDOTADestroyLobbyResponse) GetResult() CMsgDOTADestroyLobbyResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTADestroyLobbyResponse_Result
}

type CMsgDOTAGetRecentPlayTimeFriendsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAGetRecentPlayTimeFriendsRequest) Reset() {
	*x = CMsgDOTAGetRecentPlayTimeFriendsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetRecentPlayTimeFriendsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetRecentPlayTimeFriendsRequest) ProtoMessage() {}

func (x *CMsgDOTAGetRecentPlayTimeFriendsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetRecentPlayTimeFriendsRequest.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetRecentPlayTimeFriendsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{195}
}

type CMsgDOTAGetRecentPlayTimeFriendsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountIds    []uint32               `protobuf:"fixed32,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAGetRecentPlayTimeFriendsResponse) Reset() {
	*x = CMsgDOTAGetRecentPlayTimeFriendsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetRecentPlayTimeFriendsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetRecentPlayTimeFriendsResponse) ProtoMessage() {}

func (x *CMsgDOTAGetRecentPlayTimeFriendsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetRecentPlayTimeFriendsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetRecentPlayTimeFriendsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{196}
}

func (x *CMsgDOTAGetRecentPlayTimeFriendsResponse) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgPurchaseItemWithEventPoints struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ItemDef          *uint32                `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	Quantity         *uint32                `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	EventId          *EEvent                `protobuf:"varint,3,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	UsePremiumPoints *bool                  `protobuf:"varint,4,opt,name=use_premium_points,json=usePremiumPoints" json:"use_premium_points,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMsgPurchaseItemWithEventPoints fields.
const (
	Default_CMsgPurchaseItemWithEventPoints_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgPurchaseItemWithEventPoints) Reset() {
	*x = CMsgPurchaseItemWithEventPoints{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPurchaseItemWithEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPurchaseItemWithEventPoints) ProtoMessage() {}

func (x *CMsgPurchaseItemWithEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPurchaseItemWithEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgPurchaseItemWithEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{197}
}

func (x *CMsgPurchaseItemWithEventPoints) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgPurchaseItemWithEventPoints) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *CMsgPurchaseItemWithEventPoints) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgPurchaseItemWithEventPoints_EventId
}

func (x *CMsgPurchaseItemWithEventPoints) GetUsePremiumPoints() bool {
	if x != nil && x.UsePremiumPoints != nil {
		return *x.UsePremiumPoints
	}
	return false
}

type CMsgPurchaseItemWithEventPointsResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Result        *CMsgPurchaseItemWithEventPointsResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgPurchaseItemWithEventPointsResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgPurchaseItemWithEventPointsResponse fields.
const (
	Default_CMsgPurchaseItemWithEventPointsResponse_Result = CMsgPurchaseItemWithEventPointsResponse_SUCCESS
)

func (x *CMsgPurchaseItemWithEventPointsResponse) Reset() {
	*x = CMsgPurchaseItemWithEventPointsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPurchaseItemWithEventPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPurchaseItemWithEventPointsResponse) ProtoMessage() {}

func (x *CMsgPurchaseItemWithEventPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPurchaseItemWithEventPointsResponse.ProtoReflect.Descriptor instead.
func (*CMsgPurchaseItemWithEventPointsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{198}
}

func (x *CMsgPurchaseItemWithEventPointsResponse) GetResult() CMsgPurchaseItemWithEventPointsResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgPurchaseItemWithEventPointsResponse_Result
}

type CMsgPurchaseHeroRandomRelic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	RelicRarity   *EHeroRelicRarity      `protobuf:"varint,2,opt,name=relic_rarity,json=relicRarity,enum=protocol.EHeroRelicRarity,def=-1" json:"relic_rarity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgPurchaseHeroRandomRelic fields.
const (
	Default_CMsgPurchaseHeroRandomRelic_RelicRarity = EHeroRelicRarity_HERO_RELIC_RARITY_INVALID
)

func (x *CMsgPurchaseHeroRandomRelic) Reset() {
	*x = CMsgPurchaseHeroRandomRelic{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPurchaseHeroRandomRelic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPurchaseHeroRandomRelic) ProtoMessage() {}

func (x *CMsgPurchaseHeroRandomRelic) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPurchaseHeroRandomRelic.ProtoReflect.Descriptor instead.
func (*CMsgPurchaseHeroRandomRelic) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{199}
}

func (x *CMsgPurchaseHeroRandomRelic) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgPurchaseHeroRandomRelic) GetRelicRarity() EHeroRelicRarity {
	if x != nil && x.RelicRarity != nil {
		return *x.RelicRarity
	}
	return Default_CMsgPurchaseHeroRandomRelic_RelicRarity
}

type CMsgPurchaseHeroRandomRelicResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Result        *EPurchaseHeroRelicResult `protobuf:"varint,1,opt,name=result,enum=protocol.EPurchaseHeroRelicResult,def=0" json:"result,omitempty"`
	KillEaterType *uint32                   `protobuf:"varint,2,opt,name=kill_eater_type,json=killEaterType" json:"kill_eater_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgPurchaseHeroRandomRelicResponse fields.
const (
	Default_CMsgPurchaseHeroRandomRelicResponse_Result = EPurchaseHeroRelicResult_k_EPurchaseHeroRelicResult_Success
)

func (x *CMsgPurchaseHeroRandomRelicResponse) Reset() {
	*x = CMsgPurchaseHeroRandomRelicResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPurchaseHeroRandomRelicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPurchaseHeroRandomRelicResponse) ProtoMessage() {}

func (x *CMsgPurchaseHeroRandomRelicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPurchaseHeroRandomRelicResponse.ProtoReflect.Descriptor instead.
func (*CMsgPurchaseHeroRandomRelicResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{200}
}

func (x *CMsgPurchaseHeroRandomRelicResponse) GetResult() EPurchaseHeroRelicResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgPurchaseHeroRandomRelicResponse_Result
}

func (x *CMsgPurchaseHeroRandomRelicResponse) GetKillEaterType() uint32 {
	if x != nil && x.KillEaterType != nil {
		return *x.KillEaterType
	}
	return 0
}

type CMsgClientToGCRequestPlusWeeklyChallengeResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	Week          *uint32                `protobuf:"varint,2,opt,name=week" json:"week,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestPlusWeeklyChallengeResult fields.
const (
	Default_CMsgClientToGCRequestPlusWeeklyChallengeResult_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResult) Reset() {
	*x = CMsgClientToGCRequestPlusWeeklyChallengeResult{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestPlusWeeklyChallengeResult) ProtoMessage() {}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResult) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestPlusWeeklyChallengeResult.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestPlusWeeklyChallengeResult) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{201}
}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResult) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCRequestPlusWeeklyChallengeResult_EventId
}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResult) GetWeek() uint32 {
	if x != nil && x.Week != nil {
		return *x.Week
	}
	return 0
}

type CMsgClientToGCRequestPlusWeeklyChallengeResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResultResponse) Reset() {
	*x = CMsgClientToGCRequestPlusWeeklyChallengeResultResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestPlusWeeklyChallengeResultResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestPlusWeeklyChallengeResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestPlusWeeklyChallengeResultResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestPlusWeeklyChallengeResultResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{202}
}

type CMsgProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgProfileRequest) Reset() {
	*x = CMsgProfileRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProfileRequest) ProtoMessage() {}

func (x *CMsgProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProfileRequest.ProtoReflect.Descriptor instead.
func (*CMsgProfileRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{203}
}

func (x *CMsgProfileRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgProfileResponse struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	BackgroundItem     *CSOEconItem                        `protobuf:"bytes,1,opt,name=background_item,json=backgroundItem" json:"background_item,omitempty"`
	FeaturedHeroes     []*CMsgProfileResponse_FeaturedHero `protobuf:"bytes,2,rep,name=featured_heroes,json=featuredHeroes" json:"featured_heroes,omitempty"`
	RecentMatches      []*CMsgProfileResponse_MatchInfo    `protobuf:"bytes,3,rep,name=recent_matches,json=recentMatches" json:"recent_matches,omitempty"`
	SuccessfulHeroes   []*CMsgSuccessfulHero               `protobuf:"bytes,4,rep,name=successful_heroes,json=successfulHeroes" json:"successful_heroes,omitempty"`
	RecentMatchDetails *CMsgRecentMatchInfo                `protobuf:"bytes,5,opt,name=recent_match_details,json=recentMatchDetails" json:"recent_match_details,omitempty"`
	Result             *CMsgProfileResponse_EResponse      `protobuf:"varint,6,opt,name=result,enum=protocol.CMsgProfileResponse_EResponse,def=0" json:"result,omitempty"`
	StickerbookPage    *CMsgStickerbookPage                `protobuf:"bytes,7,opt,name=stickerbook_page,json=stickerbookPage" json:"stickerbook_page,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgProfileResponse fields.
const (
	Default_CMsgProfileResponse_Result = CMsgProfileResponse_k_eInternalError
)

func (x *CMsgProfileResponse) Reset() {
	*x = CMsgProfileResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProfileResponse) ProtoMessage() {}

func (x *CMsgProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProfileResponse.ProtoReflect.Descriptor instead.
func (*CMsgProfileResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{204}
}

func (x *CMsgProfileResponse) GetBackgroundItem() *CSOEconItem {
	if x != nil {
		return x.BackgroundItem
	}
	return nil
}

func (x *CMsgProfileResponse) GetFeaturedHeroes() []*CMsgProfileResponse_FeaturedHero {
	if x != nil {
		return x.FeaturedHeroes
	}
	return nil
}

func (x *CMsgProfileResponse) GetRecentMatches() []*CMsgProfileResponse_MatchInfo {
	if x != nil {
		return x.RecentMatches
	}
	return nil
}

func (x *CMsgProfileResponse) GetSuccessfulHeroes() []*CMsgSuccessfulHero {
	if x != nil {
		return x.SuccessfulHeroes
	}
	return nil
}

func (x *CMsgProfileResponse) GetRecentMatchDetails() *CMsgRecentMatchInfo {
	if x != nil {
		return x.RecentMatchDetails
	}
	return nil
}

func (x *CMsgProfileResponse) GetResult() CMsgProfileResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgProfileResponse_Result
}

func (x *CMsgProfileResponse) GetStickerbookPage() *CMsgStickerbookPage {
	if x != nil {
		return x.StickerbookPage
	}
	return nil
}

type CMsgProfileUpdate struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BackgroundItemId *uint64                `protobuf:"varint,1,opt,name=background_item_id,json=backgroundItemId" json:"background_item_id,omitempty"`
	FeaturedHeroIds  []int32                `protobuf:"varint,2,rep,name=featured_hero_ids,json=featuredHeroIds" json:"featured_hero_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgProfileUpdate) Reset() {
	*x = CMsgProfileUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgProfileUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProfileUpdate) ProtoMessage() {}

func (x *CMsgProfileUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProfileUpdate.ProtoReflect.Descriptor instead.
func (*CMsgProfileUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{205}
}

func (x *CMsgProfileUpdate) GetBackgroundItemId() uint64 {
	if x != nil && x.BackgroundItemId != nil {
		return *x.BackgroundItemId
	}
	return 0
}

func (x *CMsgProfileUpdate) GetFeaturedHeroIds() []int32 {
	if x != nil {
		return x.FeaturedHeroIds
	}
	return nil
}

type CMsgProfileUpdateResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Result        *CMsgProfileUpdateResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgProfileUpdateResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgProfileUpdateResponse fields.
const (
	Default_CMsgProfileUpdateResponse_Result = CMsgProfileUpdateResponse_SUCCESS
)

func (x *CMsgProfileUpdateResponse) Reset() {
	*x = CMsgProfileUpdateResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgProfileUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProfileUpdateResponse) ProtoMessage() {}

func (x *CMsgProfileUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProfileUpdateResponse.ProtoReflect.Descriptor instead.
func (*CMsgProfileUpdateResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{206}
}

func (x *CMsgProfileUpdateResponse) GetResult() CMsgProfileUpdateResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgProfileUpdateResponse_Result
}

type CMsgTalentWinRates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastRun       *uint32                `protobuf:"varint,1,opt,name=last_run,json=lastRun" json:"last_run,omitempty"`
	AbilityId     *int32                 `protobuf:"varint,2,opt,name=ability_id,json=abilityId,def=-1" json:"ability_id,omitempty"`
	GameCount     *uint32                `protobuf:"varint,3,opt,name=game_count,json=gameCount" json:"game_count,omitempty"`
	WinCount      *uint32                `protobuf:"varint,4,opt,name=win_count,json=winCount" json:"win_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgTalentWinRates fields.
const (
	Default_CMsgTalentWinRates_AbilityId = int32(-1)
)

func (x *CMsgTalentWinRates) Reset() {
	*x = CMsgTalentWinRates{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTalentWinRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTalentWinRates) ProtoMessage() {}

func (x *CMsgTalentWinRates) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTalentWinRates.ProtoReflect.Descriptor instead.
func (*CMsgTalentWinRates) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{207}
}

func (x *CMsgTalentWinRates) GetLastRun() uint32 {
	if x != nil && x.LastRun != nil {
		return *x.LastRun
	}
	return 0
}

func (x *CMsgTalentWinRates) GetAbilityId() int32 {
	if x != nil && x.AbilityId != nil {
		return *x.AbilityId
	}
	return Default_CMsgTalentWinRates_AbilityId
}

func (x *CMsgTalentWinRates) GetGameCount() uint32 {
	if x != nil && x.GameCount != nil {
		return *x.GameCount
	}
	return 0
}

func (x *CMsgTalentWinRates) GetWinCount() uint32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

type CMsgGlobalHeroAverages struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastRun       *uint32                `protobuf:"varint,1,opt,name=last_run,json=lastRun" json:"last_run,omitempty"`
	AvgGoldPerMin *uint32                `protobuf:"varint,3,opt,name=avg_gold_per_min,json=avgGoldPerMin" json:"avg_gold_per_min,omitempty"`
	AvgXpPerMin   *uint32                `protobuf:"varint,4,opt,name=avg_xp_per_min,json=avgXpPerMin" json:"avg_xp_per_min,omitempty"`
	AvgKills      *uint32                `protobuf:"varint,5,opt,name=avg_kills,json=avgKills" json:"avg_kills,omitempty"`
	AvgDeaths     *uint32                `protobuf:"varint,6,opt,name=avg_deaths,json=avgDeaths" json:"avg_deaths,omitempty"`
	AvgAssists    *uint32                `protobuf:"varint,7,opt,name=avg_assists,json=avgAssists" json:"avg_assists,omitempty"`
	AvgLastHits   *uint32                `protobuf:"varint,8,opt,name=avg_last_hits,json=avgLastHits" json:"avg_last_hits,omitempty"`
	AvgDenies     *uint32                `protobuf:"varint,9,opt,name=avg_denies,json=avgDenies" json:"avg_denies,omitempty"`
	AvgNetWorth   *uint32                `protobuf:"varint,10,opt,name=avg_net_worth,json=avgNetWorth" json:"avg_net_worth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGlobalHeroAverages) Reset() {
	*x = CMsgGlobalHeroAverages{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGlobalHeroAverages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGlobalHeroAverages) ProtoMessage() {}

func (x *CMsgGlobalHeroAverages) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGlobalHeroAverages.ProtoReflect.Descriptor instead.
func (*CMsgGlobalHeroAverages) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{208}
}

func (x *CMsgGlobalHeroAverages) GetLastRun() uint32 {
	if x != nil && x.LastRun != nil {
		return *x.LastRun
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgGoldPerMin() uint32 {
	if x != nil && x.AvgGoldPerMin != nil {
		return *x.AvgGoldPerMin
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgXpPerMin() uint32 {
	if x != nil && x.AvgXpPerMin != nil {
		return *x.AvgXpPerMin
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgKills() uint32 {
	if x != nil && x.AvgKills != nil {
		return *x.AvgKills
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgDeaths() uint32 {
	if x != nil && x.AvgDeaths != nil {
		return *x.AvgDeaths
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgAssists() uint32 {
	if x != nil && x.AvgAssists != nil {
		return *x.AvgAssists
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgLastHits() uint32 {
	if x != nil && x.AvgLastHits != nil {
		return *x.AvgLastHits
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgDenies() uint32 {
	if x != nil && x.AvgDenies != nil {
		return *x.AvgDenies
	}
	return 0
}

func (x *CMsgGlobalHeroAverages) GetAvgNetWorth() uint32 {
	if x != nil && x.AvgNetWorth != nil {
		return *x.AvgNetWorth
	}
	return 0
}

type CMsgHeroGlobalDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataRequest) Reset() {
	*x = CMsgHeroGlobalDataRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataRequest) ProtoMessage() {}

func (x *CMsgHeroGlobalDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataRequest.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{209}
}

func (x *CMsgHeroGlobalDataRequest) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgHeroGlobalDataResponse struct {
	state            protoimpl.MessageState                             `protogen:"open.v1"`
	HeroId           *int32                                             `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroDataPerChunk []*CMsgHeroGlobalDataResponse_HeroDataPerRankChunk `protobuf:"bytes,2,rep,name=hero_data_per_chunk,json=heroDataPerChunk" json:"hero_data_per_chunk,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataResponse) Reset() {
	*x = CMsgHeroGlobalDataResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataResponse) ProtoMessage() {}

func (x *CMsgHeroGlobalDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{210}
}

func (x *CMsgHeroGlobalDataResponse) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse) GetHeroDataPerChunk() []*CMsgHeroGlobalDataResponse_HeroDataPerRankChunk {
	if x != nil {
		return x.HeroDataPerChunk
	}
	return nil
}

type CMsgHeroGlobalDataAllHeroes struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Heroes        []*CMsgHeroGlobalDataResponse `protobuf:"bytes,1,rep,name=heroes" json:"heroes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataAllHeroes) Reset() {
	*x = CMsgHeroGlobalDataAllHeroes{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataAllHeroes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataAllHeroes) ProtoMessage() {}

func (x *CMsgHeroGlobalDataAllHeroes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataAllHeroes.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataAllHeroes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{211}
}

func (x *CMsgHeroGlobalDataAllHeroes) GetHeroes() []*CMsgHeroGlobalDataResponse {
	if x != nil {
		return x.Heroes
	}
	return nil
}

type CMsgHeroGlobalDataHeroesAlliesAndEnemies struct {
	state          protoimpl.MessageState                                     `protogen:"open.v1"`
	RankedHeroData []*CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData `protobuf:"bytes,1,rep,name=ranked_hero_data,json=rankedHeroData" json:"ranked_hero_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies) Reset() {
	*x = CMsgHeroGlobalDataHeroesAlliesAndEnemies{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataHeroesAlliesAndEnemies) ProtoMessage() {}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataHeroesAlliesAndEnemies.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataHeroesAlliesAndEnemies) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{212}
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies) GetRankedHeroData() []*CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData {
	if x != nil {
		return x.RankedHeroData
	}
	return nil
}

type CMsgPrivateMetadataKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPrivateMetadataKeyRequest) Reset() {
	*x = CMsgPrivateMetadataKeyRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPrivateMetadataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPrivateMetadataKeyRequest) ProtoMessage() {}

func (x *CMsgPrivateMetadataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPrivateMetadataKeyRequest.ProtoReflect.Descriptor instead.
func (*CMsgPrivateMetadataKeyRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{213}
}

func (x *CMsgPrivateMetadataKeyRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

type CMsgPrivateMetadataKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrivateKey    *uint32                `protobuf:"varint,1,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPrivateMetadataKeyResponse) Reset() {
	*x = CMsgPrivateMetadataKeyResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPrivateMetadataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPrivateMetadataKeyResponse) ProtoMessage() {}

func (x *CMsgPrivateMetadataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPrivateMetadataKeyResponse.ProtoReflect.Descriptor instead.
func (*CMsgPrivateMetadataKeyResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{214}
}

func (x *CMsgPrivateMetadataKeyResponse) GetPrivateKey() uint32 {
	if x != nil && x.PrivateKey != nil {
		return *x.PrivateKey
	}
	return 0
}

type CMsgActivatePlusFreeTrialResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Result        *CMsgActivatePlusFreeTrialResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgActivatePlusFreeTrialResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgActivatePlusFreeTrialResponse fields.
const (
	Default_CMsgActivatePlusFreeTrialResponse_Result = CMsgActivatePlusFreeTrialResponse_SUCCESS
)

func (x *CMsgActivatePlusFreeTrialResponse) Reset() {
	*x = CMsgActivatePlusFreeTrialResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgActivatePlusFreeTrialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgActivatePlusFreeTrialResponse) ProtoMessage() {}

func (x *CMsgActivatePlusFreeTrialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgActivatePlusFreeTrialResponse.ProtoReflect.Descriptor instead.
func (*CMsgActivatePlusFreeTrialResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{215}
}

func (x *CMsgActivatePlusFreeTrialResponse) GetResult() CMsgActivatePlusFreeTrialResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgActivatePlusFreeTrialResponse_Result
}

type CMsgGCToClientCavernCrawlMapPathCompleted struct {
	state           protoimpl.MessageState                                         `protogen:"open.v1"`
	EventId         *uint32                                                        `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	HeroIdCompleted *int32                                                         `protobuf:"varint,2,opt,name=hero_id_completed,json=heroIdCompleted" json:"hero_id_completed,omitempty"`
	CompletedPaths  []*CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo `protobuf:"bytes,3,rep,name=completed_paths,json=completedPaths" json:"completed_paths,omitempty"`
	MapVariant      *uint32                                                        `protobuf:"varint,4,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgGCToClientCavernCrawlMapPathCompleted fields.
const (
	Default_CMsgGCToClientCavernCrawlMapPathCompleted_MapVariant = uint32(255)
)

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) Reset() {
	*x = CMsgGCToClientCavernCrawlMapPathCompleted{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCavernCrawlMapPathCompleted) ProtoMessage() {}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCavernCrawlMapPathCompleted.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCavernCrawlMapPathCompleted) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{216}
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) GetHeroIdCompleted() int32 {
	if x != nil && x.HeroIdCompleted != nil {
		return *x.HeroIdCompleted
	}
	return 0
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) GetCompletedPaths() []*CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo {
	if x != nil {
		return x.CompletedPaths
	}
	return nil
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgGCToClientCavernCrawlMapPathCompleted_MapVariant
}

type CMsgGCToClientCavernCrawlMapUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientCavernCrawlMapUpdated) Reset() {
	*x = CMsgGCToClientCavernCrawlMapUpdated{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCavernCrawlMapUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCavernCrawlMapUpdated) ProtoMessage() {}

func (x *CMsgGCToClientCavernCrawlMapUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCavernCrawlMapUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCavernCrawlMapUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{217}
}

func (x *CMsgGCToClientCavernCrawlMapUpdated) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCCavernCrawlClaimRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	RoomId        *uint32                `protobuf:"varint,2,opt,name=room_id,json=roomId,def=255" json:"room_id,omitempty"`
	MapVariant    *uint32                `protobuf:"varint,3,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlClaimRoom fields.
const (
	Default_CMsgClientToGCCavernCrawlClaimRoom_RoomId     = uint32(255)
	Default_CMsgClientToGCCavernCrawlClaimRoom_MapVariant = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlClaimRoom) Reset() {
	*x = CMsgClientToGCCavernCrawlClaimRoom{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlClaimRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlClaimRoom) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlClaimRoom) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlClaimRoom.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlClaimRoom) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{218}
}

func (x *CMsgClientToGCCavernCrawlClaimRoom) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlClaimRoom) GetRoomId() uint32 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return Default_CMsgClientToGCCavernCrawlClaimRoom_RoomId
}

func (x *CMsgClientToGCCavernCrawlClaimRoom) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgClientToGCCavernCrawlClaimRoom_MapVariant
}

type CMsgClientToGCCavernCrawlClaimRoomResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Result        *CMsgClientToGCCavernCrawlClaimRoomResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCavernCrawlClaimRoomResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlClaimRoomResponse fields.
const (
	Default_CMsgClientToGCCavernCrawlClaimRoomResponse_Result = CMsgClientToGCCavernCrawlClaimRoomResponse_SUCCESS
)

func (x *CMsgClientToGCCavernCrawlClaimRoomResponse) Reset() {
	*x = CMsgClientToGCCavernCrawlClaimRoomResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlClaimRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlClaimRoomResponse) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlClaimRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlClaimRoomResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlClaimRoomResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{219}
}

func (x *CMsgClientToGCCavernCrawlClaimRoomResponse) GetResult() CMsgClientToGCCavernCrawlClaimRoomResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCavernCrawlClaimRoomResponse_Result
}

type CMsgClientToGCCavernCrawlUseItemOnRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	RoomId        *uint32                `protobuf:"varint,2,opt,name=room_id,json=roomId,def=255" json:"room_id,omitempty"`
	ItemType      *uint32                `protobuf:"varint,3,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	MapVariant    *uint32                `protobuf:"varint,4,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlUseItemOnRoom fields.
const (
	Default_CMsgClientToGCCavernCrawlUseItemOnRoom_RoomId     = uint32(255)
	Default_CMsgClientToGCCavernCrawlUseItemOnRoom_MapVariant = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) Reset() {
	*x = CMsgClientToGCCavernCrawlUseItemOnRoom{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlUseItemOnRoom) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlUseItemOnRoom.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlUseItemOnRoom) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{220}
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) GetRoomId() uint32 {
	if x != nil && x.RoomId != nil {
		return *x.RoomId
	}
	return Default_CMsgClientToGCCavernCrawlUseItemOnRoom_RoomId
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoom) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgClientToGCCavernCrawlUseItemOnRoom_MapVariant
}

type CMsgClientToGCCavernCrawlUseItemOnRoomResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Result        *CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlUseItemOnRoomResponse fields.
const (
	Default_CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result = CMsgClientToGCCavernCrawlUseItemOnRoomResponse_SUCCESS
)

func (x *CMsgClientToGCCavernCrawlUseItemOnRoomResponse) Reset() {
	*x = CMsgClientToGCCavernCrawlUseItemOnRoomResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlUseItemOnRoomResponse) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlUseItemOnRoomResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlUseItemOnRoomResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{221}
}

func (x *CMsgClientToGCCavernCrawlUseItemOnRoomResponse) GetResult() CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result
}

type CMsgClientToGCCavernCrawlUseItemOnPath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	PathId        *uint32                `protobuf:"varint,2,opt,name=path_id,json=pathId,def=255" json:"path_id,omitempty"`
	ItemType      *uint32                `protobuf:"varint,3,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	MapVariant    *uint32                `protobuf:"varint,4,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlUseItemOnPath fields.
const (
	Default_CMsgClientToGCCavernCrawlUseItemOnPath_PathId     = uint32(255)
	Default_CMsgClientToGCCavernCrawlUseItemOnPath_MapVariant = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) Reset() {
	*x = CMsgClientToGCCavernCrawlUseItemOnPath{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlUseItemOnPath) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlUseItemOnPath.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlUseItemOnPath) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{222}
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) GetPathId() uint32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return Default_CMsgClientToGCCavernCrawlUseItemOnPath_PathId
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPath) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgClientToGCCavernCrawlUseItemOnPath_MapVariant
}

type CMsgClientToGCCavernCrawlUseItemOnPathResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Result        *CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlUseItemOnPathResponse fields.
const (
	Default_CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result = CMsgClientToGCCavernCrawlUseItemOnPathResponse_SUCCESS
)

func (x *CMsgClientToGCCavernCrawlUseItemOnPathResponse) Reset() {
	*x = CMsgClientToGCCavernCrawlUseItemOnPathResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlUseItemOnPathResponse) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlUseItemOnPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlUseItemOnPathResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlUseItemOnPathResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{223}
}

func (x *CMsgClientToGCCavernCrawlUseItemOnPathResponse) GetResult() CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result
}

type CMsgClientToGCCavernCrawlRequestMapState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCCavernCrawlRequestMapState) Reset() {
	*x = CMsgClientToGCCavernCrawlRequestMapState{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlRequestMapState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlRequestMapState) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlRequestMapState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapState.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlRequestMapState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{224}
}

func (x *CMsgClientToGCCavernCrawlRequestMapState) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCCavernCrawlRequestMapStateResponse struct {
	state                    protoimpl.MessageState                                            `protogen:"open.v1"`
	Result                   *CMsgClientToGCCavernCrawlRequestMapStateResponse_Result          `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse_Result,def=0" json:"result,omitempty"`
	AvailableMapVariantsMask *uint32                                                           `protobuf:"varint,2,opt,name=available_map_variants_mask,json=availableMapVariantsMask" json:"available_map_variants_mask,omitempty"`
	InventoryItem            []*CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem `protobuf:"bytes,3,rep,name=inventory_item,json=inventoryItem" json:"inventory_item,omitempty"`
	MapVariants              []*CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant    `protobuf:"bytes,4,rep,name=map_variants,json=mapVariants" json:"map_variants,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlRequestMapStateResponse fields.
const (
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_Result = CMsgClientToGCCavernCrawlRequestMapStateResponse_SUCCESS
)

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) Reset() {
	*x = CMsgClientToGCCavernCrawlRequestMapStateResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlRequestMapStateResponse) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapStateResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlRequestMapStateResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{225}
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) GetResult() CMsgClientToGCCavernCrawlRequestMapStateResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_Result
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) GetAvailableMapVariantsMask() uint32 {
	if x != nil && x.AvailableMapVariantsMask != nil {
		return *x.AvailableMapVariantsMask
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) GetInventoryItem() []*CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem {
	if x != nil {
		return x.InventoryItem
	}
	return nil
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse) GetMapVariants() []*CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant {
	if x != nil {
		return x.MapVariants
	}
	return nil
}

type CMsgClientToGCCavernCrawlGetClaimedRoomCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCount) Reset() {
	*x = CMsgClientToGCCavernCrawlGetClaimedRoomCount{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlGetClaimedRoomCount) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlGetClaimedRoomCount.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlGetClaimedRoomCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{226}
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCount) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse struct {
	state                    protoimpl.MessageState                                             `protogen:"open.v1"`
	Result                   *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result       `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result,def=0" json:"result,omitempty"`
	MapVariants              []*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant `protobuf:"bytes,2,rep,name=map_variants,json=mapVariants" json:"map_variants,omitempty"`
	AvailableMapVariantsMask *uint32                                                            `protobuf:"varint,3,opt,name=available_map_variants_mask,json=availableMapVariantsMask" json:"available_map_variants_mask,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse fields.
const (
	Default_CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result = CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_SUCCESS
)

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) Reset() {
	*x = CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{227}
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) GetResult() CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) GetMapVariants() []*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant {
	if x != nil {
		return x.MapVariants
	}
	return nil
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse) GetAvailableMapVariantsMask() uint32 {
	if x != nil && x.AvailableMapVariantsMask != nil {
		return *x.AvailableMapVariantsMask
	}
	return 0
}

type CMsgDOTAMutationList struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Mutations     []*CMsgDOTAMutationList_Mutation `protobuf:"bytes,1,rep,name=mutations" json:"mutations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAMutationList) Reset() {
	*x = CMsgDOTAMutationList{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAMutationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMutationList) ProtoMessage() {}

func (x *CMsgDOTAMutationList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMutationList.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMutationList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{228}
}

func (x *CMsgDOTAMutationList) GetMutations() []*CMsgDOTAMutationList_Mutation {
	if x != nil {
		return x.Mutations
	}
	return nil
}

type CMsgEventTipsSummaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	AccountId     *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgEventTipsSummaryRequest fields.
const (
	Default_CMsgEventTipsSummaryRequest_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgEventTipsSummaryRequest) Reset() {
	*x = CMsgEventTipsSummaryRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEventTipsSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventTipsSummaryRequest) ProtoMessage() {}

func (x *CMsgEventTipsSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventTipsSummaryRequest.ProtoReflect.Descriptor instead.
func (*CMsgEventTipsSummaryRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{229}
}

func (x *CMsgEventTipsSummaryRequest) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgEventTipsSummaryRequest_EventId
}

func (x *CMsgEventTipsSummaryRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgEventTipsSummaryResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Result        *bool                                  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	TipsReceived  []*CMsgEventTipsSummaryResponse_Tipper `protobuf:"bytes,2,rep,name=tips_received,json=tipsReceived" json:"tips_received,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgEventTipsSummaryResponse) Reset() {
	*x = CMsgEventTipsSummaryResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEventTipsSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventTipsSummaryResponse) ProtoMessage() {}

func (x *CMsgEventTipsSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventTipsSummaryResponse.ProtoReflect.Descriptor instead.
func (*CMsgEventTipsSummaryResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{230}
}

func (x *CMsgEventTipsSummaryResponse) GetResult() bool {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return false
}

func (x *CMsgEventTipsSummaryResponse) GetTipsReceived() []*CMsgEventTipsSummaryResponse_Tipper {
	if x != nil {
		return x.TipsReceived
	}
	return nil
}

type CMsgSocialFeedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SelfOnly      *bool                  `protobuf:"varint,2,opt,name=self_only,json=selfOnly" json:"self_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSocialFeedRequest) Reset() {
	*x = CMsgSocialFeedRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSocialFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSocialFeedRequest) ProtoMessage() {}

func (x *CMsgSocialFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSocialFeedRequest.ProtoReflect.Descriptor instead.
func (*CMsgSocialFeedRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{231}
}

func (x *CMsgSocialFeedRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSocialFeedRequest) GetSelfOnly() bool {
	if x != nil && x.SelfOnly != nil {
		return *x.SelfOnly
	}
	return false
}

type CMsgSocialFeedResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Result        *CMsgSocialFeedResponse_Result      `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgSocialFeedResponse_Result,def=0" json:"result,omitempty"`
	FeedEvents    []*CMsgSocialFeedResponse_FeedEvent `protobuf:"bytes,2,rep,name=feed_events,json=feedEvents" json:"feed_events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSocialFeedResponse fields.
const (
	Default_CMsgSocialFeedResponse_Result = CMsgSocialFeedResponse_SUCCESS
)

func (x *CMsgSocialFeedResponse) Reset() {
	*x = CMsgSocialFeedResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSocialFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSocialFeedResponse) ProtoMessage() {}

func (x *CMsgSocialFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSocialFeedResponse.ProtoReflect.Descriptor instead.
func (*CMsgSocialFeedResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{232}
}

func (x *CMsgSocialFeedResponse) GetResult() CMsgSocialFeedResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgSocialFeedResponse_Result
}

func (x *CMsgSocialFeedResponse) GetFeedEvents() []*CMsgSocialFeedResponse_FeedEvent {
	if x != nil {
		return x.FeedEvents
	}
	return nil
}

type CMsgSocialFeedCommentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FeedEventId   *uint64                `protobuf:"varint,1,opt,name=feed_event_id,json=feedEventId" json:"feed_event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSocialFeedCommentsRequest) Reset() {
	*x = CMsgSocialFeedCommentsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSocialFeedCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSocialFeedCommentsRequest) ProtoMessage() {}

func (x *CMsgSocialFeedCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSocialFeedCommentsRequest.ProtoReflect.Descriptor instead.
func (*CMsgSocialFeedCommentsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{233}
}

func (x *CMsgSocialFeedCommentsRequest) GetFeedEventId() uint64 {
	if x != nil && x.FeedEventId != nil {
		return *x.FeedEventId
	}
	return 0
}

type CMsgSocialFeedCommentsResponse struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Result        *CMsgSocialFeedCommentsResponse_Result        `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgSocialFeedCommentsResponse_Result,def=0" json:"result,omitempty"`
	FeedComments  []*CMsgSocialFeedCommentsResponse_FeedComment `protobuf:"bytes,3,rep,name=feed_comments,json=feedComments" json:"feed_comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSocialFeedCommentsResponse fields.
const (
	Default_CMsgSocialFeedCommentsResponse_Result = CMsgSocialFeedCommentsResponse_SUCCESS
)

func (x *CMsgSocialFeedCommentsResponse) Reset() {
	*x = CMsgSocialFeedCommentsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSocialFeedCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSocialFeedCommentsResponse) ProtoMessage() {}

func (x *CMsgSocialFeedCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSocialFeedCommentsResponse.ProtoReflect.Descriptor instead.
func (*CMsgSocialFeedCommentsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{234}
}

func (x *CMsgSocialFeedCommentsResponse) GetResult() CMsgSocialFeedCommentsResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgSocialFeedCommentsResponse_Result
}

func (x *CMsgSocialFeedCommentsResponse) GetFeedComments() []*CMsgSocialFeedCommentsResponse_FeedComment {
	if x != nil {
		return x.FeedComments
	}
	return nil
}

type CMsgClientToGCPlayerCardSpecificPurchaseRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PlayerAccountId *uint32                `protobuf:"varint,1,opt,name=player_account_id,json=playerAccountId" json:"player_account_id,omitempty"`
	EventId         *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	CardDustItemId  *uint64                `protobuf:"varint,3,opt,name=card_dust_item_id,json=cardDustItemId" json:"card_dust_item_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseRequest) Reset() {
	*x = CMsgClientToGCPlayerCardSpecificPurchaseRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlayerCardSpecificPurchaseRequest) ProtoMessage() {}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlayerCardSpecificPurchaseRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlayerCardSpecificPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{235}
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseRequest) GetPlayerAccountId() uint32 {
	if x != nil && x.PlayerAccountId != nil {
		return *x.PlayerAccountId
	}
	return 0
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseRequest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseRequest) GetCardDustItemId() uint64 {
	if x != nil && x.CardDustItemId != nil {
		return *x.CardDustItemId
	}
	return 0
}

type CMsgClientToGCPlayerCardSpecificPurchaseResponse struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Result        *CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result,def=1" json:"result,omitempty"`
	ItemId        *uint64                                                  `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCPlayerCardSpecificPurchaseResponse fields.
const (
	Default_CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result = CMsgClientToGCPlayerCardSpecificPurchaseResponse_SUCCESS
)

func (x *CMsgClientToGCPlayerCardSpecificPurchaseResponse) Reset() {
	*x = CMsgClientToGCPlayerCardSpecificPurchaseResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlayerCardSpecificPurchaseResponse) ProtoMessage() {}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlayerCardSpecificPurchaseResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlayerCardSpecificPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{236}
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseResponse) GetResult() CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result
}

func (x *CMsgClientToGCPlayerCardSpecificPurchaseResponse) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgClientToGCRequestContestVotes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     *uint32                `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestContestVotes) Reset() {
	*x = CMsgClientToGCRequestContestVotes{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestContestVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestContestVotes) ProtoMessage() {}

func (x *CMsgClientToGCRequestContestVotes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestContestVotes.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestContestVotes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{237}
}

func (x *CMsgClientToGCRequestContestVotes) GetContestId() uint32 {
	if x != nil && x.ContestId != nil {
		return *x.ContestId
	}
	return 0
}

type CMsgClientToGCRequestContestVotesResponse struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Result        *CMsgClientToGCRequestContestVotesResponse_EResponse  `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCRequestContestVotesResponse_EResponse,def=0" json:"result,omitempty"`
	Votes         []*CMsgClientToGCRequestContestVotesResponse_ItemVote `protobuf:"bytes,2,rep,name=votes" json:"votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestContestVotesResponse fields.
const (
	Default_CMsgClientToGCRequestContestVotesResponse_Result = CMsgClientToGCRequestContestVotesResponse_k_eInternalError
)

func (x *CMsgClientToGCRequestContestVotesResponse) Reset() {
	*x = CMsgClientToGCRequestContestVotesResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestContestVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestContestVotesResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestContestVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestContestVotesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestContestVotesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{238}
}

func (x *CMsgClientToGCRequestContestVotesResponse) GetResult() CMsgClientToGCRequestContestVotesResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRequestContestVotesResponse_Result
}

func (x *CMsgClientToGCRequestContestVotesResponse) GetVotes() []*CMsgClientToGCRequestContestVotesResponse_ItemVote {
	if x != nil {
		return x.Votes
	}
	return nil
}

type CMsgClientToGCRecordContestVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     *uint32                `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	ContestItemId *uint64                `protobuf:"varint,2,opt,name=contest_item_id,json=contestItemId" json:"contest_item_id,omitempty"`
	Vote          *int32                 `protobuf:"varint,3,opt,name=vote" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRecordContestVote) Reset() {
	*x = CMsgClientToGCRecordContestVote{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRecordContestVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecordContestVote) ProtoMessage() {}

func (x *CMsgClientToGCRecordContestVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecordContestVote.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecordContestVote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{239}
}

func (x *CMsgClientToGCRecordContestVote) GetContestId() uint32 {
	if x != nil && x.ContestId != nil {
		return *x.ContestId
	}
	return 0
}

func (x *CMsgClientToGCRecordContestVote) GetContestItemId() uint64 {
	if x != nil && x.ContestItemId != nil {
		return *x.ContestItemId
	}
	return 0
}

func (x *CMsgClientToGCRecordContestVote) GetVote() int32 {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return 0
}

type CMsgGCToClientRecordContestVoteResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Eresult       *CMsgGCToClientRecordContestVoteResponse_EResult `protobuf:"varint,1,opt,name=eresult,enum=protocol.CMsgGCToClientRecordContestVoteResponse_EResult,def=0" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientRecordContestVoteResponse fields.
const (
	Default_CMsgGCToClientRecordContestVoteResponse_Eresult = CMsgGCToClientRecordContestVoteResponse_SUCCESS
)

func (x *CMsgGCToClientRecordContestVoteResponse) Reset() {
	*x = CMsgGCToClientRecordContestVoteResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientRecordContestVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRecordContestVoteResponse) ProtoMessage() {}

func (x *CMsgGCToClientRecordContestVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRecordContestVoteResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRecordContestVoteResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{240}
}

func (x *CMsgGCToClientRecordContestVoteResponse) GetEresult() CMsgGCToClientRecordContestVoteResponse_EResult {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgGCToClientRecordContestVoteResponse_Eresult
}

type CMsgDevGrantEventPoints struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	EventPoints   *uint32                `protobuf:"varint,2,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	PremiumPoints *uint32                `protobuf:"varint,3,opt,name=premium_points,json=premiumPoints" json:"premium_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevGrantEventPoints fields.
const (
	Default_CMsgDevGrantEventPoints_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgDevGrantEventPoints) Reset() {
	*x = CMsgDevGrantEventPoints{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevGrantEventPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevGrantEventPoints) ProtoMessage() {}

func (x *CMsgDevGrantEventPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevGrantEventPoints.ProtoReflect.Descriptor instead.
func (*CMsgDevGrantEventPoints) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{241}
}

func (x *CMsgDevGrantEventPoints) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgDevGrantEventPoints_EventId
}

func (x *CMsgDevGrantEventPoints) GetEventPoints() uint32 {
	if x != nil && x.EventPoints != nil {
		return *x.EventPoints
	}
	return 0
}

func (x *CMsgDevGrantEventPoints) GetPremiumPoints() uint32 {
	if x != nil && x.PremiumPoints != nil {
		return *x.PremiumPoints
	}
	return 0
}

type CMsgDevGrantEventPointsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Result        *EDevEventRequestResult `protobuf:"varint,1,opt,name=result,enum=protocol.EDevEventRequestResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevGrantEventPointsResponse fields.
const (
	Default_CMsgDevGrantEventPointsResponse_Result = EDevEventRequestResult_k_EDevEventRequestResult_Success
)

func (x *CMsgDevGrantEventPointsResponse) Reset() {
	*x = CMsgDevGrantEventPointsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevGrantEventPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevGrantEventPointsResponse) ProtoMessage() {}

func (x *CMsgDevGrantEventPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevGrantEventPointsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDevGrantEventPointsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{242}
}

func (x *CMsgDevGrantEventPointsResponse) GetResult() EDevEventRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDevGrantEventPointsResponse_Result
}

type CMsgDevGrantEventAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	ActionId      *uint32                `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	ActionScore   *uint32                `protobuf:"varint,3,opt,name=action_score,json=actionScore" json:"action_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevGrantEventAction fields.
const (
	Default_CMsgDevGrantEventAction_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgDevGrantEventAction) Reset() {
	*x = CMsgDevGrantEventAction{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevGrantEventAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevGrantEventAction) ProtoMessage() {}

func (x *CMsgDevGrantEventAction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevGrantEventAction.ProtoReflect.Descriptor instead.
func (*CMsgDevGrantEventAction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{243}
}

func (x *CMsgDevGrantEventAction) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgDevGrantEventAction_EventId
}

func (x *CMsgDevGrantEventAction) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgDevGrantEventAction) GetActionScore() uint32 {
	if x != nil && x.ActionScore != nil {
		return *x.ActionScore
	}
	return 0
}

type CMsgDevGrantEventActionResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Result        *EDevEventRequestResult `protobuf:"varint,1,opt,name=result,enum=protocol.EDevEventRequestResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevGrantEventActionResponse fields.
const (
	Default_CMsgDevGrantEventActionResponse_Result = EDevEventRequestResult_k_EDevEventRequestResult_Success
)

func (x *CMsgDevGrantEventActionResponse) Reset() {
	*x = CMsgDevGrantEventActionResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevGrantEventActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevGrantEventActionResponse) ProtoMessage() {}

func (x *CMsgDevGrantEventActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevGrantEventActionResponse.ProtoReflect.Descriptor instead.
func (*CMsgDevGrantEventActionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{244}
}

func (x *CMsgDevGrantEventActionResponse) GetResult() EDevEventRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDevGrantEventActionResponse_Result
}

type CMsgDevDeleteEventActions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	StartActionId *uint32                `protobuf:"varint,2,opt,name=start_action_id,json=startActionId" json:"start_action_id,omitempty"`
	EndActionId   *uint32                `protobuf:"varint,3,opt,name=end_action_id,json=endActionId" json:"end_action_id,omitempty"`
	RemoveAudit   *bool                  `protobuf:"varint,4,opt,name=remove_audit,json=removeAudit" json:"remove_audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevDeleteEventActions fields.
const (
	Default_CMsgDevDeleteEventActions_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgDevDeleteEventActions) Reset() {
	*x = CMsgDevDeleteEventActions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevDeleteEventActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevDeleteEventActions) ProtoMessage() {}

func (x *CMsgDevDeleteEventActions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevDeleteEventActions.ProtoReflect.Descriptor instead.
func (*CMsgDevDeleteEventActions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{245}
}

func (x *CMsgDevDeleteEventActions) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgDevDeleteEventActions_EventId
}

func (x *CMsgDevDeleteEventActions) GetStartActionId() uint32 {
	if x != nil && x.StartActionId != nil {
		return *x.StartActionId
	}
	return 0
}

func (x *CMsgDevDeleteEventActions) GetEndActionId() uint32 {
	if x != nil && x.EndActionId != nil {
		return *x.EndActionId
	}
	return 0
}

func (x *CMsgDevDeleteEventActions) GetRemoveAudit() bool {
	if x != nil && x.RemoveAudit != nil {
		return *x.RemoveAudit
	}
	return false
}

type CMsgDevDeleteEventActionsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Result        *EDevEventRequestResult `protobuf:"varint,1,opt,name=result,enum=protocol.EDevEventRequestResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevDeleteEventActionsResponse fields.
const (
	Default_CMsgDevDeleteEventActionsResponse_Result = EDevEventRequestResult_k_EDevEventRequestResult_Success
)

func (x *CMsgDevDeleteEventActionsResponse) Reset() {
	*x = CMsgDevDeleteEventActionsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevDeleteEventActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevDeleteEventActionsResponse) ProtoMessage() {}

func (x *CMsgDevDeleteEventActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevDeleteEventActionsResponse.ProtoReflect.Descriptor instead.
func (*CMsgDevDeleteEventActionsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{246}
}

func (x *CMsgDevDeleteEventActionsResponse) GetResult() EDevEventRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDevDeleteEventActionsResponse_Result
}

type CMsgDevResetEventState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	RemoveAudit   *bool                  `protobuf:"varint,2,opt,name=remove_audit,json=removeAudit" json:"remove_audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevResetEventState fields.
const (
	Default_CMsgDevResetEventState_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgDevResetEventState) Reset() {
	*x = CMsgDevResetEventState{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevResetEventState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevResetEventState) ProtoMessage() {}

func (x *CMsgDevResetEventState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevResetEventState.ProtoReflect.Descriptor instead.
func (*CMsgDevResetEventState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{247}
}

func (x *CMsgDevResetEventState) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgDevResetEventState_EventId
}

func (x *CMsgDevResetEventState) GetRemoveAudit() bool {
	if x != nil && x.RemoveAudit != nil {
		return *x.RemoveAudit
	}
	return false
}

type CMsgDevResetEventStateResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Result        *EDevEventRequestResult `protobuf:"varint,1,opt,name=result,enum=protocol.EDevEventRequestResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDevResetEventStateResponse fields.
const (
	Default_CMsgDevResetEventStateResponse_Result = EDevEventRequestResult_k_EDevEventRequestResult_Success
)

func (x *CMsgDevResetEventStateResponse) Reset() {
	*x = CMsgDevResetEventStateResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDevResetEventStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDevResetEventStateResponse) ProtoMessage() {}

func (x *CMsgDevResetEventStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDevResetEventStateResponse.ProtoReflect.Descriptor instead.
func (*CMsgDevResetEventStateResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{248}
}

func (x *CMsgDevResetEventStateResponse) GetResult() EDevEventRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDevResetEventStateResponse_Result
}

type CMsgConsumeEventSupportGrantItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        *uint64                `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgConsumeEventSupportGrantItem) Reset() {
	*x = CMsgConsumeEventSupportGrantItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgConsumeEventSupportGrantItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConsumeEventSupportGrantItem) ProtoMessage() {}

func (x *CMsgConsumeEventSupportGrantItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConsumeEventSupportGrantItem.ProtoReflect.Descriptor instead.
func (*CMsgConsumeEventSupportGrantItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{249}
}

func (x *CMsgConsumeEventSupportGrantItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type CMsgConsumeEventSupportGrantItemResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Result        *ESupportEventRequestResult `protobuf:"varint,1,opt,name=result,enum=protocol.ESupportEventRequestResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgConsumeEventSupportGrantItemResponse fields.
const (
	Default_CMsgConsumeEventSupportGrantItemResponse_Result = ESupportEventRequestResult_k_ESupportEventRequestResult_Success
)

func (x *CMsgConsumeEventSupportGrantItemResponse) Reset() {
	*x = CMsgConsumeEventSupportGrantItemResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgConsumeEventSupportGrantItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgConsumeEventSupportGrantItemResponse) ProtoMessage() {}

func (x *CMsgConsumeEventSupportGrantItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgConsumeEventSupportGrantItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgConsumeEventSupportGrantItemResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{250}
}

func (x *CMsgConsumeEventSupportGrantItemResponse) GetResult() ESupportEventRequestResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgConsumeEventSupportGrantItemResponse_Result
}

type CMsgClientToGCGetFilteredPlayers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetFilteredPlayers) Reset() {
	*x = CMsgClientToGCGetFilteredPlayers{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetFilteredPlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFilteredPlayers) ProtoMessage() {}

func (x *CMsgClientToGCGetFilteredPlayers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFilteredPlayers.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFilteredPlayers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{251}
}

type CMsgGCToClientGetFilteredPlayersResponse struct {
	state           protoimpl.MessageState                                   `protogen:"open.v1"`
	Result          *CMsgGCToClientGetFilteredPlayersResponse_Result         `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCToClientGetFilteredPlayersResponse_Result,def=0" json:"result,omitempty"`
	FilteredPlayers []*CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry `protobuf:"bytes,2,rep,name=filtered_players,json=filteredPlayers" json:"filtered_players,omitempty"`
	BaseSlots       *int32                                                   `protobuf:"varint,3,opt,name=base_slots,json=baseSlots" json:"base_slots,omitempty"`
	AdditionalSlots *int32                                                   `protobuf:"varint,4,opt,name=additional_slots,json=additionalSlots" json:"additional_slots,omitempty"`
	NextSlotCost    *int32                                                   `protobuf:"varint,5,opt,name=next_slot_cost,json=nextSlotCost" json:"next_slot_cost,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgGCToClientGetFilteredPlayersResponse fields.
const (
	Default_CMsgGCToClientGetFilteredPlayersResponse_Result = CMsgGCToClientGetFilteredPlayersResponse_SUCCESS
)

func (x *CMsgGCToClientGetFilteredPlayersResponse) Reset() {
	*x = CMsgGCToClientGetFilteredPlayersResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientGetFilteredPlayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientGetFilteredPlayersResponse) ProtoMessage() {}

func (x *CMsgGCToClientGetFilteredPlayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientGetFilteredPlayersResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientGetFilteredPlayersResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{252}
}

func (x *CMsgGCToClientGetFilteredPlayersResponse) GetResult() CMsgGCToClientGetFilteredPlayersResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToClientGetFilteredPlayersResponse_Result
}

func (x *CMsgGCToClientGetFilteredPlayersResponse) GetFilteredPlayers() []*CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry {
	if x != nil {
		return x.FilteredPlayers
	}
	return nil
}

func (x *CMsgGCToClientGetFilteredPlayersResponse) GetBaseSlots() int32 {
	if x != nil && x.BaseSlots != nil {
		return *x.BaseSlots
	}
	return 0
}

func (x *CMsgGCToClientGetFilteredPlayersResponse) GetAdditionalSlots() int32 {
	if x != nil && x.AdditionalSlots != nil {
		return *x.AdditionalSlots
	}
	return 0
}

func (x *CMsgGCToClientGetFilteredPlayersResponse) GetNextSlotCost() int32 {
	if x != nil && x.NextSlotCost != nil {
		return *x.NextSlotCost
	}
	return 0
}

type CMsgClientToGCRemoveFilteredPlayer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountIdToRemove *uint32                `protobuf:"fixed32,1,opt,name=account_id_to_remove,json=accountIdToRemove" json:"account_id_to_remove,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCRemoveFilteredPlayer) Reset() {
	*x = CMsgClientToGCRemoveFilteredPlayer{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRemoveFilteredPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRemoveFilteredPlayer) ProtoMessage() {}

func (x *CMsgClientToGCRemoveFilteredPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRemoveFilteredPlayer.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRemoveFilteredPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{253}
}

func (x *CMsgClientToGCRemoveFilteredPlayer) GetAccountIdToRemove() uint32 {
	if x != nil && x.AccountIdToRemove != nil {
		return *x.AccountIdToRemove
	}
	return 0
}

type CMsgGCToClientRemoveFilteredPlayerResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Result        *CMsgGCToClientRemoveFilteredPlayerResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCToClientRemoveFilteredPlayerResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientRemoveFilteredPlayerResponse fields.
const (
	Default_CMsgGCToClientRemoveFilteredPlayerResponse_Result = CMsgGCToClientRemoveFilteredPlayerResponse_SUCCESS
)

func (x *CMsgGCToClientRemoveFilteredPlayerResponse) Reset() {
	*x = CMsgGCToClientRemoveFilteredPlayerResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientRemoveFilteredPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRemoveFilteredPlayerResponse) ProtoMessage() {}

func (x *CMsgGCToClientRemoveFilteredPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRemoveFilteredPlayerResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRemoveFilteredPlayerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{254}
}

func (x *CMsgGCToClientRemoveFilteredPlayerResponse) GetResult() CMsgGCToClientRemoveFilteredPlayerResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToClientRemoveFilteredPlayerResponse_Result
}

type CMsgClientToGCPurchaseFilteredPlayerSlot struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	AdditionalSlotsCurrent *int32                 `protobuf:"varint,1,opt,name=additional_slots_current,json=additionalSlotsCurrent" json:"additional_slots_current,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientToGCPurchaseFilteredPlayerSlot) Reset() {
	*x = CMsgClientToGCPurchaseFilteredPlayerSlot{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPurchaseFilteredPlayerSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPurchaseFilteredPlayerSlot) ProtoMessage() {}

func (x *CMsgClientToGCPurchaseFilteredPlayerSlot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPurchaseFilteredPlayerSlot.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPurchaseFilteredPlayerSlot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{255}
}

func (x *CMsgClientToGCPurchaseFilteredPlayerSlot) GetAdditionalSlotsCurrent() int32 {
	if x != nil && x.AdditionalSlotsCurrent != nil {
		return *x.AdditionalSlotsCurrent
	}
	return 0
}

type CMsgGCToClientPurchaseFilteredPlayerSlotResponse struct {
	state           protoimpl.MessageState                                   `protogen:"open.v1"`
	Result          *CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result,def=0" json:"result,omitempty"`
	AdditionalSlots *int32                                                   `protobuf:"varint,2,opt,name=additional_slots,json=additionalSlots" json:"additional_slots,omitempty"`
	NextSlotCost    *int32                                                   `protobuf:"varint,3,opt,name=next_slot_cost,json=nextSlotCost" json:"next_slot_cost,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgGCToClientPurchaseFilteredPlayerSlotResponse fields.
const (
	Default_CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result = CMsgGCToClientPurchaseFilteredPlayerSlotResponse_SUCCESS
)

func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse) Reset() {
	*x = CMsgGCToClientPurchaseFilteredPlayerSlotResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPurchaseFilteredPlayerSlotResponse) ProtoMessage() {}

func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPurchaseFilteredPlayerSlotResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPurchaseFilteredPlayerSlotResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{256}
}

func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse) GetResult() CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result
}

func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse) GetAdditionalSlots() int32 {
	if x != nil && x.AdditionalSlots != nil {
		return *x.AdditionalSlots
	}
	return 0
}

func (x *CMsgGCToClientPurchaseFilteredPlayerSlotResponse) GetNextSlotCost() int32 {
	if x != nil && x.NextSlotCost != nil {
		return *x.NextSlotCost
	}
	return 0
}

type CMsgClientToGCUpdateFilteredPlayerNote struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetAccountId *uint32                `protobuf:"fixed32,1,opt,name=target_account_id,json=targetAccountId" json:"target_account_id,omitempty"`
	NewNote         *string                `protobuf:"bytes,2,opt,name=new_note,json=newNote" json:"new_note,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCUpdateFilteredPlayerNote) Reset() {
	*x = CMsgClientToGCUpdateFilteredPlayerNote{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUpdateFilteredPlayerNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdateFilteredPlayerNote) ProtoMessage() {}

func (x *CMsgClientToGCUpdateFilteredPlayerNote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdateFilteredPlayerNote.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdateFilteredPlayerNote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{257}
}

func (x *CMsgClientToGCUpdateFilteredPlayerNote) GetTargetAccountId() uint32 {
	if x != nil && x.TargetAccountId != nil {
		return *x.TargetAccountId
	}
	return 0
}

func (x *CMsgClientToGCUpdateFilteredPlayerNote) GetNewNote() string {
	if x != nil && x.NewNote != nil {
		return *x.NewNote
	}
	return ""
}

type CMsgGCToClientUpdateFilteredPlayerNoteResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Result        *CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientUpdateFilteredPlayerNoteResponse fields.
const (
	Default_CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result = CMsgGCToClientUpdateFilteredPlayerNoteResponse_SUCCESS
)

func (x *CMsgGCToClientUpdateFilteredPlayerNoteResponse) Reset() {
	*x = CMsgGCToClientUpdateFilteredPlayerNoteResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientUpdateFilteredPlayerNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientUpdateFilteredPlayerNoteResponse) ProtoMessage() {}

func (x *CMsgGCToClientUpdateFilteredPlayerNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientUpdateFilteredPlayerNoteResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientUpdateFilteredPlayerNoteResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{258}
}

func (x *CMsgGCToClientUpdateFilteredPlayerNoteResponse) GetResult() CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result
}

type CMsgPartySearchPlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"fixed32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	MatchId       *uint64                `protobuf:"fixed64,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	CreationTime  *uint32                `protobuf:"fixed32,3,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPartySearchPlayer) Reset() {
	*x = CMsgPartySearchPlayer{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPartySearchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPartySearchPlayer) ProtoMessage() {}

func (x *CMsgPartySearchPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPartySearchPlayer.ProtoReflect.Descriptor instead.
func (*CMsgPartySearchPlayer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{259}
}

func (x *CMsgPartySearchPlayer) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgPartySearchPlayer) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgPartySearchPlayer) GetCreationTime() uint32 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

type CMsgGCToClientPlayerBeaconState struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NumActiveBeacons []int32                `protobuf:"varint,1,rep,name=num_active_beacons,json=numActiveBeacons" json:"num_active_beacons,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientPlayerBeaconState) Reset() {
	*x = CMsgGCToClientPlayerBeaconState{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPlayerBeaconState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPlayerBeaconState) ProtoMessage() {}

func (x *CMsgGCToClientPlayerBeaconState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPlayerBeaconState.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPlayerBeaconState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{260}
}

func (x *CMsgGCToClientPlayerBeaconState) GetNumActiveBeacons() []int32 {
	if x != nil {
		return x.NumActiveBeacons
	}
	return nil
}

type CMsgGCToClientPartyBeaconUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeaconAdded   *bool                  `protobuf:"varint,1,opt,name=beacon_added,json=beaconAdded" json:"beacon_added,omitempty"`
	BeaconType    *int32                 `protobuf:"varint,2,opt,name=beacon_type,json=beaconType" json:"beacon_type,omitempty"`
	AccountId     *uint32                `protobuf:"fixed32,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientPartyBeaconUpdate) Reset() {
	*x = CMsgGCToClientPartyBeaconUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPartyBeaconUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPartyBeaconUpdate) ProtoMessage() {}

func (x *CMsgGCToClientPartyBeaconUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPartyBeaconUpdate.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPartyBeaconUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{261}
}

func (x *CMsgGCToClientPartyBeaconUpdate) GetBeaconAdded() bool {
	if x != nil && x.BeaconAdded != nil {
		return *x.BeaconAdded
	}
	return false
}

func (x *CMsgGCToClientPartyBeaconUpdate) GetBeaconType() int32 {
	if x != nil && x.BeaconType != nil {
		return *x.BeaconType
	}
	return 0
}

func (x *CMsgGCToClientPartyBeaconUpdate) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCUpdatePartyBeacon struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Action        *CMsgClientToGCUpdatePartyBeacon_Action `protobuf:"varint,1,opt,name=action,enum=protocol.CMsgClientToGCUpdatePartyBeacon_Action,def=0" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUpdatePartyBeacon fields.
const (
	Default_CMsgClientToGCUpdatePartyBeacon_Action = CMsgClientToGCUpdatePartyBeacon_ON
)

func (x *CMsgClientToGCUpdatePartyBeacon) Reset() {
	*x = CMsgClientToGCUpdatePartyBeacon{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUpdatePartyBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdatePartyBeacon) ProtoMessage() {}

func (x *CMsgClientToGCUpdatePartyBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdatePartyBeacon.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdatePartyBeacon) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{262}
}

func (x *CMsgClientToGCUpdatePartyBeacon) GetAction() CMsgClientToGCUpdatePartyBeacon_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CMsgClientToGCUpdatePartyBeacon_Action
}

type CMsgClientToGCRequestActiveBeaconParties struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestActiveBeaconParties) Reset() {
	*x = CMsgClientToGCRequestActiveBeaconParties{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestActiveBeaconParties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestActiveBeaconParties) ProtoMessage() {}

func (x *CMsgClientToGCRequestActiveBeaconParties) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestActiveBeaconParties.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestActiveBeaconParties) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{263}
}

type CMsgGCToClientRequestActiveBeaconPartiesResponse struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Response      *CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse,def=0" json:"response,omitempty"`
	ActiveParties []*CPartySearchClientParty                                  `protobuf:"bytes,2,rep,name=active_parties,json=activeParties" json:"active_parties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientRequestActiveBeaconPartiesResponse fields.
const (
	Default_CMsgGCToClientRequestActiveBeaconPartiesResponse_Response = CMsgGCToClientRequestActiveBeaconPartiesResponse_SUCCESS
)

func (x *CMsgGCToClientRequestActiveBeaconPartiesResponse) Reset() {
	*x = CMsgGCToClientRequestActiveBeaconPartiesResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientRequestActiveBeaconPartiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRequestActiveBeaconPartiesResponse) ProtoMessage() {}

func (x *CMsgGCToClientRequestActiveBeaconPartiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRequestActiveBeaconPartiesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRequestActiveBeaconPartiesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{264}
}

func (x *CMsgGCToClientRequestActiveBeaconPartiesResponse) GetResponse() CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgGCToClientRequestActiveBeaconPartiesResponse_Response
}

func (x *CMsgGCToClientRequestActiveBeaconPartiesResponse) GetActiveParties() []*CPartySearchClientParty {
	if x != nil {
		return x.ActiveParties
	}
	return nil
}

type CMsgClientToGCJoinPartyFromBeacon struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartyId       *uint64                `protobuf:"fixed64,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	AccountId     *uint32                `protobuf:"fixed32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BeaconType    *int32                 `protobuf:"varint,3,opt,name=beacon_type,json=beaconType" json:"beacon_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCJoinPartyFromBeacon) Reset() {
	*x = CMsgClientToGCJoinPartyFromBeacon{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCJoinPartyFromBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCJoinPartyFromBeacon) ProtoMessage() {}

func (x *CMsgClientToGCJoinPartyFromBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCJoinPartyFromBeacon.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCJoinPartyFromBeacon) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{265}
}

func (x *CMsgClientToGCJoinPartyFromBeacon) GetPartyId() uint64 {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return 0
}

func (x *CMsgClientToGCJoinPartyFromBeacon) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCJoinPartyFromBeacon) GetBeaconType() int32 {
	if x != nil && x.BeaconType != nil {
		return *x.BeaconType
	}
	return 0
}

type CMsgGCToClientJoinPartyFromBeaconResponse struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Response      *CMsgGCToClientJoinPartyFromBeaconResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgGCToClientJoinPartyFromBeaconResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientJoinPartyFromBeaconResponse fields.
const (
	Default_CMsgGCToClientJoinPartyFromBeaconResponse_Response = CMsgGCToClientJoinPartyFromBeaconResponse_SUCCESS
)

func (x *CMsgGCToClientJoinPartyFromBeaconResponse) Reset() {
	*x = CMsgGCToClientJoinPartyFromBeaconResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientJoinPartyFromBeaconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientJoinPartyFromBeaconResponse) ProtoMessage() {}

func (x *CMsgGCToClientJoinPartyFromBeaconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientJoinPartyFromBeaconResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientJoinPartyFromBeaconResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{266}
}

func (x *CMsgGCToClientJoinPartyFromBeaconResponse) GetResponse() CMsgGCToClientJoinPartyFromBeaconResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgGCToClientJoinPartyFromBeaconResponse_Response
}

type CMsgClientToGCManageFavorites struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	Action         *CMsgClientToGCManageFavorites_Action `protobuf:"varint,1,opt,name=action,enum=protocol.CMsgClientToGCManageFavorites_Action,def=0" json:"action,omitempty"`
	AccountId      *uint32                               `protobuf:"fixed32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	FavoriteName   *string                               `protobuf:"bytes,3,opt,name=favorite_name,json=favoriteName" json:"favorite_name,omitempty"`
	InviteResponse *bool                                 `protobuf:"varint,4,opt,name=invite_response,json=inviteResponse" json:"invite_response,omitempty"`
	FromFriendlist *bool                                 `protobuf:"varint,5,opt,name=from_friendlist,json=fromFriendlist" json:"from_friendlist,omitempty"`
	LobbyId        *uint64                               `protobuf:"fixed64,6,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgClientToGCManageFavorites fields.
const (
	Default_CMsgClientToGCManageFavorites_Action = CMsgClientToGCManageFavorites_ADD
)

func (x *CMsgClientToGCManageFavorites) Reset() {
	*x = CMsgClientToGCManageFavorites{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCManageFavorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCManageFavorites) ProtoMessage() {}

func (x *CMsgClientToGCManageFavorites) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCManageFavorites.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCManageFavorites) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{267}
}

func (x *CMsgClientToGCManageFavorites) GetAction() CMsgClientToGCManageFavorites_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CMsgClientToGCManageFavorites_Action
}

func (x *CMsgClientToGCManageFavorites) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCManageFavorites) GetFavoriteName() string {
	if x != nil && x.FavoriteName != nil {
		return *x.FavoriteName
	}
	return ""
}

func (x *CMsgClientToGCManageFavorites) GetInviteResponse() bool {
	if x != nil && x.InviteResponse != nil {
		return *x.InviteResponse
	}
	return false
}

func (x *CMsgClientToGCManageFavorites) GetFromFriendlist() bool {
	if x != nil && x.FromFriendlist != nil {
		return *x.FromFriendlist
	}
	return false
}

func (x *CMsgClientToGCManageFavorites) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

type CMsgGCToClientManageFavoritesResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Response      *CMsgGCToClientManageFavoritesResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgGCToClientManageFavoritesResponse_EResponse,def=0" json:"response,omitempty"`
	DebugMessage  *string                                          `protobuf:"bytes,2,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
	Player        *CMsgPartySearchPlayer                           `protobuf:"bytes,3,opt,name=player" json:"player,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientManageFavoritesResponse fields.
const (
	Default_CMsgGCToClientManageFavoritesResponse_Response = CMsgGCToClientManageFavoritesResponse_SUCCESS
)

func (x *CMsgGCToClientManageFavoritesResponse) Reset() {
	*x = CMsgGCToClientManageFavoritesResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientManageFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientManageFavoritesResponse) ProtoMessage() {}

func (x *CMsgGCToClientManageFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientManageFavoritesResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientManageFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{268}
}

func (x *CMsgGCToClientManageFavoritesResponse) GetResponse() CMsgGCToClientManageFavoritesResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgGCToClientManageFavoritesResponse_Response
}

func (x *CMsgGCToClientManageFavoritesResponse) GetDebugMessage() string {
	if x != nil && x.DebugMessage != nil {
		return *x.DebugMessage
	}
	return ""
}

func (x *CMsgGCToClientManageFavoritesResponse) GetPlayer() *CMsgPartySearchPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

type CMsgClientToGCGetFavoritePlayers struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PaginationKey   *uint64                `protobuf:"varint,1,opt,name=pagination_key,json=paginationKey" json:"pagination_key,omitempty"`
	PaginationCount *int32                 `protobuf:"varint,2,opt,name=pagination_count,json=paginationCount" json:"pagination_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCGetFavoritePlayers) Reset() {
	*x = CMsgClientToGCGetFavoritePlayers{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetFavoritePlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetFavoritePlayers) ProtoMessage() {}

func (x *CMsgClientToGCGetFavoritePlayers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetFavoritePlayers.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetFavoritePlayers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{269}
}

func (x *CMsgClientToGCGetFavoritePlayers) GetPaginationKey() uint64 {
	if x != nil && x.PaginationKey != nil {
		return *x.PaginationKey
	}
	return 0
}

func (x *CMsgClientToGCGetFavoritePlayers) GetPaginationCount() int32 {
	if x != nil && x.PaginationCount != nil {
		return *x.PaginationCount
	}
	return 0
}

type CMsgGCToClientGetFavoritePlayersResponse struct {
	state             protoimpl.MessageState                              `protogen:"open.v1"`
	Response          *CMsgGCToClientGetFavoritePlayersResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgGCToClientGetFavoritePlayersResponse_EResponse,def=0" json:"response,omitempty"`
	Players           []*CMsgPartySearchPlayer                            `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	NextPaginationKey *uint64                                             `protobuf:"varint,3,opt,name=next_pagination_key,json=nextPaginationKey" json:"next_pagination_key,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgGCToClientGetFavoritePlayersResponse fields.
const (
	Default_CMsgGCToClientGetFavoritePlayersResponse_Response = CMsgGCToClientGetFavoritePlayersResponse_SUCCESS
)

func (x *CMsgGCToClientGetFavoritePlayersResponse) Reset() {
	*x = CMsgGCToClientGetFavoritePlayersResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientGetFavoritePlayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientGetFavoritePlayersResponse) ProtoMessage() {}

func (x *CMsgGCToClientGetFavoritePlayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientGetFavoritePlayersResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientGetFavoritePlayersResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{270}
}

func (x *CMsgGCToClientGetFavoritePlayersResponse) GetResponse() CMsgGCToClientGetFavoritePlayersResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgGCToClientGetFavoritePlayersResponse_Response
}

func (x *CMsgGCToClientGetFavoritePlayersResponse) GetPlayers() []*CMsgPartySearchPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGCToClientGetFavoritePlayersResponse) GetNextPaginationKey() uint64 {
	if x != nil && x.NextPaginationKey != nil {
		return *x.NextPaginationKey
	}
	return 0
}

type CMsgGCToClientPartySearchInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"fixed32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientPartySearchInvite) Reset() {
	*x = CMsgGCToClientPartySearchInvite{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPartySearchInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPartySearchInvite) ProtoMessage() {}

func (x *CMsgGCToClientPartySearchInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPartySearchInvite.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPartySearchInvite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{271}
}

func (x *CMsgGCToClientPartySearchInvite) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCVerifyFavoritePlayers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountIds    []uint32               `protobuf:"fixed32,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCVerifyFavoritePlayers) Reset() {
	*x = CMsgClientToGCVerifyFavoritePlayers{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCVerifyFavoritePlayers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCVerifyFavoritePlayers) ProtoMessage() {}

func (x *CMsgClientToGCVerifyFavoritePlayers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCVerifyFavoritePlayers.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCVerifyFavoritePlayers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{272}
}

func (x *CMsgClientToGCVerifyFavoritePlayers) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgGCToClientVerifyFavoritePlayersResponse struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Results       []*CMsgGCToClientVerifyFavoritePlayersResponse_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse) Reset() {
	*x = CMsgGCToClientVerifyFavoritePlayersResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientVerifyFavoritePlayersResponse) ProtoMessage() {}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientVerifyFavoritePlayersResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientVerifyFavoritePlayersResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{273}
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse) GetResults() []*CMsgGCToClientVerifyFavoritePlayersResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type CMsgClientToGCRequestPlayerRecentAccomplishments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishments) Reset() {
	*x = CMsgClientToGCRequestPlayerRecentAccomplishments{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestPlayerRecentAccomplishments) ProtoMessage() {}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishments) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestPlayerRecentAccomplishments.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestPlayerRecentAccomplishments) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{274}
}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishments) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse struct {
	state                 protoimpl.MessageState                                              `protogen:"open.v1"`
	Result                *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse,def=0" json:"result,omitempty"`
	PlayerAccomplishments *CMsgPlayerRecentAccomplishments                                    `protobuf:"bytes,2,opt,name=player_accomplishments,json=playerAccomplishments" json:"player_accomplishments,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse fields.
const (
	Default_CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_Result = CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_k_eInternalError
)

func (x *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) Reset() {
	*x = CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{275}
}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) GetResult() CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_Result
}

func (x *CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse) GetPlayerAccomplishments() *CMsgPlayerRecentAccomplishments {
	if x != nil {
		return x.PlayerAccomplishments
	}
	return nil
}

type CMsgClientToGCRequestPlayerHeroRecentAccomplishments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	HeroId        *int32                 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishments) Reset() {
	*x = CMsgClientToGCRequestPlayerHeroRecentAccomplishments{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestPlayerHeroRecentAccomplishments) ProtoMessage() {}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishments) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestPlayerHeroRecentAccomplishments.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestPlayerHeroRecentAccomplishments) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{276}
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishments) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishments) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

type CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse struct {
	state               protoimpl.MessageState                                                  `protogen:"open.v1"`
	Result              *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse,def=0" json:"result,omitempty"`
	HeroAccomplishments *CMsgPlayerHeroRecentAccomplishments                                    `protobuf:"bytes,2,opt,name=hero_accomplishments,json=heroAccomplishments" json:"hero_accomplishments,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse fields.
const (
	Default_CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_Result = CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_k_eInternalError
)

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) Reset() {
	*x = CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{277}
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) GetResult() CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_Result
}

func (x *CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse) GetHeroAccomplishments() *CMsgPlayerHeroRecentAccomplishments {
	if x != nil {
		return x.HeroAccomplishments
	}
	return nil
}

type CMsgClientToGCSubmitPlayerMatchSurvey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	Rating        *int32                 `protobuf:"zigzag32,3,opt,name=rating" json:"rating,omitempty"`
	Flags         *uint32                `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSubmitPlayerMatchSurvey) Reset() {
	*x = CMsgClientToGCSubmitPlayerMatchSurvey{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSubmitPlayerMatchSurvey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSubmitPlayerMatchSurvey) ProtoMessage() {}

func (x *CMsgClientToGCSubmitPlayerMatchSurvey) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSubmitPlayerMatchSurvey.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSubmitPlayerMatchSurvey) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{278}
}

func (x *CMsgClientToGCSubmitPlayerMatchSurvey) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCSubmitPlayerMatchSurvey) GetRating() int32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *CMsgClientToGCSubmitPlayerMatchSurvey) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CMsgClientToGCSubmitPlayerMatchSurveyResponse struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Eresult       *CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse `protobuf:"varint,1,opt,name=eresult,enum=protocol.CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse,def=0" json:"eresult,omitempty"`
	AccountId     *uint32                                                  `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSubmitPlayerMatchSurveyResponse fields.
const (
	Default_CMsgClientToGCSubmitPlayerMatchSurveyResponse_Eresult = CMsgClientToGCSubmitPlayerMatchSurveyResponse_k_eInternalError
)

func (x *CMsgClientToGCSubmitPlayerMatchSurveyResponse) Reset() {
	*x = CMsgClientToGCSubmitPlayerMatchSurveyResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSubmitPlayerMatchSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSubmitPlayerMatchSurveyResponse) ProtoMessage() {}

func (x *CMsgClientToGCSubmitPlayerMatchSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSubmitPlayerMatchSurveyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSubmitPlayerMatchSurveyResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{279}
}

func (x *CMsgClientToGCSubmitPlayerMatchSurveyResponse) GetEresult() CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientToGCSubmitPlayerMatchSurveyResponse_Eresult
}

func (x *CMsgClientToGCSubmitPlayerMatchSurveyResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgGCToClientVACReminder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientVACReminder) Reset() {
	*x = CMsgGCToClientVACReminder{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientVACReminder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientVACReminder) ProtoMessage() {}

func (x *CMsgGCToClientVACReminder) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientVACReminder.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientVACReminder) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{280}
}

type CMsgClientToGCUnderDraftRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUnderDraftRequest) Reset() {
	*x = CMsgClientToGCUnderDraftRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftRequest) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{281}
}

func (x *CMsgClientToGCUnderDraftRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftRequest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCUnderDraftResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *EUnderDraftResponse   `protobuf:"varint,1,opt,name=result,enum=protocol.EUnderDraftResponse,def=0" json:"result,omitempty"`
	AccountId     *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	EventId       *uint32                `protobuf:"varint,3,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	DraftData     *CMsgUnderDraftData    `protobuf:"bytes,4,opt,name=draft_data,json=draftData" json:"draft_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUnderDraftResponse fields.
const (
	Default_CMsgClientToGCUnderDraftResponse_Result = EUnderDraftResponse_k_eInternalError
)

func (x *CMsgClientToGCUnderDraftResponse) Reset() {
	*x = CMsgClientToGCUnderDraftResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftResponse) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{282}
}

func (x *CMsgClientToGCUnderDraftResponse) GetResult() EUnderDraftResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUnderDraftResponse_Result
}

func (x *CMsgClientToGCUnderDraftResponse) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftResponse) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftResponse) GetDraftData() *CMsgUnderDraftData {
	if x != nil {
		return x.DraftData
	}
	return nil
}

type CMsgClientToGCUnderDraftReroll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUnderDraftReroll) Reset() {
	*x = CMsgClientToGCUnderDraftReroll{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftReroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftReroll) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftReroll) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftReroll.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftReroll) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{283}
}

func (x *CMsgClientToGCUnderDraftReroll) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCUnderDraftRerollResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *EUnderDraftResponse   `protobuf:"varint,1,opt,name=result,enum=protocol.EUnderDraftResponse,def=0" json:"result,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	DraftData     *CMsgUnderDraftData    `protobuf:"bytes,3,opt,name=draft_data,json=draftData" json:"draft_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUnderDraftRerollResponse fields.
const (
	Default_CMsgClientToGCUnderDraftRerollResponse_Result = EUnderDraftResponse_k_eInternalError
)

func (x *CMsgClientToGCUnderDraftRerollResponse) Reset() {
	*x = CMsgClientToGCUnderDraftRerollResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftRerollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftRerollResponse) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftRerollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftRerollResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftRerollResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{284}
}

func (x *CMsgClientToGCUnderDraftRerollResponse) GetResult() EUnderDraftResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUnderDraftRerollResponse_Result
}

func (x *CMsgClientToGCUnderDraftRerollResponse) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftRerollResponse) GetDraftData() *CMsgUnderDraftData {
	if x != nil {
		return x.DraftData
	}
	return nil
}

type CMsgClientToGCUnderDraftBuy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId        *uint32                `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUnderDraftBuy) Reset() {
	*x = CMsgClientToGCUnderDraftBuy{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftBuy) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftBuy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftBuy.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftBuy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{285}
}

func (x *CMsgClientToGCUnderDraftBuy) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftBuy) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

type CMsgGCToClientGuildUnderDraftGoldUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientGuildUnderDraftGoldUpdated) Reset() {
	*x = CMsgGCToClientGuildUnderDraftGoldUpdated{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientGuildUnderDraftGoldUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientGuildUnderDraftGoldUpdated) ProtoMessage() {}

func (x *CMsgGCToClientGuildUnderDraftGoldUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientGuildUnderDraftGoldUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientGuildUnderDraftGoldUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{286}
}

func (x *CMsgGCToClientGuildUnderDraftGoldUpdated) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCUnderDraftBuyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *EUnderDraftResponse   `protobuf:"varint,1,opt,name=result,enum=protocol.EUnderDraftResponse,def=0" json:"result,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId        *uint32                `protobuf:"varint,3,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	DraftData     *CMsgUnderDraftData    `protobuf:"bytes,4,opt,name=draft_data,json=draftData" json:"draft_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUnderDraftBuyResponse fields.
const (
	Default_CMsgClientToGCUnderDraftBuyResponse_Result = EUnderDraftResponse_k_eInternalError
)

func (x *CMsgClientToGCUnderDraftBuyResponse) Reset() {
	*x = CMsgClientToGCUnderDraftBuyResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftBuyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftBuyResponse) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftBuyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftBuyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftBuyResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{287}
}

func (x *CMsgClientToGCUnderDraftBuyResponse) GetResult() EUnderDraftResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUnderDraftBuyResponse_Result
}

func (x *CMsgClientToGCUnderDraftBuyResponse) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftBuyResponse) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftBuyResponse) GetDraftData() *CMsgUnderDraftData {
	if x != nil {
		return x.DraftData
	}
	return nil
}

type CMsgClientToGCUnderDraftRollBackBench struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUnderDraftRollBackBench) Reset() {
	*x = CMsgClientToGCUnderDraftRollBackBench{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftRollBackBench) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftRollBackBench) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftRollBackBench) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftRollBackBench.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftRollBackBench) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{288}
}

func (x *CMsgClientToGCUnderDraftRollBackBench) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCUnderDraftRollBackBenchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *EUnderDraftResponse   `protobuf:"varint,1,opt,name=result,enum=protocol.EUnderDraftResponse,def=0" json:"result,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	DraftData     *CMsgUnderDraftData    `protobuf:"bytes,3,opt,name=draft_data,json=draftData" json:"draft_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUnderDraftRollBackBenchResponse fields.
const (
	Default_CMsgClientToGCUnderDraftRollBackBenchResponse_Result = EUnderDraftResponse_k_eInternalError
)

func (x *CMsgClientToGCUnderDraftRollBackBenchResponse) Reset() {
	*x = CMsgClientToGCUnderDraftRollBackBenchResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftRollBackBenchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftRollBackBenchResponse) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftRollBackBenchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftRollBackBenchResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftRollBackBenchResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{289}
}

func (x *CMsgClientToGCUnderDraftRollBackBenchResponse) GetResult() EUnderDraftResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUnderDraftRollBackBenchResponse_Result
}

func (x *CMsgClientToGCUnderDraftRollBackBenchResponse) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftRollBackBenchResponse) GetDraftData() *CMsgUnderDraftData {
	if x != nil {
		return x.DraftData
	}
	return nil
}

type CMsgClientToGCUnderDraftSell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId        *uint32                `protobuf:"varint,2,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUnderDraftSell) Reset() {
	*x = CMsgClientToGCUnderDraftSell{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftSell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftSell) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftSell) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftSell.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftSell) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{290}
}

func (x *CMsgClientToGCUnderDraftSell) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftSell) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

type CMsgClientToGCUnderDraftSellResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *EUnderDraftResponse   `protobuf:"varint,1,opt,name=result,enum=protocol.EUnderDraftResponse,def=0" json:"result,omitempty"`
	EventId       *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SlotId        *uint32                `protobuf:"varint,3,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	DraftData     *CMsgUnderDraftData    `protobuf:"bytes,4,opt,name=draft_data,json=draftData" json:"draft_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUnderDraftSellResponse fields.
const (
	Default_CMsgClientToGCUnderDraftSellResponse_Result = EUnderDraftResponse_k_eInternalError
)

func (x *CMsgClientToGCUnderDraftSellResponse) Reset() {
	*x = CMsgClientToGCUnderDraftSellResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftSellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftSellResponse) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftSellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftSellResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftSellResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{291}
}

func (x *CMsgClientToGCUnderDraftSellResponse) GetResult() EUnderDraftResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUnderDraftSellResponse_Result
}

func (x *CMsgClientToGCUnderDraftSellResponse) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftSellResponse) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftSellResponse) GetDraftData() *CMsgUnderDraftData {
	if x != nil {
		return x.DraftData
	}
	return nil
}

type CMsgClientToGCUnderDraftRedeemReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ActionId      *uint32                `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUnderDraftRedeemReward) Reset() {
	*x = CMsgClientToGCUnderDraftRedeemReward{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftRedeemReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftRedeemReward) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftRedeemReward) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftRedeemReward.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftRedeemReward) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{292}
}

func (x *CMsgClientToGCUnderDraftRedeemReward) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCUnderDraftRedeemReward) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

type CMsgClientToGCUnderDraftRedeemRewardResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *EUnderDraftResponse   `protobuf:"varint,1,opt,name=result,enum=protocol.EUnderDraftResponse,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUnderDraftRedeemRewardResponse fields.
const (
	Default_CMsgClientToGCUnderDraftRedeemRewardResponse_Result = EUnderDraftResponse_k_eInternalError
)

func (x *CMsgClientToGCUnderDraftRedeemRewardResponse) Reset() {
	*x = CMsgClientToGCUnderDraftRedeemRewardResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUnderDraftRedeemRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUnderDraftRedeemRewardResponse) ProtoMessage() {}

func (x *CMsgClientToGCUnderDraftRedeemRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUnderDraftRedeemRewardResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUnderDraftRedeemRewardResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{293}
}

func (x *CMsgClientToGCUnderDraftRedeemRewardResponse) GetResult() EUnderDraftResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCUnderDraftRedeemRewardResponse_Result
}

type CMsgClientToGCSubmitDraftTriviaMatchAnswer struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ChoseRadiantAsWinner *bool                  `protobuf:"varint,1,opt,name=chose_radiant_as_winner,json=choseRadiantAsWinner" json:"chose_radiant_as_winner,omitempty"`
	EventId              *uint32                `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EndTime              *uint32                `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswer) Reset() {
	*x = CMsgClientToGCSubmitDraftTriviaMatchAnswer{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSubmitDraftTriviaMatchAnswer) ProtoMessage() {}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSubmitDraftTriviaMatchAnswer.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSubmitDraftTriviaMatchAnswer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{294}
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswer) GetChoseRadiantAsWinner() bool {
	if x != nil && x.ChoseRadiantAsWinner != nil {
		return *x.ChoseRadiantAsWinner
	}
	return false
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswer) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswer) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Result        *EDOTADraftTriviaAnswerResult `protobuf:"varint,1,opt,name=result,enum=protocol.EDOTADraftTriviaAnswerResult,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse fields.
const (
	Default_CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse_Result = EDOTADraftTriviaAnswerResult_k_EDOTADraftTriviaAnswerResult_Success
)

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse) Reset() {
	*x = CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse) ProtoMessage() {}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{295}
}

func (x *CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse) GetResult() EDOTADraftTriviaAnswerResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse_Result
}

type CMsgDraftTriviaVoteCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalVotes    *uint32                `protobuf:"varint,1,opt,name=total_votes,json=totalVotes" json:"total_votes,omitempty"`
	RadiantVotes  *uint32                `protobuf:"varint,2,opt,name=radiant_votes,json=radiantVotes" json:"radiant_votes,omitempty"`
	DireVotes     *uint32                `protobuf:"varint,3,opt,name=dire_votes,json=direVotes" json:"dire_votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDraftTriviaVoteCount) Reset() {
	*x = CMsgDraftTriviaVoteCount{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDraftTriviaVoteCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDraftTriviaVoteCount) ProtoMessage() {}

func (x *CMsgDraftTriviaVoteCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDraftTriviaVoteCount.ProtoReflect.Descriptor instead.
func (*CMsgDraftTriviaVoteCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{296}
}

func (x *CMsgDraftTriviaVoteCount) GetTotalVotes() uint32 {
	if x != nil && x.TotalVotes != nil {
		return *x.TotalVotes
	}
	return 0
}

func (x *CMsgDraftTriviaVoteCount) GetRadiantVotes() uint32 {
	if x != nil && x.RadiantVotes != nil {
		return *x.RadiantVotes
	}
	return 0
}

func (x *CMsgDraftTriviaVoteCount) GetDireVotes() uint32 {
	if x != nil && x.DireVotes != nil {
		return *x.DireVotes
	}
	return 0
}

type CMsgClientToGCRequestReporterUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestReporterUpdates) Reset() {
	*x = CMsgClientToGCRequestReporterUpdates{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestReporterUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestReporterUpdates) ProtoMessage() {}

func (x *CMsgClientToGCRequestReporterUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestReporterUpdates.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestReporterUpdates) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{297}
}

type CMsgClientToGCRequestReporterUpdatesResponse struct {
	state            protoimpl.MessageState                                         `protogen:"open.v1"`
	EnumResult       *CMsgClientToGCRequestReporterUpdatesResponse_EResponse        `protobuf:"varint,1,opt,name=enum_result,json=enumResult,enum=protocol.CMsgClientToGCRequestReporterUpdatesResponse_EResponse,def=0" json:"enum_result,omitempty"`
	Updates          []*CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate `protobuf:"bytes,2,rep,name=updates" json:"updates,omitempty"`
	NumReported      *int32                                                         `protobuf:"varint,3,opt,name=num_reported,json=numReported" json:"num_reported,omitempty"`
	NumNoActionTaken *int32                                                         `protobuf:"varint,4,opt,name=num_no_action_taken,json=numNoActionTaken" json:"num_no_action_taken,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CMsgClientToGCRequestReporterUpdatesResponse fields.
const (
	Default_CMsgClientToGCRequestReporterUpdatesResponse_EnumResult = CMsgClientToGCRequestReporterUpdatesResponse_k_eInternalError
)

func (x *CMsgClientToGCRequestReporterUpdatesResponse) Reset() {
	*x = CMsgClientToGCRequestReporterUpdatesResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestReporterUpdatesResponse) ProtoMessage() {}

func (x *CMsgClientToGCRequestReporterUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestReporterUpdatesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestReporterUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{298}
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse) GetEnumResult() CMsgClientToGCRequestReporterUpdatesResponse_EResponse {
	if x != nil && x.EnumResult != nil {
		return *x.EnumResult
	}
	return Default_CMsgClientToGCRequestReporterUpdatesResponse_EnumResult
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse) GetUpdates() []*CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse) GetNumReported() int32 {
	if x != nil && x.NumReported != nil {
		return *x.NumReported
	}
	return 0
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse) GetNumNoActionTaken() int32 {
	if x != nil && x.NumNoActionTaken != nil {
		return *x.NumNoActionTaken
	}
	return 0
}

type CMsgClientToGCAcknowledgeReporterUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchIds      []uint64               `protobuf:"varint,1,rep,name=match_ids,json=matchIds" json:"match_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCAcknowledgeReporterUpdates) Reset() {
	*x = CMsgClientToGCAcknowledgeReporterUpdates{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCAcknowledgeReporterUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCAcknowledgeReporterUpdates) ProtoMessage() {}

func (x *CMsgClientToGCAcknowledgeReporterUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCAcknowledgeReporterUpdates.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCAcknowledgeReporterUpdates) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{299}
}

func (x *CMsgClientToGCAcknowledgeReporterUpdates) GetMatchIds() []uint64 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

type CMsgClientToGCRecalibrateMMR struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRecalibrateMMR) Reset() {
	*x = CMsgClientToGCRecalibrateMMR{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRecalibrateMMR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecalibrateMMR) ProtoMessage() {}

func (x *CMsgClientToGCRecalibrateMMR) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecalibrateMMR.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecalibrateMMR) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{300}
}

type CMsgClientToGCRecalibrateMMRResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Result        *CMsgClientToGCRecalibrateMMRResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCRecalibrateMMRResponse_EResponse,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRecalibrateMMRResponse fields.
const (
	Default_CMsgClientToGCRecalibrateMMRResponse_Result = CMsgClientToGCRecalibrateMMRResponse_k_eInternalError
)

func (x *CMsgClientToGCRecalibrateMMRResponse) Reset() {
	*x = CMsgClientToGCRecalibrateMMRResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRecalibrateMMRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRecalibrateMMRResponse) ProtoMessage() {}

func (x *CMsgClientToGCRecalibrateMMRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRecalibrateMMRResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRecalibrateMMRResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{301}
}

func (x *CMsgClientToGCRecalibrateMMRResponse) GetResult() CMsgClientToGCRecalibrateMMRResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCRecalibrateMMRResponse_Result
}

type CMsgDOTAPostGameItemAwardNotification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ReceiverAccountId *uint32                `protobuf:"varint,1,opt,name=receiver_account_id,json=receiverAccountId" json:"receiver_account_id,omitempty"`
	ItemDefIndex      []uint32               `protobuf:"varint,2,rep,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	ActionId          *uint32                `protobuf:"varint,3,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgDOTAPostGameItemAwardNotification) Reset() {
	*x = CMsgDOTAPostGameItemAwardNotification{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPostGameItemAwardNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPostGameItemAwardNotification) ProtoMessage() {}

func (x *CMsgDOTAPostGameItemAwardNotification) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPostGameItemAwardNotification.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPostGameItemAwardNotification) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{302}
}

func (x *CMsgDOTAPostGameItemAwardNotification) GetReceiverAccountId() uint32 {
	if x != nil && x.ReceiverAccountId != nil {
		return *x.ReceiverAccountId
	}
	return 0
}

func (x *CMsgDOTAPostGameItemAwardNotification) GetItemDefIndex() []uint32 {
	if x != nil {
		return x.ItemDefIndex
	}
	return nil
}

func (x *CMsgDOTAPostGameItemAwardNotification) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

type CMsgClientToGCGetOWMatchDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetOWMatchDetails) Reset() {
	*x = CMsgClientToGCGetOWMatchDetails{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetOWMatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetOWMatchDetails) ProtoMessage() {}

func (x *CMsgClientToGCGetOWMatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetOWMatchDetails.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetOWMatchDetails) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{303}
}

type CMsgClientToGCGetOWMatchDetailsResponse struct {
	state              protoimpl.MessageState                             `protogen:"open.v1"`
	Result             *CMsgClientToGCGetOWMatchDetailsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCGetOWMatchDetailsResponse_EResponse,def=0" json:"result,omitempty"`
	OverwatchReplayId  *uint64                                            `protobuf:"varint,2,opt,name=overwatch_replay_id,json=overwatchReplayId" json:"overwatch_replay_id,omitempty"`
	DecryptionKey      *uint64                                            `protobuf:"varint,3,opt,name=decryption_key,json=decryptionKey" json:"decryption_key,omitempty"`
	Cluster            *uint32                                            `protobuf:"varint,4,opt,name=cluster" json:"cluster,omitempty"`
	OverwatchSalt      *uint32                                            `protobuf:"varint,5,opt,name=overwatch_salt,json=overwatchSalt" json:"overwatch_salt,omitempty"`
	TargetPlayerSlot   *uint32                                            `protobuf:"varint,6,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	Markers            []*CMsgClientToGCGetOWMatchDetailsResponse_Marker  `protobuf:"bytes,7,rep,name=markers" json:"markers,omitempty"`
	ReportReason       *EOverwatchReportReason                            `protobuf:"varint,8,opt,name=report_reason,json=reportReason,enum=protocol.EOverwatchReportReason,def=0" json:"report_reason,omitempty"`
	TargetHeroId       *int32                                             `protobuf:"varint,9,opt,name=target_hero_id,json=targetHeroId" json:"target_hero_id,omitempty"`
	RankTier           *uint32                                            `protobuf:"varint,10,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	LaneSelectionFlags *uint32                                            `protobuf:"varint,11,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgClientToGCGetOWMatchDetailsResponse fields.
const (
	Default_CMsgClientToGCGetOWMatchDetailsResponse_Result       = CMsgClientToGCGetOWMatchDetailsResponse_k_eInternalError
	Default_CMsgClientToGCGetOWMatchDetailsResponse_ReportReason = EOverwatchReportReason_k_EOverwatchReportReason_Unknown
)

func (x *CMsgClientToGCGetOWMatchDetailsResponse) Reset() {
	*x = CMsgClientToGCGetOWMatchDetailsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetOWMatchDetailsResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetOWMatchDetailsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetOWMatchDetailsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{304}
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetResult() CMsgClientToGCGetOWMatchDetailsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetOWMatchDetailsResponse_Result
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetOverwatchReplayId() uint64 {
	if x != nil && x.OverwatchReplayId != nil {
		return *x.OverwatchReplayId
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetDecryptionKey() uint64 {
	if x != nil && x.DecryptionKey != nil {
		return *x.DecryptionKey
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetCluster() uint32 {
	if x != nil && x.Cluster != nil {
		return *x.Cluster
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetOverwatchSalt() uint32 {
	if x != nil && x.OverwatchSalt != nil {
		return *x.OverwatchSalt
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetMarkers() []*CMsgClientToGCGetOWMatchDetailsResponse_Marker {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetReportReason() EOverwatchReportReason {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return Default_CMsgClientToGCGetOWMatchDetailsResponse_ReportReason
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetTargetHeroId() int32 {
	if x != nil && x.TargetHeroId != nil {
		return *x.TargetHeroId
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetRankTier() uint32 {
	if x != nil && x.RankTier != nil {
		return *x.RankTier
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse) GetLaneSelectionFlags() uint32 {
	if x != nil && x.LaneSelectionFlags != nil {
		return *x.LaneSelectionFlags
	}
	return 0
}

type CMsgClientToGCSubmitOWConviction struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	OverwatchReplayId  *uint64                `protobuf:"varint,1,opt,name=overwatch_replay_id,json=overwatchReplayId" json:"overwatch_replay_id,omitempty"`
	TargetPlayerSlot   *uint32                `protobuf:"varint,2,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	CheatingConviction *EOverwatchConviction  `protobuf:"varint,3,opt,name=cheating_conviction,json=cheatingConviction,enum=protocol.EOverwatchConviction,def=0" json:"cheating_conviction,omitempty"`
	GriefingConviction *EOverwatchConviction  `protobuf:"varint,4,opt,name=griefing_conviction,json=griefingConviction,enum=protocol.EOverwatchConviction,def=0" json:"griefing_conviction,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgClientToGCSubmitOWConviction fields.
const (
	Default_CMsgClientToGCSubmitOWConviction_CheatingConviction = EOverwatchConviction_k_EOverwatchConviction_None
	Default_CMsgClientToGCSubmitOWConviction_GriefingConviction = EOverwatchConviction_k_EOverwatchConviction_None
)

func (x *CMsgClientToGCSubmitOWConviction) Reset() {
	*x = CMsgClientToGCSubmitOWConviction{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSubmitOWConviction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSubmitOWConviction) ProtoMessage() {}

func (x *CMsgClientToGCSubmitOWConviction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSubmitOWConviction.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSubmitOWConviction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{305}
}

func (x *CMsgClientToGCSubmitOWConviction) GetOverwatchReplayId() uint64 {
	if x != nil && x.OverwatchReplayId != nil {
		return *x.OverwatchReplayId
	}
	return 0
}

func (x *CMsgClientToGCSubmitOWConviction) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

func (x *CMsgClientToGCSubmitOWConviction) GetCheatingConviction() EOverwatchConviction {
	if x != nil && x.CheatingConviction != nil {
		return *x.CheatingConviction
	}
	return Default_CMsgClientToGCSubmitOWConviction_CheatingConviction
}

func (x *CMsgClientToGCSubmitOWConviction) GetGriefingConviction() EOverwatchConviction {
	if x != nil && x.GriefingConviction != nil {
		return *x.GriefingConviction
	}
	return Default_CMsgClientToGCSubmitOWConviction_GriefingConviction
}

type CMsgClientToGCSubmitOWConvictionResponse struct {
	state             protoimpl.MessageState                              `protogen:"open.v1"`
	Result            *CMsgClientToGCSubmitOWConvictionResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCSubmitOWConvictionResponse_EResponse,def=0" json:"result,omitempty"`
	OverwatchReplayId *uint64                                             `protobuf:"varint,2,opt,name=overwatch_replay_id,json=overwatchReplayId" json:"overwatch_replay_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgClientToGCSubmitOWConvictionResponse fields.
const (
	Default_CMsgClientToGCSubmitOWConvictionResponse_Result = CMsgClientToGCSubmitOWConvictionResponse_k_eInternalError
)

func (x *CMsgClientToGCSubmitOWConvictionResponse) Reset() {
	*x = CMsgClientToGCSubmitOWConvictionResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSubmitOWConvictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSubmitOWConvictionResponse) ProtoMessage() {}

func (x *CMsgClientToGCSubmitOWConvictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSubmitOWConvictionResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSubmitOWConvictionResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{306}
}

func (x *CMsgClientToGCSubmitOWConvictionResponse) GetResult() CMsgClientToGCSubmitOWConvictionResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSubmitOWConvictionResponse_Result
}

func (x *CMsgClientToGCSubmitOWConvictionResponse) GetOverwatchReplayId() uint64 {
	if x != nil && x.OverwatchReplayId != nil {
		return *x.OverwatchReplayId
	}
	return 0
}

type CMsgClientToGCChinaSSAURLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCChinaSSAURLRequest) Reset() {
	*x = CMsgClientToGCChinaSSAURLRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCChinaSSAURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCChinaSSAURLRequest) ProtoMessage() {}

func (x *CMsgClientToGCChinaSSAURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCChinaSSAURLRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCChinaSSAURLRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{307}
}

type CMsgClientToGCChinaSSAURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgreementUrl  *string                `protobuf:"bytes,1,opt,name=agreement_url,json=agreementUrl" json:"agreement_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCChinaSSAURLResponse) Reset() {
	*x = CMsgClientToGCChinaSSAURLResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCChinaSSAURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCChinaSSAURLResponse) ProtoMessage() {}

func (x *CMsgClientToGCChinaSSAURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCChinaSSAURLResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCChinaSSAURLResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{308}
}

func (x *CMsgClientToGCChinaSSAURLResponse) GetAgreementUrl() string {
	if x != nil && x.AgreementUrl != nil {
		return *x.AgreementUrl
	}
	return ""
}

type CMsgClientToGCChinaSSAAcceptedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCChinaSSAAcceptedRequest) Reset() {
	*x = CMsgClientToGCChinaSSAAcceptedRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCChinaSSAAcceptedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCChinaSSAAcceptedRequest) ProtoMessage() {}

func (x *CMsgClientToGCChinaSSAAcceptedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCChinaSSAAcceptedRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCChinaSSAAcceptedRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{309}
}

type CMsgClientToGCChinaSSAAcceptedResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AgreementAccepted *bool                  `protobuf:"varint,1,opt,name=agreement_accepted,json=agreementAccepted" json:"agreement_accepted,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCChinaSSAAcceptedResponse) Reset() {
	*x = CMsgClientToGCChinaSSAAcceptedResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCChinaSSAAcceptedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCChinaSSAAcceptedResponse) ProtoMessage() {}

func (x *CMsgClientToGCChinaSSAAcceptedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCChinaSSAAcceptedResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCChinaSSAAcceptedResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{310}
}

func (x *CMsgClientToGCChinaSSAAcceptedResponse) GetAgreementAccepted() bool {
	if x != nil && x.AgreementAccepted != nil {
		return *x.AgreementAccepted
	}
	return false
}

type CMsgGCToClientOverwatchCasesAvailable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExpireTime    *uint32                `protobuf:"fixed32,1,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientOverwatchCasesAvailable) Reset() {
	*x = CMsgGCToClientOverwatchCasesAvailable{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientOverwatchCasesAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientOverwatchCasesAvailable) ProtoMessage() {}

func (x *CMsgGCToClientOverwatchCasesAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientOverwatchCasesAvailable.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientOverwatchCasesAvailable) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{311}
}

func (x *CMsgGCToClientOverwatchCasesAvailable) GetExpireTime() uint32 {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return 0
}

type CMsgClientToGCStartWatchingOverwatch struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OverwatchReplayId *uint64                `protobuf:"varint,1,opt,name=overwatch_replay_id,json=overwatchReplayId" json:"overwatch_replay_id,omitempty"`
	TargetPlayerSlot  *uint32                `protobuf:"varint,2,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCStartWatchingOverwatch) Reset() {
	*x = CMsgClientToGCStartWatchingOverwatch{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCStartWatchingOverwatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStartWatchingOverwatch) ProtoMessage() {}

func (x *CMsgClientToGCStartWatchingOverwatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStartWatchingOverwatch.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStartWatchingOverwatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{312}
}

func (x *CMsgClientToGCStartWatchingOverwatch) GetOverwatchReplayId() uint64 {
	if x != nil && x.OverwatchReplayId != nil {
		return *x.OverwatchReplayId
	}
	return 0
}

func (x *CMsgClientToGCStartWatchingOverwatch) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

type CMsgClientToGCStopWatchingOverwatch struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OverwatchReplayId *uint64                `protobuf:"varint,1,opt,name=overwatch_replay_id,json=overwatchReplayId" json:"overwatch_replay_id,omitempty"`
	TargetPlayerSlot  *uint32                `protobuf:"varint,2,opt,name=target_player_slot,json=targetPlayerSlot" json:"target_player_slot,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCStopWatchingOverwatch) Reset() {
	*x = CMsgClientToGCStopWatchingOverwatch{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCStopWatchingOverwatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCStopWatchingOverwatch) ProtoMessage() {}

func (x *CMsgClientToGCStopWatchingOverwatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCStopWatchingOverwatch.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCStopWatchingOverwatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{313}
}

func (x *CMsgClientToGCStopWatchingOverwatch) GetOverwatchReplayId() uint64 {
	if x != nil && x.OverwatchReplayId != nil {
		return *x.OverwatchReplayId
	}
	return 0
}

func (x *CMsgClientToGCStopWatchingOverwatch) GetTargetPlayerSlot() uint32 {
	if x != nil && x.TargetPlayerSlot != nil {
		return *x.TargetPlayerSlot
	}
	return 0
}

type CMsgClientToGCOverwatchReplayError struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OverwatchReplayId *uint64                `protobuf:"varint,1,opt,name=overwatch_replay_id,json=overwatchReplayId" json:"overwatch_replay_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCOverwatchReplayError) Reset() {
	*x = CMsgClientToGCOverwatchReplayError{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOverwatchReplayError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOverwatchReplayError) ProtoMessage() {}

func (x *CMsgClientToGCOverwatchReplayError) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOverwatchReplayError.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOverwatchReplayError) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{314}
}

func (x *CMsgClientToGCOverwatchReplayError) GetOverwatchReplayId() uint64 {
	if x != nil && x.OverwatchReplayId != nil {
		return *x.OverwatchReplayId
	}
	return 0
}

type CMsgClientToGCGetDPCFavorites struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetDPCFavorites) Reset() {
	*x = CMsgClientToGCGetDPCFavorites{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetDPCFavorites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetDPCFavorites) ProtoMessage() {}

func (x *CMsgClientToGCGetDPCFavorites) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetDPCFavorites.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetDPCFavorites) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{315}
}

type CMsgClientToGCGetDPCFavoritesResponse struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	Result        *CMsgClientToGCGetDPCFavoritesResponse_EResponse  `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCGetDPCFavoritesResponse_EResponse,def=0" json:"result,omitempty"`
	Favorites     []*CMsgClientToGCGetDPCFavoritesResponse_Favorite `protobuf:"bytes,2,rep,name=favorites" json:"favorites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCGetDPCFavoritesResponse fields.
const (
	Default_CMsgClientToGCGetDPCFavoritesResponse_Result = CMsgClientToGCGetDPCFavoritesResponse_k_eInternalError
)

func (x *CMsgClientToGCGetDPCFavoritesResponse) Reset() {
	*x = CMsgClientToGCGetDPCFavoritesResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetDPCFavoritesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetDPCFavoritesResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetDPCFavoritesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetDPCFavoritesResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetDPCFavoritesResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{316}
}

func (x *CMsgClientToGCGetDPCFavoritesResponse) GetResult() CMsgClientToGCGetDPCFavoritesResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCGetDPCFavoritesResponse_Result
}

func (x *CMsgClientToGCGetDPCFavoritesResponse) GetFavorites() []*CMsgClientToGCGetDPCFavoritesResponse_Favorite {
	if x != nil {
		return x.Favorites
	}
	return nil
}

type CMsgClientToGCSetDPCFavoriteState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FavoriteType  *EDPCFavoriteType      `protobuf:"varint,1,opt,name=favorite_type,json=favoriteType,enum=protocol.EDPCFavoriteType,def=0" json:"favorite_type,omitempty"`
	FavoriteId    *uint32                `protobuf:"varint,2,opt,name=favorite_id,json=favoriteId" json:"favorite_id,omitempty"`
	Enabled       *bool                  `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSetDPCFavoriteState fields.
const (
	Default_CMsgClientToGCSetDPCFavoriteState_FavoriteType = EDPCFavoriteType_FAVORITE_TYPE_ALL
)

func (x *CMsgClientToGCSetDPCFavoriteState) Reset() {
	*x = CMsgClientToGCSetDPCFavoriteState{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetDPCFavoriteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetDPCFavoriteState) ProtoMessage() {}

func (x *CMsgClientToGCSetDPCFavoriteState) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetDPCFavoriteState.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetDPCFavoriteState) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{317}
}

func (x *CMsgClientToGCSetDPCFavoriteState) GetFavoriteType() EDPCFavoriteType {
	if x != nil && x.FavoriteType != nil {
		return *x.FavoriteType
	}
	return Default_CMsgClientToGCSetDPCFavoriteState_FavoriteType
}

func (x *CMsgClientToGCSetDPCFavoriteState) GetFavoriteId() uint32 {
	if x != nil && x.FavoriteId != nil {
		return *x.FavoriteId
	}
	return 0
}

func (x *CMsgClientToGCSetDPCFavoriteState) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CMsgClientToGCSetDPCFavoriteStateResponse struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Result        *CMsgClientToGCSetDPCFavoriteStateResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCSetDPCFavoriteStateResponse_EResponse,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSetDPCFavoriteStateResponse fields.
const (
	Default_CMsgClientToGCSetDPCFavoriteStateResponse_Result = CMsgClientToGCSetDPCFavoriteStateResponse_k_eInternalError
)

func (x *CMsgClientToGCSetDPCFavoriteStateResponse) Reset() {
	*x = CMsgClientToGCSetDPCFavoriteStateResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetDPCFavoriteStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetDPCFavoriteStateResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetDPCFavoriteStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetDPCFavoriteStateResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetDPCFavoriteStateResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{318}
}

func (x *CMsgClientToGCSetDPCFavoriteStateResponse) GetResult() CMsgClientToGCSetDPCFavoriteStateResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSetDPCFavoriteStateResponse_Result
}

type CMsgClientToGCSetEventActiveSeasonID struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventId        *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ActiveSeasonId *uint32                `protobuf:"varint,2,opt,name=active_season_id,json=activeSeasonId" json:"active_season_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCSetEventActiveSeasonID) Reset() {
	*x = CMsgClientToGCSetEventActiveSeasonID{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetEventActiveSeasonID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetEventActiveSeasonID) ProtoMessage() {}

func (x *CMsgClientToGCSetEventActiveSeasonID) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetEventActiveSeasonID.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetEventActiveSeasonID) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{319}
}

func (x *CMsgClientToGCSetEventActiveSeasonID) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCSetEventActiveSeasonID) GetActiveSeasonId() uint32 {
	if x != nil && x.ActiveSeasonId != nil {
		return *x.ActiveSeasonId
	}
	return 0
}

type CMsgClientToGCSetEventActiveSeasonIDResponse struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Result        *CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSetEventActiveSeasonIDResponse fields.
const (
	Default_CMsgClientToGCSetEventActiveSeasonIDResponse_Result = CMsgClientToGCSetEventActiveSeasonIDResponse_k_eInternalError
)

func (x *CMsgClientToGCSetEventActiveSeasonIDResponse) Reset() {
	*x = CMsgClientToGCSetEventActiveSeasonIDResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetEventActiveSeasonIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetEventActiveSeasonIDResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetEventActiveSeasonIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetEventActiveSeasonIDResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetEventActiveSeasonIDResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{320}
}

func (x *CMsgClientToGCSetEventActiveSeasonIDResponse) GetResult() CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCSetEventActiveSeasonIDResponse_Result
}

type CMsgClientToGCPurchaseLabyrinthBlessings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	BlessingIds   []int32                `protobuf:"varint,2,rep,name=blessing_ids,json=blessingIds" json:"blessing_ids,omitempty"`
	Debug         *bool                  `protobuf:"varint,3,opt,name=debug" json:"debug,omitempty"`
	DebugRemove   *bool                  `protobuf:"varint,4,opt,name=debug_remove,json=debugRemove" json:"debug_remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCPurchaseLabyrinthBlessings fields.
const (
	Default_CMsgClientToGCPurchaseLabyrinthBlessings_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) Reset() {
	*x = CMsgClientToGCPurchaseLabyrinthBlessings{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPurchaseLabyrinthBlessings) ProtoMessage() {}

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPurchaseLabyrinthBlessings.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPurchaseLabyrinthBlessings) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{321}
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCPurchaseLabyrinthBlessings_EventId
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) GetBlessingIds() []int32 {
	if x != nil {
		return x.BlessingIds
	}
	return nil
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessings) GetDebugRemove() bool {
	if x != nil && x.DebugRemove != nil {
		return *x.DebugRemove
	}
	return false
}

type CMsgClientToGCPurchaseLabyrinthBlessingsResponse struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Result        *CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse `protobuf:"varint,1,opt,name=result,enum=protocol.CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse,def=0" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCPurchaseLabyrinthBlessingsResponse fields.
const (
	Default_CMsgClientToGCPurchaseLabyrinthBlessingsResponse_Result = CMsgClientToGCPurchaseLabyrinthBlessingsResponse_k_eInternalError
)

func (x *CMsgClientToGCPurchaseLabyrinthBlessingsResponse) Reset() {
	*x = CMsgClientToGCPurchaseLabyrinthBlessingsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[322]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPurchaseLabyrinthBlessingsResponse) ProtoMessage() {}

func (x *CMsgClientToGCPurchaseLabyrinthBlessingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[322]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPurchaseLabyrinthBlessingsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPurchaseLabyrinthBlessingsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{322}
}

func (x *CMsgClientToGCPurchaseLabyrinthBlessingsResponse) GetResult() CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCPurchaseLabyrinthBlessingsResponse_Result
}

type CMsgClientToGCGetStickerbookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetStickerbookRequest) Reset() {
	*x = CMsgClientToGCGetStickerbookRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[323]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetStickerbookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetStickerbookRequest) ProtoMessage() {}

func (x *CMsgClientToGCGetStickerbookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[323]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetStickerbookRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetStickerbookRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{323}
}

func (x *CMsgClientToGCGetStickerbookRequest) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

type CMsgClientToGCGetStickerbookResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Response      *CMsgClientToGCGetStickerbookResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCGetStickerbookResponse_EResponse,def=0" json:"response,omitempty"`
	Stickerbook   *CMsgStickerbook                                `protobuf:"bytes,2,opt,name=stickerbook" json:"stickerbook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCGetStickerbookResponse fields.
const (
	Default_CMsgClientToGCGetStickerbookResponse_Response = CMsgClientToGCGetStickerbookResponse_k_eInternalError
)

func (x *CMsgClientToGCGetStickerbookResponse) Reset() {
	*x = CMsgClientToGCGetStickerbookResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[324]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetStickerbookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetStickerbookResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetStickerbookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[324]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetStickerbookResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetStickerbookResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{324}
}

func (x *CMsgClientToGCGetStickerbookResponse) GetResponse() CMsgClientToGCGetStickerbookResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCGetStickerbookResponse_Response
}

func (x *CMsgClientToGCGetStickerbookResponse) GetStickerbook() *CMsgStickerbook {
	if x != nil {
		return x.Stickerbook
	}
	return nil
}

type CMsgClientToGCCreateStickerbookPageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        *uint32                `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	EventId       *EEvent                `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	PageType      *EStickerbookPageType  `protobuf:"varint,3,opt,name=page_type,json=pageType,enum=protocol.EStickerbookPageType,def=0" json:"page_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCreateStickerbookPageRequest fields.
const (
	Default_CMsgClientToGCCreateStickerbookPageRequest_EventId  = EEvent_EVENT_ID_NONE
	Default_CMsgClientToGCCreateStickerbookPageRequest_PageType = EStickerbookPageType_STICKER_PAGE_GENERIC
)

func (x *CMsgClientToGCCreateStickerbookPageRequest) Reset() {
	*x = CMsgClientToGCCreateStickerbookPageRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[325]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreateStickerbookPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateStickerbookPageRequest) ProtoMessage() {}

func (x *CMsgClientToGCCreateStickerbookPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[325]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateStickerbookPageRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateStickerbookPageRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{325}
}

func (x *CMsgClientToGCCreateStickerbookPageRequest) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgClientToGCCreateStickerbookPageRequest) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCCreateStickerbookPageRequest_EventId
}

func (x *CMsgClientToGCCreateStickerbookPageRequest) GetPageType() EStickerbookPageType {
	if x != nil && x.PageType != nil {
		return *x.PageType
	}
	return Default_CMsgClientToGCCreateStickerbookPageRequest_PageType
}

type CMsgClientToGCCreateStickerbookPageResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Response      *CMsgClientToGCCreateStickerbookPageResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCCreateStickerbookPageResponse_EResponse,def=0" json:"response,omitempty"`
	PageNumber    *uint32                                                `protobuf:"varint,2,opt,name=page_number,json=pageNumber" json:"page_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCreateStickerbookPageResponse fields.
const (
	Default_CMsgClientToGCCreateStickerbookPageResponse_Response = CMsgClientToGCCreateStickerbookPageResponse_k_eInternalError
)

func (x *CMsgClientToGCCreateStickerbookPageResponse) Reset() {
	*x = CMsgClientToGCCreateStickerbookPageResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[326]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCreateStickerbookPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCreateStickerbookPageResponse) ProtoMessage() {}

func (x *CMsgClientToGCCreateStickerbookPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[326]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCreateStickerbookPageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCreateStickerbookPageResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{326}
}

func (x *CMsgClientToGCCreateStickerbookPageResponse) GetResponse() CMsgClientToGCCreateStickerbookPageResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCCreateStickerbookPageResponse_Response
}

func (x *CMsgClientToGCCreateStickerbookPageResponse) GetPageNumber() uint32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

type CMsgClientToGCDeleteStickerbookPageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       *uint32                `protobuf:"varint,1,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	StickerCount  *uint32                `protobuf:"varint,2,opt,name=sticker_count,json=stickerCount" json:"sticker_count,omitempty"`
	StickerMax    *uint32                `protobuf:"varint,3,opt,name=sticker_max,json=stickerMax" json:"sticker_max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCDeleteStickerbookPageRequest) Reset() {
	*x = CMsgClientToGCDeleteStickerbookPageRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[327]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCDeleteStickerbookPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDeleteStickerbookPageRequest) ProtoMessage() {}

func (x *CMsgClientToGCDeleteStickerbookPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[327]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDeleteStickerbookPageRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDeleteStickerbookPageRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{327}
}

func (x *CMsgClientToGCDeleteStickerbookPageRequest) GetPageNum() uint32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *CMsgClientToGCDeleteStickerbookPageRequest) GetStickerCount() uint32 {
	if x != nil && x.StickerCount != nil {
		return *x.StickerCount
	}
	return 0
}

func (x *CMsgClientToGCDeleteStickerbookPageRequest) GetStickerMax() uint32 {
	if x != nil && x.StickerMax != nil {
		return *x.StickerMax
	}
	return 0
}

type CMsgClientToGCDeleteStickerbookPageResponse struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Response      *CMsgClientToGCDeleteStickerbookPageResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCDeleteStickerbookPageResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCDeleteStickerbookPageResponse fields.
const (
	Default_CMsgClientToGCDeleteStickerbookPageResponse_Response = CMsgClientToGCDeleteStickerbookPageResponse_k_eInternalError
)

func (x *CMsgClientToGCDeleteStickerbookPageResponse) Reset() {
	*x = CMsgClientToGCDeleteStickerbookPageResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[328]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCDeleteStickerbookPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCDeleteStickerbookPageResponse) ProtoMessage() {}

func (x *CMsgClientToGCDeleteStickerbookPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[328]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCDeleteStickerbookPageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCDeleteStickerbookPageResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{328}
}

func (x *CMsgClientToGCDeleteStickerbookPageResponse) GetResponse() CMsgClientToGCDeleteStickerbookPageResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCDeleteStickerbookPageResponse_Response
}

type CMsgClientToGCPlaceStickersRequest struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	StickerItems  []*CMsgClientToGCPlaceStickersRequest_StickerItem `protobuf:"bytes,1,rep,name=sticker_items,json=stickerItems" json:"sticker_items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCPlaceStickersRequest) Reset() {
	*x = CMsgClientToGCPlaceStickersRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[329]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlaceStickersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlaceStickersRequest) ProtoMessage() {}

func (x *CMsgClientToGCPlaceStickersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[329]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlaceStickersRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlaceStickersRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{329}
}

func (x *CMsgClientToGCPlaceStickersRequest) GetStickerItems() []*CMsgClientToGCPlaceStickersRequest_StickerItem {
	if x != nil {
		return x.StickerItems
	}
	return nil
}

type CMsgClientToGCPlaceStickersResponse struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Response      *CMsgClientToGCPlaceStickersResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCPlaceStickersResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCPlaceStickersResponse fields.
const (
	Default_CMsgClientToGCPlaceStickersResponse_Response = CMsgClientToGCPlaceStickersResponse_k_eInternalError
)

func (x *CMsgClientToGCPlaceStickersResponse) Reset() {
	*x = CMsgClientToGCPlaceStickersResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[330]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlaceStickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlaceStickersResponse) ProtoMessage() {}

func (x *CMsgClientToGCPlaceStickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[330]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlaceStickersResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlaceStickersResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{330}
}

func (x *CMsgClientToGCPlaceStickersResponse) GetResponse() CMsgClientToGCPlaceStickersResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCPlaceStickersResponse_Response
}

type CMsgClientToGCPlaceCollectionStickersRequest struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Slots         []*CMsgClientToGCPlaceCollectionStickersRequest_Slot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest) Reset() {
	*x = CMsgClientToGCPlaceCollectionStickersRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[331]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlaceCollectionStickersRequest) ProtoMessage() {}

func (x *CMsgClientToGCPlaceCollectionStickersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[331]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlaceCollectionStickersRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlaceCollectionStickersRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{331}
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest) GetSlots() []*CMsgClientToGCPlaceCollectionStickersRequest_Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type CMsgClientToGCPlaceCollectionStickersResponse struct {
	state         protoimpl.MessageState                                   `protogen:"open.v1"`
	Response      *CMsgClientToGCPlaceCollectionStickersResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCPlaceCollectionStickersResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCPlaceCollectionStickersResponse fields.
const (
	Default_CMsgClientToGCPlaceCollectionStickersResponse_Response = CMsgClientToGCPlaceCollectionStickersResponse_k_eInternalError
)

func (x *CMsgClientToGCPlaceCollectionStickersResponse) Reset() {
	*x = CMsgClientToGCPlaceCollectionStickersResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[332]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlaceCollectionStickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlaceCollectionStickersResponse) ProtoMessage() {}

func (x *CMsgClientToGCPlaceCollectionStickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[332]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlaceCollectionStickersResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlaceCollectionStickersResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{332}
}

func (x *CMsgClientToGCPlaceCollectionStickersResponse) GetResponse() CMsgClientToGCPlaceCollectionStickersResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCPlaceCollectionStickersResponse_Response
}

type CMsgClientToGCOrderStickerbookTeamPageRequest struct {
	state             protoimpl.MessageState                `protogen:"open.v1"`
	PageOrderSequence *CMsgStickerbookTeamPageOrderSequence `protobuf:"bytes,1,opt,name=page_order_sequence,json=pageOrderSequence" json:"page_order_sequence,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgClientToGCOrderStickerbookTeamPageRequest) Reset() {
	*x = CMsgClientToGCOrderStickerbookTeamPageRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[333]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOrderStickerbookTeamPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOrderStickerbookTeamPageRequest) ProtoMessage() {}

func (x *CMsgClientToGCOrderStickerbookTeamPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[333]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOrderStickerbookTeamPageRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOrderStickerbookTeamPageRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{333}
}

func (x *CMsgClientToGCOrderStickerbookTeamPageRequest) GetPageOrderSequence() *CMsgStickerbookTeamPageOrderSequence {
	if x != nil {
		return x.PageOrderSequence
	}
	return nil
}

type CMsgClientToGCOrderStickerbookTeamPageResponse struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Response      *CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCOrderStickerbookTeamPageResponse fields.
const (
	Default_CMsgClientToGCOrderStickerbookTeamPageResponse_Response = CMsgClientToGCOrderStickerbookTeamPageResponse_k_eInternalError
)

func (x *CMsgClientToGCOrderStickerbookTeamPageResponse) Reset() {
	*x = CMsgClientToGCOrderStickerbookTeamPageResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[334]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCOrderStickerbookTeamPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCOrderStickerbookTeamPageResponse) ProtoMessage() {}

func (x *CMsgClientToGCOrderStickerbookTeamPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[334]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCOrderStickerbookTeamPageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCOrderStickerbookTeamPageResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{334}
}

func (x *CMsgClientToGCOrderStickerbookTeamPageResponse) GetResponse() CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCOrderStickerbookTeamPageResponse_Response
}

type CMsgClientToGCSetHeroSticker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HeroId        *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	NewItemId     *uint64                `protobuf:"varint,2,opt,name=new_item_id,json=newItemId" json:"new_item_id,omitempty"`
	OldItemId     *uint64                `protobuf:"varint,3,opt,name=old_item_id,json=oldItemId" json:"old_item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSetHeroSticker) Reset() {
	*x = CMsgClientToGCSetHeroSticker{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[335]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetHeroSticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetHeroSticker) ProtoMessage() {}

func (x *CMsgClientToGCSetHeroSticker) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[335]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetHeroSticker.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetHeroSticker) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{335}
}

func (x *CMsgClientToGCSetHeroSticker) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCSetHeroSticker) GetNewItemId() uint64 {
	if x != nil && x.NewItemId != nil {
		return *x.NewItemId
	}
	return 0
}

func (x *CMsgClientToGCSetHeroSticker) GetOldItemId() uint64 {
	if x != nil && x.OldItemId != nil {
		return *x.OldItemId
	}
	return 0
}

type CMsgClientToGCSetHeroStickerResponse struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Response      *CMsgClientToGCSetHeroStickerResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCSetHeroStickerResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSetHeroStickerResponse fields.
const (
	Default_CMsgClientToGCSetHeroStickerResponse_Response = CMsgClientToGCSetHeroStickerResponse_k_eInternalError
)

func (x *CMsgClientToGCSetHeroStickerResponse) Reset() {
	*x = CMsgClientToGCSetHeroStickerResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[336]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetHeroStickerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetHeroStickerResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetHeroStickerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[336]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetHeroStickerResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetHeroStickerResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{336}
}

func (x *CMsgClientToGCSetHeroStickerResponse) GetResponse() CMsgClientToGCSetHeroStickerResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCSetHeroStickerResponse_Response
}

type CMsgClientToGCGetHeroStickers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetHeroStickers) Reset() {
	*x = CMsgClientToGCGetHeroStickers{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[337]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetHeroStickers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetHeroStickers) ProtoMessage() {}

func (x *CMsgClientToGCGetHeroStickers) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[337]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetHeroStickers.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetHeroStickers) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{337}
}

type CMsgClientToGCGetHeroStickersResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Response      *CMsgClientToGCGetHeroStickersResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCGetHeroStickersResponse_EResponse,def=0" json:"response,omitempty"`
	StickerHeroes *CMsgStickerHeroes                               `protobuf:"bytes,2,opt,name=sticker_heroes,json=stickerHeroes" json:"sticker_heroes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCGetHeroStickersResponse fields.
const (
	Default_CMsgClientToGCGetHeroStickersResponse_Response = CMsgClientToGCGetHeroStickersResponse_k_eInternalError
)

func (x *CMsgClientToGCGetHeroStickersResponse) Reset() {
	*x = CMsgClientToGCGetHeroStickersResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[338]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetHeroStickersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetHeroStickersResponse) ProtoMessage() {}

func (x *CMsgClientToGCGetHeroStickersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[338]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetHeroStickersResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetHeroStickersResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{338}
}

func (x *CMsgClientToGCGetHeroStickersResponse) GetResponse() CMsgClientToGCGetHeroStickersResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCGetHeroStickersResponse_Response
}

func (x *CMsgClientToGCGetHeroStickersResponse) GetStickerHeroes() *CMsgStickerHeroes {
	if x != nil {
		return x.StickerHeroes
	}
	return nil
}

type CMsgClientToGCSetFavoritePage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       *uint32                `protobuf:"varint,1,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	Clear         *bool                  `protobuf:"varint,2,opt,name=clear" json:"clear,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSetFavoritePage) Reset() {
	*x = CMsgClientToGCSetFavoritePage{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[339]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetFavoritePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetFavoritePage) ProtoMessage() {}

func (x *CMsgClientToGCSetFavoritePage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[339]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetFavoritePage.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetFavoritePage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{339}
}

func (x *CMsgClientToGCSetFavoritePage) GetPageNum() uint32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *CMsgClientToGCSetFavoritePage) GetClear() bool {
	if x != nil && x.Clear != nil {
		return *x.Clear
	}
	return false
}

type CMsgClientToGCSetFavoritePageResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Response      *CMsgClientToGCSetFavoritePageResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCSetFavoritePageResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSetFavoritePageResponse fields.
const (
	Default_CMsgClientToGCSetFavoritePageResponse_Response = CMsgClientToGCSetFavoritePageResponse_k_eInternalError
)

func (x *CMsgClientToGCSetFavoritePageResponse) Reset() {
	*x = CMsgClientToGCSetFavoritePageResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[340]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetFavoritePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetFavoritePageResponse) ProtoMessage() {}

func (x *CMsgClientToGCSetFavoritePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[340]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetFavoritePageResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetFavoritePageResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{340}
}

func (x *CMsgClientToGCSetFavoritePageResponse) GetResponse() CMsgClientToGCSetFavoritePageResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCSetFavoritePageResponse_Response
}

type CMsgClientToGCClaimSwag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	ActionId      *uint32                `protobuf:"varint,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Data          *uint32                `protobuf:"varint,3,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCClaimSwag fields.
const (
	Default_CMsgClientToGCClaimSwag_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgClientToGCClaimSwag) Reset() {
	*x = CMsgClientToGCClaimSwag{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[341]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCClaimSwag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClaimSwag) ProtoMessage() {}

func (x *CMsgClientToGCClaimSwag) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[341]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClaimSwag.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClaimSwag) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{341}
}

func (x *CMsgClientToGCClaimSwag) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgClientToGCClaimSwag_EventId
}

func (x *CMsgClientToGCClaimSwag) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgClientToGCClaimSwag) GetData() uint32 {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return 0
}

type CMsgClientToGCClaimSwagResponse struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Response      *CMsgClientToGCClaimSwagResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCClaimSwagResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCClaimSwagResponse fields.
const (
	Default_CMsgClientToGCClaimSwagResponse_Response = CMsgClientToGCClaimSwagResponse_k_eInternalError
)

func (x *CMsgClientToGCClaimSwagResponse) Reset() {
	*x = CMsgClientToGCClaimSwagResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[342]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCClaimSwagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCClaimSwagResponse) ProtoMessage() {}

func (x *CMsgClientToGCClaimSwagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[342]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCClaimSwagResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCClaimSwagResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{342}
}

func (x *CMsgClientToGCClaimSwagResponse) GetResponse() CMsgClientToGCClaimSwagResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCClaimSwagResponse_Response
}

type CMsgClientToGCCollectorsCacheAvailableDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestId     *uint32                `protobuf:"varint,1,opt,name=contest_id,json=contestId" json:"contest_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCCollectorsCacheAvailableDataRequest) Reset() {
	*x = CMsgClientToGCCollectorsCacheAvailableDataRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[343]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCollectorsCacheAvailableDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCollectorsCacheAvailableDataRequest) ProtoMessage() {}

func (x *CMsgClientToGCCollectorsCacheAvailableDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[343]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCollectorsCacheAvailableDataRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCollectorsCacheAvailableDataRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{343}
}

func (x *CMsgClientToGCCollectorsCacheAvailableDataRequest) GetContestId() uint32 {
	if x != nil && x.ContestId != nil {
		return *x.ContestId
	}
	return 0
}

type CMsgGCToClientCollectorsCacheAvailableDataResponse struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Votes         []*CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote `protobuf:"bytes,1,rep,name=votes" json:"votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse) Reset() {
	*x = CMsgGCToClientCollectorsCacheAvailableDataResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[344]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCollectorsCacheAvailableDataResponse) ProtoMessage() {}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[344]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCollectorsCacheAvailableDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCollectorsCacheAvailableDataResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{344}
}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse) GetVotes() []*CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

type CMsgClientToGCUploadMatchClip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchClip     *CMatchClip            `protobuf:"bytes,1,opt,name=match_clip,json=matchClip" json:"match_clip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUploadMatchClip) Reset() {
	*x = CMsgClientToGCUploadMatchClip{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[345]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUploadMatchClip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUploadMatchClip) ProtoMessage() {}

func (x *CMsgClientToGCUploadMatchClip) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[345]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUploadMatchClip.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUploadMatchClip) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{345}
}

func (x *CMsgClientToGCUploadMatchClip) GetMatchClip() *CMatchClip {
	if x != nil {
		return x.MatchClip
	}
	return nil
}

type CMsgGCToClientUploadMatchClipResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Response      *CMsgGCToClientUploadMatchClipResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgGCToClientUploadMatchClipResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientUploadMatchClipResponse fields.
const (
	Default_CMsgGCToClientUploadMatchClipResponse_Response = CMsgGCToClientUploadMatchClipResponse_k_eInternalError
)

func (x *CMsgGCToClientUploadMatchClipResponse) Reset() {
	*x = CMsgGCToClientUploadMatchClipResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[346]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientUploadMatchClipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientUploadMatchClipResponse) ProtoMessage() {}

func (x *CMsgGCToClientUploadMatchClipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[346]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientUploadMatchClipResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientUploadMatchClipResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{346}
}

func (x *CMsgGCToClientUploadMatchClipResponse) GetResponse() CMsgGCToClientUploadMatchClipResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgGCToClientUploadMatchClipResponse_Response
}

type CMsgClientToGCMapStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCMapStatsRequest) Reset() {
	*x = CMsgClientToGCMapStatsRequest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[347]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCMapStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCMapStatsRequest) ProtoMessage() {}

func (x *CMsgClientToGCMapStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[347]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCMapStatsRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCMapStatsRequest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{347}
}

type CMsgGCToClientMapStatsResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Response      *CMsgGCToClientMapStatsResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgGCToClientMapStatsResponse_EResponse,def=0" json:"response,omitempty"`
	PersonalStats *CMsgMapStatsSnapshot                     `protobuf:"bytes,2,opt,name=personal_stats,json=personalStats" json:"personal_stats,omitempty"`
	GlobalStats   *CMsgGlobalMapStats                       `protobuf:"bytes,3,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientMapStatsResponse fields.
const (
	Default_CMsgGCToClientMapStatsResponse_Response = CMsgGCToClientMapStatsResponse_k_eInternalError
)

func (x *CMsgGCToClientMapStatsResponse) Reset() {
	*x = CMsgGCToClientMapStatsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[348]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientMapStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientMapStatsResponse) ProtoMessage() {}

func (x *CMsgGCToClientMapStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[348]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientMapStatsResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientMapStatsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{348}
}

func (x *CMsgGCToClientMapStatsResponse) GetResponse() CMsgGCToClientMapStatsResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgGCToClientMapStatsResponse_Response
}

func (x *CMsgGCToClientMapStatsResponse) GetPersonalStats() *CMsgMapStatsSnapshot {
	if x != nil {
		return x.PersonalStats
	}
	return nil
}

func (x *CMsgGCToClientMapStatsResponse) GetGlobalStats() *CMsgGlobalMapStats {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

type CMsgRoadToTIAssignedQuest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QuestId         *uint32                `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	Difficulty      *uint32                `protobuf:"varint,2,opt,name=difficulty" json:"difficulty,omitempty"`
	ProgressFlags   *uint32                `protobuf:"varint,3,opt,name=progress_flags,json=progressFlags" json:"progress_flags,omitempty"`
	HalfCreditFlags *uint32                `protobuf:"varint,4,opt,name=half_credit_flags,json=halfCreditFlags" json:"half_credit_flags,omitempty"`
	Completed       *bool                  `protobuf:"varint,5,opt,name=completed" json:"completed,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgRoadToTIAssignedQuest) Reset() {
	*x = CMsgRoadToTIAssignedQuest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[349]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgRoadToTIAssignedQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRoadToTIAssignedQuest) ProtoMessage() {}

func (x *CMsgRoadToTIAssignedQuest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[349]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRoadToTIAssignedQuest.ProtoReflect.Descriptor instead.
func (*CMsgRoadToTIAssignedQuest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{349}
}

func (x *CMsgRoadToTIAssignedQuest) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgRoadToTIAssignedQuest) GetDifficulty() uint32 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *CMsgRoadToTIAssignedQuest) GetProgressFlags() uint32 {
	if x != nil && x.ProgressFlags != nil {
		return *x.ProgressFlags
	}
	return 0
}

func (x *CMsgRoadToTIAssignedQuest) GetHalfCreditFlags() uint32 {
	if x != nil && x.HalfCreditFlags != nil {
		return *x.HalfCreditFlags
	}
	return 0
}

func (x *CMsgRoadToTIAssignedQuest) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

type CMsgRoadToTIUserData struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Quests        []*CMsgRoadToTIAssignedQuest `protobuf:"bytes,1,rep,name=quests" json:"quests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgRoadToTIUserData) Reset() {
	*x = CMsgRoadToTIUserData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[350]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgRoadToTIUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgRoadToTIUserData) ProtoMessage() {}

func (x *CMsgRoadToTIUserData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[350]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgRoadToTIUserData.ProtoReflect.Descriptor instead.
func (*CMsgRoadToTIUserData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{350}
}

func (x *CMsgRoadToTIUserData) GetQuests() []*CMsgRoadToTIAssignedQuest {
	if x != nil {
		return x.Quests
	}
	return nil
}

type CMsgClientToGCRoadToTIGetQuests struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRoadToTIGetQuests) Reset() {
	*x = CMsgClientToGCRoadToTIGetQuests{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[351]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIGetQuests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIGetQuests) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIGetQuests) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[351]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIGetQuests.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIGetQuests) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{351}
}

func (x *CMsgClientToGCRoadToTIGetQuests) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCRoadToTIGetQuestsResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Response      *CMsgClientToGCRoadToTIGetQuestsResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCRoadToTIGetQuestsResponse_EResponse,def=0" json:"response,omitempty"`
	QuestData     *CMsgRoadToTIUserData                              `protobuf:"bytes,2,opt,name=quest_data,json=questData" json:"quest_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRoadToTIGetQuestsResponse fields.
const (
	Default_CMsgClientToGCRoadToTIGetQuestsResponse_Response = CMsgClientToGCRoadToTIGetQuestsResponse_k_eInternalError
)

func (x *CMsgClientToGCRoadToTIGetQuestsResponse) Reset() {
	*x = CMsgClientToGCRoadToTIGetQuestsResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[352]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIGetQuestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIGetQuestsResponse) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIGetQuestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[352]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIGetQuestsResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIGetQuestsResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{352}
}

func (x *CMsgClientToGCRoadToTIGetQuestsResponse) GetResponse() CMsgClientToGCRoadToTIGetQuestsResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCRoadToTIGetQuestsResponse_Response
}

func (x *CMsgClientToGCRoadToTIGetQuestsResponse) GetQuestData() *CMsgRoadToTIUserData {
	if x != nil {
		return x.QuestData
	}
	return nil
}

type CMsgClientToGCRoadToTIGetActiveQuest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRoadToTIGetActiveQuest) Reset() {
	*x = CMsgClientToGCRoadToTIGetActiveQuest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[353]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIGetActiveQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIGetActiveQuest) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIGetActiveQuest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[353]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIGetActiveQuest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIGetActiveQuest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{353}
}

func (x *CMsgClientToGCRoadToTIGetActiveQuest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

type CMsgClientToGCRoadToTIGetActiveQuestResponse struct {
	state         protoimpl.MessageState                                  `protogen:"open.v1"`
	Response      *CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse,def=0" json:"response,omitempty"`
	QuestData     *CMsgRoadToTIAssignedQuest                              `protobuf:"bytes,2,opt,name=quest_data,json=questData" json:"quest_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRoadToTIGetActiveQuestResponse fields.
const (
	Default_CMsgClientToGCRoadToTIGetActiveQuestResponse_Response = CMsgClientToGCRoadToTIGetActiveQuestResponse_k_eInternalError
)

func (x *CMsgClientToGCRoadToTIGetActiveQuestResponse) Reset() {
	*x = CMsgClientToGCRoadToTIGetActiveQuestResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[354]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIGetActiveQuestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIGetActiveQuestResponse) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIGetActiveQuestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[354]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIGetActiveQuestResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIGetActiveQuestResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{354}
}

func (x *CMsgClientToGCRoadToTIGetActiveQuestResponse) GetResponse() CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCRoadToTIGetActiveQuestResponse_Response
}

func (x *CMsgClientToGCRoadToTIGetActiveQuestResponse) GetQuestData() *CMsgRoadToTIAssignedQuest {
	if x != nil {
		return x.QuestData
	}
	return nil
}

type CMsgGCToClientRoadToTIQuestDataUpdated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	QuestData     *CMsgRoadToTIUserData  `protobuf:"bytes,2,opt,name=quest_data,json=questData" json:"quest_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientRoadToTIQuestDataUpdated) Reset() {
	*x = CMsgGCToClientRoadToTIQuestDataUpdated{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[355]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientRoadToTIQuestDataUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientRoadToTIQuestDataUpdated) ProtoMessage() {}

func (x *CMsgGCToClientRoadToTIQuestDataUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[355]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientRoadToTIQuestDataUpdated.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientRoadToTIQuestDataUpdated) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{355}
}

func (x *CMsgGCToClientRoadToTIQuestDataUpdated) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientRoadToTIQuestDataUpdated) GetQuestData() *CMsgRoadToTIUserData {
	if x != nil {
		return x.QuestData
	}
	return nil
}

type CMsgClientToGCRoadToTIUseItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ItemType      *uint32                `protobuf:"varint,2,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	HeroIndex     *uint32                `protobuf:"varint,3,opt,name=hero_index,json=heroIndex" json:"hero_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRoadToTIUseItem) Reset() {
	*x = CMsgClientToGCRoadToTIUseItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[356]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIUseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIUseItem) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIUseItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[356]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIUseItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIUseItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{356}
}

func (x *CMsgClientToGCRoadToTIUseItem) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCRoadToTIUseItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *CMsgClientToGCRoadToTIUseItem) GetHeroIndex() uint32 {
	if x != nil && x.HeroIndex != nil {
		return *x.HeroIndex
	}
	return 0
}

type CMsgClientToGCRoadToTIUseItemResponse struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Response      *CMsgClientToGCRoadToTIUseItemResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCRoadToTIUseItemResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCRoadToTIUseItemResponse fields.
const (
	Default_CMsgClientToGCRoadToTIUseItemResponse_Response = CMsgClientToGCRoadToTIUseItemResponse_k_eInternalError
)

func (x *CMsgClientToGCRoadToTIUseItemResponse) Reset() {
	*x = CMsgClientToGCRoadToTIUseItemResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[357]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIUseItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIUseItemResponse) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIUseItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[357]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIUseItemResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIUseItemResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{357}
}

func (x *CMsgClientToGCRoadToTIUseItemResponse) GetResponse() CMsgClientToGCRoadToTIUseItemResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCRoadToTIUseItemResponse_Response
}

type CMsgClientToGCRoadToTIDevForceQuest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EventId        *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ForceMatchType *bool                  `protobuf:"varint,2,opt,name=force_match_type,json=forceMatchType" json:"force_match_type,omitempty"`
	ForceId        *uint32                `protobuf:"varint,3,opt,name=force_id,json=forceId" json:"force_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCRoadToTIDevForceQuest) Reset() {
	*x = CMsgClientToGCRoadToTIDevForceQuest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[358]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRoadToTIDevForceQuest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRoadToTIDevForceQuest) ProtoMessage() {}

func (x *CMsgClientToGCRoadToTIDevForceQuest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[358]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRoadToTIDevForceQuest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRoadToTIDevForceQuest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{358}
}

func (x *CMsgClientToGCRoadToTIDevForceQuest) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgClientToGCRoadToTIDevForceQuest) GetForceMatchType() bool {
	if x != nil && x.ForceMatchType != nil {
		return *x.ForceMatchType
	}
	return false
}

func (x *CMsgClientToGCRoadToTIDevForceQuest) GetForceId() uint32 {
	if x != nil && x.ForceId != nil {
		return *x.ForceId
	}
	return 0
}

type CMsgLobbyRoadToTIMatchQuestData struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	QuestData     *CMsgRoadToTIAssignedQuest `protobuf:"bytes,1,opt,name=quest_data,json=questData" json:"quest_data,omitempty"`
	QuestPeriod   *uint32                    `protobuf:"varint,2,opt,name=quest_period,json=questPeriod" json:"quest_period,omitempty"`
	QuestNumber   *uint32                    `protobuf:"varint,3,opt,name=quest_number,json=questNumber" json:"quest_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgLobbyRoadToTIMatchQuestData) Reset() {
	*x = CMsgLobbyRoadToTIMatchQuestData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[359]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgLobbyRoadToTIMatchQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgLobbyRoadToTIMatchQuestData) ProtoMessage() {}

func (x *CMsgLobbyRoadToTIMatchQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[359]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgLobbyRoadToTIMatchQuestData.ProtoReflect.Descriptor instead.
func (*CMsgLobbyRoadToTIMatchQuestData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{359}
}

func (x *CMsgLobbyRoadToTIMatchQuestData) GetQuestData() *CMsgRoadToTIAssignedQuest {
	if x != nil {
		return x.QuestData
	}
	return nil
}

func (x *CMsgLobbyRoadToTIMatchQuestData) GetQuestPeriod() uint32 {
	if x != nil && x.QuestPeriod != nil {
		return *x.QuestPeriod
	}
	return 0
}

func (x *CMsgLobbyRoadToTIMatchQuestData) GetQuestNumber() uint32 {
	if x != nil && x.QuestNumber != nil {
		return *x.QuestNumber
	}
	return 0
}

type CMsgClientToGCNewBloomGift struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Defindex         *uint32                `protobuf:"varint,1,opt,name=defindex" json:"defindex,omitempty"`
	LobbyId          *uint64                `protobuf:"varint,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	TargetAccountIds []uint32               `protobuf:"varint,3,rep,name=target_account_ids,json=targetAccountIds" json:"target_account_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgClientToGCNewBloomGift) Reset() {
	*x = CMsgClientToGCNewBloomGift{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[360]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCNewBloomGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCNewBloomGift) ProtoMessage() {}

func (x *CMsgClientToGCNewBloomGift) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[360]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCNewBloomGift.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCNewBloomGift) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{360}
}

func (x *CMsgClientToGCNewBloomGift) GetDefindex() uint32 {
	if x != nil && x.Defindex != nil {
		return *x.Defindex
	}
	return 0
}

func (x *CMsgClientToGCNewBloomGift) GetLobbyId() uint64 {
	if x != nil && x.LobbyId != nil {
		return *x.LobbyId
	}
	return 0
}

func (x *CMsgClientToGCNewBloomGift) GetTargetAccountIds() []uint32 {
	if x != nil {
		return x.TargetAccountIds
	}
	return nil
}

type CMsgClientToGCNewBloomGiftResponse struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Result             *ENewBloomGiftingResponse `protobuf:"varint,1,opt,name=result,enum=protocol.ENewBloomGiftingResponse,def=1" json:"result,omitempty"`
	ReceivedAccountIds []uint32                  `protobuf:"varint,2,rep,name=received_account_ids,json=receivedAccountIds" json:"received_account_ids,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CMsgClientToGCNewBloomGiftResponse fields.
const (
	Default_CMsgClientToGCNewBloomGiftResponse_Result = ENewBloomGiftingResponse_kENewBloomGifting_UnknownFailure
)

func (x *CMsgClientToGCNewBloomGiftResponse) Reset() {
	*x = CMsgClientToGCNewBloomGiftResponse{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[361]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCNewBloomGiftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCNewBloomGiftResponse) ProtoMessage() {}

func (x *CMsgClientToGCNewBloomGiftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[361]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCNewBloomGiftResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCNewBloomGiftResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{361}
}

func (x *CMsgClientToGCNewBloomGiftResponse) GetResult() ENewBloomGiftingResponse {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgClientToGCNewBloomGiftResponse_Result
}

func (x *CMsgClientToGCNewBloomGiftResponse) GetReceivedAccountIds() []uint32 {
	if x != nil {
		return x.ReceivedAccountIds
	}
	return nil
}

type CMsgClientToGCSetBannedHeroes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BannedHeroIds []int32                `protobuf:"varint,1,rep,name=banned_hero_ids,json=bannedHeroIds" json:"banned_hero_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCSetBannedHeroes) Reset() {
	*x = CMsgClientToGCSetBannedHeroes{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[362]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetBannedHeroes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetBannedHeroes) ProtoMessage() {}

func (x *CMsgClientToGCSetBannedHeroes) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[362]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetBannedHeroes.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetBannedHeroes) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{362}
}

func (x *CMsgClientToGCSetBannedHeroes) GetBannedHeroIds() []int32 {
	if x != nil {
		return x.BannedHeroIds
	}
	return nil
}

type CMsgClientToGCUpdateComicBookStats struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	ComicId       *uint32                                           `protobuf:"varint,1,opt,name=comic_id,json=comicId" json:"comic_id,omitempty"`
	Stats         []*CMsgClientToGCUpdateComicBookStats_SingleStat  `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	LanguageStats *CMsgClientToGCUpdateComicBookStats_LanguageStats `protobuf:"bytes,3,opt,name=language_stats,json=languageStats" json:"language_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCUpdateComicBookStats) Reset() {
	*x = CMsgClientToGCUpdateComicBookStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[363]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUpdateComicBookStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdateComicBookStats) ProtoMessage() {}

func (x *CMsgClientToGCUpdateComicBookStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[363]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdateComicBookStats.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdateComicBookStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{363}
}

func (x *CMsgClientToGCUpdateComicBookStats) GetComicId() uint32 {
	if x != nil && x.ComicId != nil {
		return *x.ComicId
	}
	return 0
}

func (x *CMsgClientToGCUpdateComicBookStats) GetStats() []*CMsgClientToGCUpdateComicBookStats_SingleStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgClientToGCUpdateComicBookStats) GetLanguageStats() *CMsgClientToGCUpdateComicBookStats_LanguageStats {
	if x != nil {
		return x.LanguageStats
	}
	return nil
}

type CMsgDOTARequestMatchesResponse_Series struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Matches       []*CMsgDOTAMatch       `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
	SeriesId      *uint32                `protobuf:"varint,2,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType    *uint32                `protobuf:"varint,3,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTARequestMatchesResponse_Series) Reset() {
	*x = CMsgDOTARequestMatchesResponse_Series{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[364]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARequestMatchesResponse_Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestMatchesResponse_Series) ProtoMessage() {}

func (x *CMsgDOTARequestMatchesResponse_Series) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[364]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestMatchesResponse_Series.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestMatchesResponse_Series) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CMsgDOTARequestMatchesResponse_Series) GetMatches() []*CMsgDOTAMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *CMsgDOTARequestMatchesResponse_Series) GetSeriesId() uint32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CMsgDOTARequestMatchesResponse_Series) GetSeriesType() uint32 {
	if x != nil && x.SeriesType != nil {
		return *x.SeriesType
	}
	return 0
}

type CMsgDOTAProfileTickets_LeaguePass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeagueId      *uint32                `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	ItemDef       *uint32                `protobuf:"varint,2,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAProfileTickets_LeaguePass) Reset() {
	*x = CMsgDOTAProfileTickets_LeaguePass{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[365]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAProfileTickets_LeaguePass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAProfileTickets_LeaguePass) ProtoMessage() {}

func (x *CMsgDOTAProfileTickets_LeaguePass) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[365]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAProfileTickets_LeaguePass.ProtoReflect.Descriptor instead.
func (*CMsgDOTAProfileTickets_LeaguePass) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgDOTAProfileTickets_LeaguePass) GetLeagueId() uint32 {
	if x != nil && x.LeagueId != nil {
		return *x.LeagueId
	}
	return 0
}

func (x *CMsgDOTAProfileTickets_LeaguePass) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

type CMsgDOTAWelcome_CExtraMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents      []byte                 `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAWelcome_CExtraMsg) Reset() {
	*x = CMsgDOTAWelcome_CExtraMsg{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[366]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAWelcome_CExtraMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAWelcome_CExtraMsg) ProtoMessage() {}

func (x *CMsgDOTAWelcome_CExtraMsg) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[366]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAWelcome_CExtraMsg.ProtoReflect.Descriptor instead.
func (*CMsgDOTAWelcome_CExtraMsg) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CMsgDOTAWelcome_CExtraMsg) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTAWelcome_CExtraMsg) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type CMsgDOTAMatchVotes_PlayerVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Vote          *uint32                `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAMatchVotes_PlayerVote) Reset() {
	*x = CMsgDOTAMatchVotes_PlayerVote{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[367]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAMatchVotes_PlayerVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMatchVotes_PlayerVote) ProtoMessage() {}

func (x *CMsgDOTAMatchVotes_PlayerVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[367]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMatchVotes_PlayerVote.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMatchVotes_PlayerVote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgDOTAMatchVotes_PlayerVote) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAMatchVotes_PlayerVote) GetVote() uint32 {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return 0
}

type CMsgGCGetHeroStandingsResponse_Hero struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HeroId             *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Wins               *uint32                `protobuf:"varint,2,opt,name=wins" json:"wins,omitempty"`
	Losses             *uint32                `protobuf:"varint,3,opt,name=losses" json:"losses,omitempty"`
	WinStreak          *uint32                `protobuf:"varint,4,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BestWinStreak      *uint32                `protobuf:"varint,5,opt,name=best_win_streak,json=bestWinStreak" json:"best_win_streak,omitempty"`
	AvgKills           *float32               `protobuf:"fixed32,6,opt,name=avg_kills,json=avgKills" json:"avg_kills,omitempty"`
	AvgDeaths          *float32               `protobuf:"fixed32,7,opt,name=avg_deaths,json=avgDeaths" json:"avg_deaths,omitempty"`
	AvgAssists         *float32               `protobuf:"fixed32,8,opt,name=avg_assists,json=avgAssists" json:"avg_assists,omitempty"`
	AvgGpm             *float32               `protobuf:"fixed32,9,opt,name=avg_gpm,json=avgGpm" json:"avg_gpm,omitempty"`
	AvgXpm             *float32               `protobuf:"fixed32,10,opt,name=avg_xpm,json=avgXpm" json:"avg_xpm,omitempty"`
	BestKills          *uint32                `protobuf:"varint,11,opt,name=best_kills,json=bestKills" json:"best_kills,omitempty"`
	BestAssists        *uint32                `protobuf:"varint,12,opt,name=best_assists,json=bestAssists" json:"best_assists,omitempty"`
	BestGpm            *uint32                `protobuf:"varint,13,opt,name=best_gpm,json=bestGpm" json:"best_gpm,omitempty"`
	BestXpm            *uint32                `protobuf:"varint,14,opt,name=best_xpm,json=bestXpm" json:"best_xpm,omitempty"`
	Performance        *float32               `protobuf:"fixed32,15,opt,name=performance" json:"performance,omitempty"`
	WinsWithAlly       *uint32                `protobuf:"varint,16,opt,name=wins_with_ally,json=winsWithAlly" json:"wins_with_ally,omitempty"`
	LossesWithAlly     *uint32                `protobuf:"varint,17,opt,name=losses_with_ally,json=lossesWithAlly" json:"losses_with_ally,omitempty"`
	WinsAgainstEnemy   *uint32                `protobuf:"varint,18,opt,name=wins_against_enemy,json=winsAgainstEnemy" json:"wins_against_enemy,omitempty"`
	LossesAgainstEnemy *uint32                `protobuf:"varint,19,opt,name=losses_against_enemy,json=lossesAgainstEnemy" json:"losses_against_enemy,omitempty"`
	NetworthPeak       *uint32                `protobuf:"varint,20,opt,name=networth_peak,json=networthPeak" json:"networth_peak,omitempty"`
	LasthitPeak        *uint32                `protobuf:"varint,21,opt,name=lasthit_peak,json=lasthitPeak" json:"lasthit_peak,omitempty"`
	DenyPeak           *uint32                `protobuf:"varint,22,opt,name=deny_peak,json=denyPeak" json:"deny_peak,omitempty"`
	DamagePeak         *uint32                `protobuf:"varint,23,opt,name=damage_peak,json=damagePeak" json:"damage_peak,omitempty"`
	LongestGamePeak    *uint32                `protobuf:"varint,24,opt,name=longest_game_peak,json=longestGamePeak" json:"longest_game_peak,omitempty"`
	HealingPeak        *uint32                `protobuf:"varint,25,opt,name=healing_peak,json=healingPeak" json:"healing_peak,omitempty"`
	AvgLasthits        *float32               `protobuf:"fixed32,26,opt,name=avg_lasthits,json=avgLasthits" json:"avg_lasthits,omitempty"`
	AvgDenies          *float32               `protobuf:"fixed32,27,opt,name=avg_denies,json=avgDenies" json:"avg_denies,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) Reset() {
	*x = CMsgGCGetHeroStandingsResponse_Hero{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[368]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroStandingsResponse_Hero) ProtoMessage() {}

func (x *CMsgGCGetHeroStandingsResponse_Hero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[368]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroStandingsResponse_Hero.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroStandingsResponse_Hero) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{40, 0}
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetLosses() uint32 {
	if x != nil && x.Losses != nil {
		return *x.Losses
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetWinStreak() uint32 {
	if x != nil && x.WinStreak != nil {
		return *x.WinStreak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetBestWinStreak() uint32 {
	if x != nil && x.BestWinStreak != nil {
		return *x.BestWinStreak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgKills() float32 {
	if x != nil && x.AvgKills != nil {
		return *x.AvgKills
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgDeaths() float32 {
	if x != nil && x.AvgDeaths != nil {
		return *x.AvgDeaths
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgAssists() float32 {
	if x != nil && x.AvgAssists != nil {
		return *x.AvgAssists
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgGpm() float32 {
	if x != nil && x.AvgGpm != nil {
		return *x.AvgGpm
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgXpm() float32 {
	if x != nil && x.AvgXpm != nil {
		return *x.AvgXpm
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetBestKills() uint32 {
	if x != nil && x.BestKills != nil {
		return *x.BestKills
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetBestAssists() uint32 {
	if x != nil && x.BestAssists != nil {
		return *x.BestAssists
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetBestGpm() uint32 {
	if x != nil && x.BestGpm != nil {
		return *x.BestGpm
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetBestXpm() uint32 {
	if x != nil && x.BestXpm != nil {
		return *x.BestXpm
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetPerformance() float32 {
	if x != nil && x.Performance != nil {
		return *x.Performance
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetWinsWithAlly() uint32 {
	if x != nil && x.WinsWithAlly != nil {
		return *x.WinsWithAlly
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetLossesWithAlly() uint32 {
	if x != nil && x.LossesWithAlly != nil {
		return *x.LossesWithAlly
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetWinsAgainstEnemy() uint32 {
	if x != nil && x.WinsAgainstEnemy != nil {
		return *x.WinsAgainstEnemy
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetLossesAgainstEnemy() uint32 {
	if x != nil && x.LossesAgainstEnemy != nil {
		return *x.LossesAgainstEnemy
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetNetworthPeak() uint32 {
	if x != nil && x.NetworthPeak != nil {
		return *x.NetworthPeak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetLasthitPeak() uint32 {
	if x != nil && x.LasthitPeak != nil {
		return *x.LasthitPeak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetDenyPeak() uint32 {
	if x != nil && x.DenyPeak != nil {
		return *x.DenyPeak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetDamagePeak() uint32 {
	if x != nil && x.DamagePeak != nil {
		return *x.DamagePeak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetLongestGamePeak() uint32 {
	if x != nil && x.LongestGamePeak != nil {
		return *x.LongestGamePeak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetHealingPeak() uint32 {
	if x != nil && x.HealingPeak != nil {
		return *x.HealingPeak
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgLasthits() float32 {
	if x != nil && x.AvgLasthits != nil {
		return *x.AvgLasthits
	}
	return 0
}

func (x *CMsgGCGetHeroStandingsResponse_Hero) GetAvgDenies() float32 {
	if x != nil && x.AvgDenies != nil {
		return *x.AvgDenies
	}
	return 0
}

type CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer struct {
	state          protoimpl.MessageState              `protogen:"open.v1"`
	Time           *uint32                             `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	AllStats       *CMatchPlayerTimedStatAverages      `protobuf:"bytes,2,opt,name=all_stats,json=allStats" json:"all_stats,omitempty"`
	WinningStats   *CMatchPlayerTimedStatAverages      `protobuf:"bytes,3,opt,name=winning_stats,json=winningStats" json:"winning_stats,omitempty"`
	LosingStats    *CMatchPlayerTimedStatAverages      `protobuf:"bytes,4,opt,name=losing_stats,json=losingStats" json:"losing_stats,omitempty"`
	WinningStddevs *CMatchPlayerTimedStatStdDeviations `protobuf:"bytes,5,opt,name=winning_stddevs,json=winningStddevs" json:"winning_stddevs,omitempty"`
	LosingStddevs  *CMatchPlayerTimedStatStdDeviations `protobuf:"bytes,6,opt,name=losing_stddevs,json=losingStddevs" json:"losing_stddevs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) Reset() {
	*x = CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[369]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) ProtoMessage() {}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[369]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{43, 0}
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) GetAllStats() *CMatchPlayerTimedStatAverages {
	if x != nil {
		return x.AllStats
	}
	return nil
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) GetWinningStats() *CMatchPlayerTimedStatAverages {
	if x != nil {
		return x.WinningStats
	}
	return nil
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) GetLosingStats() *CMatchPlayerTimedStatAverages {
	if x != nil {
		return x.LosingStats
	}
	return nil
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) GetWinningStddevs() *CMatchPlayerTimedStatStdDeviations {
	if x != nil {
		return x.WinningStddevs
	}
	return nil
}

func (x *CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer) GetLosingStddevs() *CMatchPlayerTimedStatStdDeviations {
	if x != nil {
		return x.LosingStddevs
	}
	return nil
}

type CMsgGCGetHeroTimedStatsResponse_RankChunkedStats struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	RankChunk     *uint32                                                `protobuf:"varint,1,opt,name=rank_chunk,json=rankChunk" json:"rank_chunk,omitempty"`
	TimedStats    []*CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer `protobuf:"bytes,2,rep,name=timed_stats,json=timedStats" json:"timed_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) Reset() {
	*x = CMsgGCGetHeroTimedStatsResponse_RankChunkedStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[370]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) ProtoMessage() {}

func (x *CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[370]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCGetHeroTimedStatsResponse_RankChunkedStats.ProtoReflect.Descriptor instead.
func (*CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{43, 1}
}

func (x *CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) GetRankChunk() uint32 {
	if x != nil && x.RankChunk != nil {
		return *x.RankChunk
	}
	return 0
}

func (x *CMsgGCGetHeroTimedStatsResponse_RankChunkedStats) GetTimedStats() []*CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer {
	if x != nil {
		return x.TimedStats
	}
	return nil
}

type CMsgDOTAClaimEventActionData_GrantItemGiftData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	GiveToAccountId *uint32                `protobuf:"varint,1,opt,name=give_to_account_id,json=giveToAccountId" json:"give_to_account_id,omitempty"`
	GiftMessage     *string                `protobuf:"bytes,2,opt,name=gift_message,json=giftMessage" json:"gift_message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgDOTAClaimEventActionData_GrantItemGiftData) Reset() {
	*x = CMsgDOTAClaimEventActionData_GrantItemGiftData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[371]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAClaimEventActionData_GrantItemGiftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClaimEventActionData_GrantItemGiftData) ProtoMessage() {}

func (x *CMsgDOTAClaimEventActionData_GrantItemGiftData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[371]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClaimEventActionData_GrantItemGiftData.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClaimEventActionData_GrantItemGiftData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{53, 0}
}

func (x *CMsgDOTAClaimEventActionData_GrantItemGiftData) GetGiveToAccountId() uint32 {
	if x != nil && x.GiveToAccountId != nil {
		return *x.GiveToAccountId
	}
	return 0
}

func (x *CMsgDOTAClaimEventActionData_GrantItemGiftData) GetGiftMessage() string {
	if x != nil && x.GiftMessage != nil {
		return *x.GiftMessage
	}
	return ""
}

type CMsgDOTAGetEventPointsResponse_Action struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ActionId       *uint32                `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	TimesCompleted *uint32                `protobuf:"varint,2,opt,name=times_completed,json=timesCompleted,def=1" json:"times_completed,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgDOTAGetEventPointsResponse_Action fields.
const (
	Default_CMsgDOTAGetEventPointsResponse_Action_TimesCompleted = uint32(1)
)

func (x *CMsgDOTAGetEventPointsResponse_Action) Reset() {
	*x = CMsgDOTAGetEventPointsResponse_Action{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[372]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetEventPointsResponse_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetEventPointsResponse_Action) ProtoMessage() {}

func (x *CMsgDOTAGetEventPointsResponse_Action) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[372]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetEventPointsResponse_Action.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetEventPointsResponse_Action) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CMsgDOTAGetEventPointsResponse_Action) GetActionId() uint32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *CMsgDOTAGetEventPointsResponse_Action) GetTimesCompleted() uint32 {
	if x != nil && x.TimesCompleted != nil {
		return *x.TimesCompleted
	}
	return Default_CMsgDOTAGetEventPointsResponse_Action_TimesCompleted
}

type CMsgDOTAGetPlayerMatchHistoryResponse_Match struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MatchId                *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StartTime              *uint32                `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	HeroId                 *int32                 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Winner                 *bool                  `protobuf:"varint,4,opt,name=winner" json:"winner,omitempty"`
	GameMode               *uint32                `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	RankChange             *int32                 `protobuf:"varint,6,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	PreviousRank           *uint32                `protobuf:"varint,7,opt,name=previous_rank,json=previousRank" json:"previous_rank,omitempty"`
	LobbyType              *uint32                `protobuf:"varint,8,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	SoloRank               *bool                  `protobuf:"varint,9,opt,name=solo_rank,json=soloRank" json:"solo_rank,omitempty"`
	Abandon                *bool                  `protobuf:"varint,10,opt,name=abandon" json:"abandon,omitempty"`
	Duration               *uint32                `protobuf:"varint,11,opt,name=duration" json:"duration,omitempty"`
	Engine                 *uint32                `protobuf:"varint,12,opt,name=engine" json:"engine,omitempty"`
	ActivePlusSubscription *bool                  `protobuf:"varint,13,opt,name=active_plus_subscription,json=activePlusSubscription" json:"active_plus_subscription,omitempty"`
	SeasonalRank           *bool                  `protobuf:"varint,14,opt,name=seasonal_rank,json=seasonalRank" json:"seasonal_rank,omitempty"`
	TourneyId              *uint32                `protobuf:"varint,15,opt,name=tourney_id,json=tourneyId" json:"tourney_id,omitempty"`
	TourneyRound           *uint32                `protobuf:"varint,16,opt,name=tourney_round,json=tourneyRound" json:"tourney_round,omitempty"`
	TourneyTier            *uint32                `protobuf:"varint,17,opt,name=tourney_tier,json=tourneyTier" json:"tourney_tier,omitempty"`
	TourneyDivision        *uint32                `protobuf:"varint,18,opt,name=tourney_division,json=tourneyDivision" json:"tourney_division,omitempty"`
	TeamId                 *uint32                `protobuf:"varint,19,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName               *string                `protobuf:"bytes,20,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	UgcTeamUiLogo          *uint64                `protobuf:"varint,21,opt,name=ugc_team_ui_logo,json=ugcTeamUiLogo" json:"ugc_team_ui_logo,omitempty"`
	SelectedFacet          *uint32                `protobuf:"varint,22,opt,name=selected_facet,json=selectedFacet" json:"selected_facet,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) Reset() {
	*x = CMsgDOTAGetPlayerMatchHistoryResponse_Match{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[373]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAGetPlayerMatchHistoryResponse_Match) ProtoMessage() {}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[373]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAGetPlayerMatchHistoryResponse_Match.ProtoReflect.Descriptor instead.
func (*CMsgDOTAGetPlayerMatchHistoryResponse_Match) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{71, 0}
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetWinner() bool {
	if x != nil && x.Winner != nil {
		return *x.Winner
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetGameMode() uint32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetPreviousRank() uint32 {
	if x != nil && x.PreviousRank != nil {
		return *x.PreviousRank
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetLobbyType() uint32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetSoloRank() bool {
	if x != nil && x.SoloRank != nil {
		return *x.SoloRank
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetAbandon() bool {
	if x != nil && x.Abandon != nil {
		return *x.Abandon
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetEngine() uint32 {
	if x != nil && x.Engine != nil {
		return *x.Engine
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetActivePlusSubscription() bool {
	if x != nil && x.ActivePlusSubscription != nil {
		return *x.ActivePlusSubscription
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetSeasonalRank() bool {
	if x != nil && x.SeasonalRank != nil {
		return *x.SeasonalRank
	}
	return false
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetTourneyId() uint32 {
	if x != nil && x.TourneyId != nil {
		return *x.TourneyId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetTourneyRound() uint32 {
	if x != nil && x.TourneyRound != nil {
		return *x.TourneyRound
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetTourneyTier() uint32 {
	if x != nil && x.TourneyTier != nil {
		return *x.TourneyTier
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetTourneyDivision() uint32 {
	if x != nil && x.TourneyDivision != nil {
		return *x.TourneyDivision
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetTeamId() uint32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetTeamName() string {
	if x != nil && x.TeamName != nil {
		return *x.TeamName
	}
	return ""
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetUgcTeamUiLogo() uint64 {
	if x != nil && x.UgcTeamUiLogo != nil {
		return *x.UgcTeamUiLogo
	}
	return 0
}

func (x *CMsgDOTAGetPlayerMatchHistoryResponse_Match) GetSelectedFacet() uint32 {
	if x != nil && x.SelectedFacet != nil {
		return *x.SelectedFacet
	}
	return 0
}

type CMsgClientToGCGetTrophyListResponse_Trophy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrophyId      *uint32                `protobuf:"varint,1,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	TrophyScore   *uint32                `protobuf:"varint,2,opt,name=trophy_score,json=trophyScore" json:"trophy_score,omitempty"`
	LastUpdated   *uint32                `protobuf:"varint,3,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetTrophyListResponse_Trophy) Reset() {
	*x = CMsgClientToGCGetTrophyListResponse_Trophy{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[374]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetTrophyListResponse_Trophy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetTrophyListResponse_Trophy) ProtoMessage() {}

func (x *CMsgClientToGCGetTrophyListResponse_Trophy) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[374]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetTrophyListResponse_Trophy.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetTrophyListResponse_Trophy) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{88, 0}
}

func (x *CMsgClientToGCGetTrophyListResponse_Trophy) GetTrophyId() uint32 {
	if x != nil && x.TrophyId != nil {
		return *x.TrophyId
	}
	return 0
}

func (x *CMsgClientToGCGetTrophyListResponse_Trophy) GetTrophyScore() uint32 {
	if x != nil && x.TrophyScore != nil {
		return *x.TrophyScore
	}
	return 0
}

func (x *CMsgClientToGCGetTrophyListResponse_Trophy) GetLastUpdated() uint32 {
	if x != nil && x.LastUpdated != nil {
		return *x.LastUpdated
	}
	return 0
}

type CMsgClientToGCSetProfileCardSlots_CardSlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SlotId        *uint32                `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	SlotType      *EProfileCardSlotType  `protobuf:"varint,2,opt,name=slot_type,json=slotType,enum=protocol.EProfileCardSlotType,def=0" json:"slot_type,omitempty"`
	SlotValue     *uint64                `protobuf:"varint,3,opt,name=slot_value,json=slotValue" json:"slot_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCSetProfileCardSlots_CardSlot fields.
const (
	Default_CMsgClientToGCSetProfileCardSlots_CardSlot_SlotType = EProfileCardSlotType_k_EProfileCardSlotType_Empty
)

func (x *CMsgClientToGCSetProfileCardSlots_CardSlot) Reset() {
	*x = CMsgClientToGCSetProfileCardSlots_CardSlot{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[375]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSetProfileCardSlots_CardSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSetProfileCardSlots_CardSlot) ProtoMessage() {}

func (x *CMsgClientToGCSetProfileCardSlots_CardSlot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[375]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSetProfileCardSlots_CardSlot.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSetProfileCardSlots_CardSlot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{94, 0}
}

func (x *CMsgClientToGCSetProfileCardSlots_CardSlot) GetSlotId() uint32 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *CMsgClientToGCSetProfileCardSlots_CardSlot) GetSlotType() EProfileCardSlotType {
	if x != nil && x.SlotType != nil {
		return *x.SlotType
	}
	return Default_CMsgClientToGCSetProfileCardSlots_CardSlot_SlotType
}

func (x *CMsgClientToGCSetProfileCardSlots_CardSlot) GetSlotValue() uint64 {
	if x != nil && x.SlotValue != nil {
		return *x.SlotValue
	}
	return 0
}

type CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomGameId  *uint64                `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	AccountIds    []uint32               `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) Reset() {
	*x = CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[376]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) ProtoMessage() {}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[376]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{101, 0}
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) GetCustomGameId() uint64 {
	if x != nil && x.CustomGameId != nil {
		return *x.CustomGameId
	}
	return 0
}

func (x *CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

type CMsgDOTAPartyRichPresence_Member struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Coach         *bool                  `protobuf:"varint,2,opt,name=coach" json:"coach,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAPartyRichPresence_Member) Reset() {
	*x = CMsgDOTAPartyRichPresence_Member{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[377]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPartyRichPresence_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPartyRichPresence_Member) ProtoMessage() {}

func (x *CMsgDOTAPartyRichPresence_Member) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[377]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPartyRichPresence_Member.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPartyRichPresence_Member) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{108, 0}
}

func (x *CMsgDOTAPartyRichPresence_Member) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence_Member) GetCoach() bool {
	if x != nil && x.Coach != nil {
		return *x.Coach
	}
	return false
}

type CMsgDOTAPartyRichPresence_WeekendTourney struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Division      *uint32                           `protobuf:"varint,1,opt,name=division" json:"division,omitempty"`
	SkillLevel    *uint32                           `protobuf:"varint,2,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	Round         *uint32                           `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	TournamentId  *uint32                           `protobuf:"varint,4,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	StateSeqNum   *uint32                           `protobuf:"varint,5,opt,name=state_seq_num,json=stateSeqNum" json:"state_seq_num,omitempty"`
	Event         *EWeekendTourneyRichPresenceEvent `protobuf:"varint,6,opt,name=event,enum=protocol.EWeekendTourneyRichPresenceEvent,def=0" json:"event,omitempty"`
	EventRound    *uint32                           `protobuf:"varint,7,opt,name=event_round,json=eventRound" json:"event_round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAPartyRichPresence_WeekendTourney fields.
const (
	Default_CMsgDOTAPartyRichPresence_WeekendTourney_Event = EWeekendTourneyRichPresenceEvent_k_EWeekendTourneyRichPresenceEvent_None
)

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) Reset() {
	*x = CMsgDOTAPartyRichPresence_WeekendTourney{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[378]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAPartyRichPresence_WeekendTourney) ProtoMessage() {}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[378]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAPartyRichPresence_WeekendTourney.ProtoReflect.Descriptor instead.
func (*CMsgDOTAPartyRichPresence_WeekendTourney) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{108, 1}
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetDivision() uint32 {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetSkillLevel() uint32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetRound() uint32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetTournamentId() uint32 {
	if x != nil && x.TournamentId != nil {
		return *x.TournamentId
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetStateSeqNum() uint32 {
	if x != nil && x.StateSeqNum != nil {
		return *x.StateSeqNum
	}
	return 0
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetEvent() EWeekendTourneyRichPresenceEvent {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return Default_CMsgDOTAPartyRichPresence_WeekendTourney_Event
}

func (x *CMsgDOTAPartyRichPresence_WeekendTourney) GetEventRound() uint32 {
	if x != nil && x.EventRound != nil {
		return *x.EventRound
	}
	return 0
}

type CMsgClientToGCGetQuestProgressResponse_Challenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   *uint32                `protobuf:"varint,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	TimeCompleted *uint32                `protobuf:"varint,2,opt,name=time_completed,json=timeCompleted" json:"time_completed,omitempty"`
	Attempts      *uint32                `protobuf:"varint,3,opt,name=attempts" json:"attempts,omitempty"`
	HeroId        *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TemplateId    *uint32                `protobuf:"varint,5,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	QuestRank     *uint32                `protobuf:"varint,6,opt,name=quest_rank,json=questRank" json:"quest_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) Reset() {
	*x = CMsgClientToGCGetQuestProgressResponse_Challenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[379]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetQuestProgressResponse_Challenge) ProtoMessage() {}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[379]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetQuestProgressResponse_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetQuestProgressResponse_Challenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{115, 0}
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) GetTimeCompleted() uint32 {
	if x != nil && x.TimeCompleted != nil {
		return *x.TimeCompleted
	}
	return 0
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) GetAttempts() uint32 {
	if x != nil && x.Attempts != nil {
		return *x.Attempts
	}
	return 0
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) GetTemplateId() uint32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *CMsgClientToGCGetQuestProgressResponse_Challenge) GetQuestRank() uint32 {
	if x != nil && x.QuestRank != nil {
		return *x.QuestRank
	}
	return 0
}

type CMsgClientToGCGetQuestProgressResponse_Quest struct {
	state               protoimpl.MessageState                              `protogen:"open.v1"`
	QuestId             *uint32                                             `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id,omitempty"`
	CompletedChallenges []*CMsgClientToGCGetQuestProgressResponse_Challenge `protobuf:"bytes,2,rep,name=completed_challenges,json=completedChallenges" json:"completed_challenges,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgClientToGCGetQuestProgressResponse_Quest) Reset() {
	*x = CMsgClientToGCGetQuestProgressResponse_Quest{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[380]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetQuestProgressResponse_Quest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetQuestProgressResponse_Quest) ProtoMessage() {}

func (x *CMsgClientToGCGetQuestProgressResponse_Quest) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[380]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetQuestProgressResponse_Quest.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetQuestProgressResponse_Quest) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{115, 1}
}

func (x *CMsgClientToGCGetQuestProgressResponse_Quest) GetQuestId() uint32 {
	if x != nil && x.QuestId != nil {
		return *x.QuestId
	}
	return 0
}

func (x *CMsgClientToGCGetQuestProgressResponse_Quest) GetCompletedChallenges() []*CMsgClientToGCGetQuestProgressResponse_Challenge {
	if x != nil {
		return x.CompletedChallenges
	}
	return nil
}

type CMsgEventGoals_EventGoal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *EEvent                `protobuf:"varint,1,opt,name=event_id,json=eventId,enum=protocol.EEvent,def=0" json:"event_id,omitempty"`
	GoalId        *uint32                `protobuf:"varint,2,opt,name=goal_id,json=goalId" json:"goal_id,omitempty"`
	Value         *uint64                `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgEventGoals_EventGoal fields.
const (
	Default_CMsgEventGoals_EventGoal_EventId = EEvent_EVENT_ID_NONE
)

func (x *CMsgEventGoals_EventGoal) Reset() {
	*x = CMsgEventGoals_EventGoal{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[381]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEventGoals_EventGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventGoals_EventGoal) ProtoMessage() {}

func (x *CMsgEventGoals_EventGoal) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[381]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventGoals_EventGoal.ProtoReflect.Descriptor instead.
func (*CMsgEventGoals_EventGoal) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{126, 0}
}

func (x *CMsgEventGoals_EventGoal) GetEventId() EEvent {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return Default_CMsgEventGoals_EventGoal_EventId
}

func (x *CMsgEventGoals_EventGoal) GetGoalId() uint32 {
	if x != nil && x.GoalId != nil {
		return *x.GoalId
	}
	return 0
}

func (x *CMsgEventGoals_EventGoal) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CMsgPredictionRankings_PredictionLine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnswerId      *uint32                `protobuf:"varint,1,opt,name=answer_id,json=answerId" json:"answer_id,omitempty"`
	AnswerName    *string                `protobuf:"bytes,2,opt,name=answer_name,json=answerName" json:"answer_name,omitempty"`
	AnswerLogo    *uint64                `protobuf:"varint,3,opt,name=answer_logo,json=answerLogo" json:"answer_logo,omitempty"`
	AnswerValue   *float32               `protobuf:"fixed32,4,opt,name=answer_value,json=answerValue" json:"answer_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgPredictionRankings_PredictionLine) Reset() {
	*x = CMsgPredictionRankings_PredictionLine{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[382]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPredictionRankings_PredictionLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPredictionRankings_PredictionLine) ProtoMessage() {}

func (x *CMsgPredictionRankings_PredictionLine) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[382]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPredictionRankings_PredictionLine.ProtoReflect.Descriptor instead.
func (*CMsgPredictionRankings_PredictionLine) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{128, 0}
}

func (x *CMsgPredictionRankings_PredictionLine) GetAnswerId() uint32 {
	if x != nil && x.AnswerId != nil {
		return *x.AnswerId
	}
	return 0
}

func (x *CMsgPredictionRankings_PredictionLine) GetAnswerName() string {
	if x != nil && x.AnswerName != nil {
		return *x.AnswerName
	}
	return ""
}

func (x *CMsgPredictionRankings_PredictionLine) GetAnswerLogo() uint64 {
	if x != nil && x.AnswerLogo != nil {
		return *x.AnswerLogo
	}
	return 0
}

func (x *CMsgPredictionRankings_PredictionLine) GetAnswerValue() float32 {
	if x != nil && x.AnswerValue != nil {
		return *x.AnswerValue
	}
	return 0
}

type CMsgPredictionRankings_Prediction struct {
	state           protoimpl.MessageState                   `protogen:"open.v1"`
	SelectionId     *uint32                                  `protobuf:"varint,1,opt,name=selection_id,json=selectionId" json:"selection_id,omitempty"`
	PredictionLines []*CMsgPredictionRankings_PredictionLine `protobuf:"bytes,2,rep,name=prediction_lines,json=predictionLines" json:"prediction_lines,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgPredictionRankings_Prediction) Reset() {
	*x = CMsgPredictionRankings_Prediction{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[383]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPredictionRankings_Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPredictionRankings_Prediction) ProtoMessage() {}

func (x *CMsgPredictionRankings_Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[383]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPredictionRankings_Prediction.ProtoReflect.Descriptor instead.
func (*CMsgPredictionRankings_Prediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{128, 1}
}

func (x *CMsgPredictionRankings_Prediction) GetSelectionId() uint32 {
	if x != nil && x.SelectionId != nil {
		return *x.SelectionId
	}
	return 0
}

func (x *CMsgPredictionRankings_Prediction) GetPredictionLines() []*CMsgPredictionRankings_PredictionLine {
	if x != nil {
		return x.PredictionLines
	}
	return nil
}

type CMsgPredictionResults_ResultBreakdown struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AnswerSelection *uint32                `protobuf:"varint,2,opt,name=answer_selection,json=answerSelection" json:"answer_selection,omitempty"`
	AnswerValue     *float32               `protobuf:"fixed32,3,opt,name=answer_value,json=answerValue" json:"answer_value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgPredictionResults_ResultBreakdown) Reset() {
	*x = CMsgPredictionResults_ResultBreakdown{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[384]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPredictionResults_ResultBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPredictionResults_ResultBreakdown) ProtoMessage() {}

func (x *CMsgPredictionResults_ResultBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[384]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPredictionResults_ResultBreakdown.ProtoReflect.Descriptor instead.
func (*CMsgPredictionResults_ResultBreakdown) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{129, 0}
}

func (x *CMsgPredictionResults_ResultBreakdown) GetAnswerSelection() uint32 {
	if x != nil && x.AnswerSelection != nil {
		return *x.AnswerSelection
	}
	return 0
}

func (x *CMsgPredictionResults_ResultBreakdown) GetAnswerValue() float32 {
	if x != nil && x.AnswerValue != nil {
		return *x.AnswerValue
	}
	return 0
}

type CMsgPredictionResults_Result struct {
	state           protoimpl.MessageState                   `protogen:"open.v1"`
	SelectionId     *uint32                                  `protobuf:"varint,1,opt,name=selection_id,json=selectionId" json:"selection_id,omitempty"`
	ResultBreakdown []*CMsgPredictionResults_ResultBreakdown `protobuf:"bytes,2,rep,name=result_breakdown,json=resultBreakdown" json:"result_breakdown,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgPredictionResults_Result) Reset() {
	*x = CMsgPredictionResults_Result{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[385]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgPredictionResults_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgPredictionResults_Result) ProtoMessage() {}

func (x *CMsgPredictionResults_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[385]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgPredictionResults_Result.ProtoReflect.Descriptor instead.
func (*CMsgPredictionResults_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{129, 1}
}

func (x *CMsgPredictionResults_Result) GetSelectionId() uint32 {
	if x != nil && x.SelectionId != nil {
		return *x.SelectionId
	}
	return 0
}

func (x *CMsgPredictionResults_Result) GetResultBreakdown() []*CMsgPredictionResults_ResultBreakdown {
	if x != nil {
		return x.ResultBreakdown
	}
	return nil
}

type CMsgClientToGCTeammateStatsResponse_TeammateStat struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AccountId               *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Games                   *uint32                `protobuf:"varint,2,opt,name=games" json:"games,omitempty"`
	Wins                    *uint32                `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	MostRecentGameTimestamp *uint32                `protobuf:"varint,4,opt,name=most_recent_game_timestamp,json=mostRecentGameTimestamp" json:"most_recent_game_timestamp,omitempty"`
	MostRecentGameMatchId   *uint64                `protobuf:"varint,5,opt,name=most_recent_game_match_id,json=mostRecentGameMatchId" json:"most_recent_game_match_id,omitempty"`
	Performance             *float32               `protobuf:"fixed32,100,opt,name=performance" json:"performance,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) Reset() {
	*x = CMsgClientToGCTeammateStatsResponse_TeammateStat{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[386]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCTeammateStatsResponse_TeammateStat) ProtoMessage() {}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[386]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCTeammateStatsResponse_TeammateStat.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCTeammateStatsResponse_TeammateStat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{137, 0}
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) GetGames() uint32 {
	if x != nil && x.Games != nil {
		return *x.Games
	}
	return 0
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) GetMostRecentGameTimestamp() uint32 {
	if x != nil && x.MostRecentGameTimestamp != nil {
		return *x.MostRecentGameTimestamp
	}
	return 0
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) GetMostRecentGameMatchId() uint64 {
	if x != nil && x.MostRecentGameMatchId != nil {
		return *x.MostRecentGameMatchId
	}
	return 0
}

func (x *CMsgClientToGCTeammateStatsResponse_TeammateStat) GetPerformance() float32 {
	if x != nil && x.Performance != nil {
		return *x.Performance
	}
	return 0
}

type CMsgClientToGCRequestEventPointLogResponseV2_LogEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *uint32                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	AuditAction   *uint32                `protobuf:"varint,2,opt,name=audit_action,json=auditAction" json:"audit_action,omitempty"`
	EventPoints   *int32                 `protobuf:"varint,3,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	AuditData     *uint64                `protobuf:"varint,4,opt,name=audit_data,json=auditData" json:"audit_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) Reset() {
	*x = CMsgClientToGCRequestEventPointLogResponseV2_LogEntry{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[387]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) ProtoMessage() {}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[387]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestEventPointLogResponseV2_LogEntry.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{143, 0}
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) GetAuditAction() uint32 {
	if x != nil && x.AuditAction != nil {
		return *x.AuditAction
	}
	return 0
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) GetEventPoints() int32 {
	if x != nil && x.EventPoints != nil {
		return *x.EventPoints
	}
	return 0
}

func (x *CMsgClientToGCRequestEventPointLogResponseV2_LogEntry) GetAuditData() uint64 {
	if x != nil && x.AuditData != nil {
		return *x.AuditData
	}
	return 0
}

type CMsgGCToClientQuestProgressUpdated_Challenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChallengeId   *uint32                `protobuf:"varint,1,opt,name=challenge_id,json=challengeId" json:"challenge_id,omitempty"`
	TimeCompleted *uint32                `protobuf:"varint,2,opt,name=time_completed,json=timeCompleted" json:"time_completed,omitempty"`
	Attempts      *uint32                `protobuf:"varint,3,opt,name=attempts" json:"attempts,omitempty"`
	HeroId        *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	TemplateId    *uint32                `protobuf:"varint,5,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
	QuestRank     *uint32                `protobuf:"varint,6,opt,name=quest_rank,json=questRank" json:"quest_rank,omitempty"`
	MaxQuestRank  *uint32                `protobuf:"varint,7,opt,name=max_quest_rank,json=maxQuestRank" json:"max_quest_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) Reset() {
	*x = CMsgGCToClientQuestProgressUpdated_Challenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[388]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientQuestProgressUpdated_Challenge) ProtoMessage() {}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[388]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientQuestProgressUpdated_Challenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientQuestProgressUpdated_Challenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{147, 0}
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetChallengeId() uint32 {
	if x != nil && x.ChallengeId != nil {
		return *x.ChallengeId
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetTimeCompleted() uint32 {
	if x != nil && x.TimeCompleted != nil {
		return *x.TimeCompleted
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetAttempts() uint32 {
	if x != nil && x.Attempts != nil {
		return *x.Attempts
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetTemplateId() uint32 {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetQuestRank() uint32 {
	if x != nil && x.QuestRank != nil {
		return *x.QuestRank
	}
	return 0
}

func (x *CMsgGCToClientQuestProgressUpdated_Challenge) GetMaxQuestRank() uint32 {
	if x != nil && x.MaxQuestRank != nil {
		return *x.MaxQuestRank
	}
	return 0
}

type CMsgClientToGCSelectCompendiumInGamePrediction_Prediction struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	PredictionId    *uint32                `protobuf:"varint,1,opt,name=prediction_id,json=predictionId" json:"prediction_id,omitempty"`
	PredictionValue *uint32                `protobuf:"varint,2,opt,name=prediction_value,json=predictionValue" json:"prediction_value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) Reset() {
	*x = CMsgClientToGCSelectCompendiumInGamePrediction_Prediction{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[389]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) ProtoMessage() {}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[389]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCSelectCompendiumInGamePrediction_Prediction.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{150, 0}
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) GetPredictionId() uint32 {
	if x != nil && x.PredictionId != nil {
		return *x.PredictionId
	}
	return 0
}

func (x *CMsgClientToGCSelectCompendiumInGamePrediction_Prediction) GetPredictionValue() uint32 {
	if x != nil && x.PredictionValue != nil {
		return *x.PredictionValue
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_Questlines struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Onestar       *uint32                `protobuf:"varint,2,opt,name=onestar" json:"onestar,omitempty"`
	Twostar       *uint32                `protobuf:"varint,3,opt,name=twostar" json:"twostar,omitempty"`
	Threestar     *uint32                `protobuf:"varint,4,opt,name=threestar" json:"threestar,omitempty"`
	Total         *uint32                `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_Questlines{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[390]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_Questlines) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[390]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_Questlines.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_Questlines) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 0}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) GetOnestar() uint32 {
	if x != nil && x.Onestar != nil {
		return *x.Onestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) GetTwostar() uint32 {
	if x != nil && x.Twostar != nil {
		return *x.Twostar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) GetThreestar() uint32 {
	if x != nil && x.Threestar != nil {
		return *x.Threestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Questlines) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_Wagering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalWagered  *uint32                `protobuf:"varint,1,opt,name=total_wagered,json=totalWagered" json:"total_wagered,omitempty"`
	TotalWon      *uint32                `protobuf:"varint,2,opt,name=total_won,json=totalWon" json:"total_won,omitempty"`
	AverageWon    *uint32                `protobuf:"varint,3,opt,name=average_won,json=averageWon" json:"average_won,omitempty"`
	SuccessRate   *uint32                `protobuf:"varint,4,opt,name=success_rate,json=successRate" json:"success_rate,omitempty"`
	TotalTips     *uint32                `protobuf:"varint,5,opt,name=total_tips,json=totalTips" json:"total_tips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_Wagering{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[391]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_Wagering) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[391]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_Wagering.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_Wagering) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 1}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) GetTotalWagered() uint32 {
	if x != nil && x.TotalWagered != nil {
		return *x.TotalWagered
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) GetTotalWon() uint32 {
	if x != nil && x.TotalWon != nil {
		return *x.TotalWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) GetAverageWon() uint32 {
	if x != nil && x.AverageWon != nil {
		return *x.AverageWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) GetSuccessRate() uint32 {
	if x != nil && x.SuccessRate != nil {
		return *x.SuccessRate
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Wagering) GetTotalTips() uint32 {
	if x != nil && x.TotalTips != nil {
		return *x.TotalTips
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_Achievements struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Completed     *uint32                `protobuf:"varint,1,opt,name=completed" json:"completed,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Achievements) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_Achievements{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[392]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Achievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_Achievements) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_Achievements) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[392]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_Achievements.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_Achievements) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 2}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Achievements) GetCompleted() uint32 {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Achievements) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Achievements) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_BattleCup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wins          *uint32                `protobuf:"varint,1,opt,name=wins" json:"wins,omitempty"`
	Score         *uint32                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_BattleCup) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_BattleCup{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[393]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_BattleCup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_BattleCup) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_BattleCup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[393]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_BattleCup.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_BattleCup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 3}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_BattleCup) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_BattleCup) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_Predictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Predictions) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_Predictions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[394]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_Predictions) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[394]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_Predictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 4}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Predictions) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Predictions) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Predictions) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_Bracket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Points        *uint32                `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Bracket) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_Bracket{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[395]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_Bracket) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[395]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_Bracket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_Bracket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 5}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Bracket) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_Bracket) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_PlayerCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Quality       *uint32                `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_PlayerCard) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_PlayerCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[396]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_PlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_PlayerCard) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_PlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[396]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_PlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_PlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 6}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_PlayerCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_PlayerCard) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalScore    *float32               `protobuf:"fixed32,1,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	Percentile    *float32               `protobuf:"fixed32,2,opt,name=percentile" json:"percentile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) Reset() {
	*x = CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[397]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[397]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{160, 7}
}

func (x *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_Questlines struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Onestar       *uint32                `protobuf:"varint,2,opt,name=onestar" json:"onestar,omitempty"`
	Twostar       *uint32                `protobuf:"varint,3,opt,name=twostar" json:"twostar,omitempty"`
	Threestar     *uint32                `protobuf:"varint,4,opt,name=threestar" json:"threestar,omitempty"`
	Total         *uint32                `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_Questlines{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[398]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_Questlines) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[398]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_Questlines.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_Questlines) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 0}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) GetOnestar() uint32 {
	if x != nil && x.Onestar != nil {
		return *x.Onestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) GetTwostar() uint32 {
	if x != nil && x.Twostar != nil {
		return *x.Twostar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) GetThreestar() uint32 {
	if x != nil && x.Threestar != nil {
		return *x.Threestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Questlines) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_Wagering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalWagered  *uint32                `protobuf:"varint,1,opt,name=total_wagered,json=totalWagered" json:"total_wagered,omitempty"`
	TotalWon      *uint32                `protobuf:"varint,2,opt,name=total_won,json=totalWon" json:"total_won,omitempty"`
	AverageWon    *uint32                `protobuf:"varint,3,opt,name=average_won,json=averageWon" json:"average_won,omitempty"`
	SuccessRate   *uint32                `protobuf:"varint,4,opt,name=success_rate,json=successRate" json:"success_rate,omitempty"`
	TotalTips     *uint32                `protobuf:"varint,5,opt,name=total_tips,json=totalTips" json:"total_tips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_Wagering{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[399]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_Wagering) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[399]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_Wagering.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_Wagering) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 1}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) GetTotalWagered() uint32 {
	if x != nil && x.TotalWagered != nil {
		return *x.TotalWagered
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) GetTotalWon() uint32 {
	if x != nil && x.TotalWon != nil {
		return *x.TotalWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) GetAverageWon() uint32 {
	if x != nil && x.AverageWon != nil {
		return *x.AverageWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) GetSuccessRate() uint32 {
	if x != nil && x.SuccessRate != nil {
		return *x.SuccessRate
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Wagering) GetTotalTips() uint32 {
	if x != nil && x.TotalTips != nil {
		return *x.TotalTips
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_Achievements struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Completed     *uint32                `protobuf:"varint,1,opt,name=completed" json:"completed,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Achievements) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_Achievements{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[400]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Achievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_Achievements) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Achievements) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[400]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_Achievements.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_Achievements) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 2}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Achievements) GetCompleted() uint32 {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Achievements) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Achievements) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_BattleCup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wins          *uint32                `protobuf:"varint,1,opt,name=wins" json:"wins,omitempty"`
	Score         *uint32                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_BattleCup{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[401]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[401]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_BattleCup.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 3}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_BattleCup) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_Predictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Predictions) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_Predictions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[402]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_Predictions) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[402]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_Predictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 4}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Predictions) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Predictions) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Predictions) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_Bracket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Points        *uint32                `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Bracket) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_Bracket{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[403]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_Bracket) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[403]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_Bracket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_Bracket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 5}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Bracket) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_Bracket) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Quality       *uint32                `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[404]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[404]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 6}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalScore    *float32               `protobuf:"fixed32,1,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	Percentile    *float32               `protobuf:"fixed32,2,opt,name=percentile" json:"percentile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[405]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[405]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{161, 7}
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_Questlines struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Onestar       *uint32                `protobuf:"varint,2,opt,name=onestar" json:"onestar,omitempty"`
	Twostar       *uint32                `protobuf:"varint,3,opt,name=twostar" json:"twostar,omitempty"`
	Threestar     *uint32                `protobuf:"varint,4,opt,name=threestar" json:"threestar,omitempty"`
	Total         *uint32                `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_Questlines{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[406]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_Questlines) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[406]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_Questlines.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_Questlines) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 0}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) GetOnestar() uint32 {
	if x != nil && x.Onestar != nil {
		return *x.Onestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) GetTwostar() uint32 {
	if x != nil && x.Twostar != nil {
		return *x.Twostar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) GetThreestar() uint32 {
	if x != nil && x.Threestar != nil {
		return *x.Threestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Questlines) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_Wagering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalWagered  *uint32                `protobuf:"varint,1,opt,name=total_wagered,json=totalWagered" json:"total_wagered,omitempty"`
	TotalWon      *uint32                `protobuf:"varint,2,opt,name=total_won,json=totalWon" json:"total_won,omitempty"`
	AverageWon    *uint32                `protobuf:"varint,3,opt,name=average_won,json=averageWon" json:"average_won,omitempty"`
	SuccessRate   *uint32                `protobuf:"varint,4,opt,name=success_rate,json=successRate" json:"success_rate,omitempty"`
	TotalTips     *uint32                `protobuf:"varint,5,opt,name=total_tips,json=totalTips" json:"total_tips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_Wagering{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[407]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_Wagering) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[407]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_Wagering.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_Wagering) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 1}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) GetTotalWagered() uint32 {
	if x != nil && x.TotalWagered != nil {
		return *x.TotalWagered
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) GetTotalWon() uint32 {
	if x != nil && x.TotalWon != nil {
		return *x.TotalWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) GetAverageWon() uint32 {
	if x != nil && x.AverageWon != nil {
		return *x.AverageWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) GetSuccessRate() uint32 {
	if x != nil && x.SuccessRate != nil {
		return *x.SuccessRate
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Wagering) GetTotalTips() uint32 {
	if x != nil && x.TotalTips != nil {
		return *x.TotalTips
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_Achievements struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Completed     *uint32                `protobuf:"varint,1,opt,name=completed" json:"completed,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Achievements) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_Achievements{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[408]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Achievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_Achievements) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Achievements) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[408]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_Achievements.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_Achievements) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 2}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Achievements) GetCompleted() uint32 {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Achievements) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Achievements) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_BattleCup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wins          *uint32                `protobuf:"varint,1,opt,name=wins" json:"wins,omitempty"`
	Score         *uint32                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_BattleCup{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[409]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[409]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_BattleCup.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 3}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_BattleCup) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_Predictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Predictions) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_Predictions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[410]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_Predictions) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[410]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_Predictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 4}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Predictions) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Predictions) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Predictions) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_Bracket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Points        *uint32                `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Bracket) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_Bracket{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[411]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_Bracket) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[411]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_Bracket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_Bracket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 5}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Bracket) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_Bracket) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Quality       *uint32                `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[412]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[412]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 6}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalScore    *float32               `protobuf:"fixed32,1,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	Percentile    *float32               `protobuf:"fixed32,2,opt,name=percentile" json:"percentile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) Reset() {
	*x = CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[413]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[413]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{162, 7}
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_Questlines struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Onestar       *uint32                `protobuf:"varint,2,opt,name=onestar" json:"onestar,omitempty"`
	Twostar       *uint32                `protobuf:"varint,3,opt,name=twostar" json:"twostar,omitempty"`
	Threestar     *uint32                `protobuf:"varint,4,opt,name=threestar" json:"threestar,omitempty"`
	Total         *uint32                `protobuf:"varint,5,opt,name=total" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_Questlines{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[414]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_Questlines) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[414]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_Questlines.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_Questlines) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 0}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) GetOnestar() uint32 {
	if x != nil && x.Onestar != nil {
		return *x.Onestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) GetTwostar() uint32 {
	if x != nil && x.Twostar != nil {
		return *x.Twostar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) GetThreestar() uint32 {
	if x != nil && x.Threestar != nil {
		return *x.Threestar
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Questlines) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_Wagering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalWagered  *uint32                `protobuf:"varint,1,opt,name=total_wagered,json=totalWagered" json:"total_wagered,omitempty"`
	TotalWon      *uint32                `protobuf:"varint,2,opt,name=total_won,json=totalWon" json:"total_won,omitempty"`
	AverageWon    *uint32                `protobuf:"varint,3,opt,name=average_won,json=averageWon" json:"average_won,omitempty"`
	SuccessRate   *uint32                `protobuf:"varint,4,opt,name=success_rate,json=successRate" json:"success_rate,omitempty"`
	TotalTips     *uint32                `protobuf:"varint,5,opt,name=total_tips,json=totalTips" json:"total_tips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_Wagering{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[415]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_Wagering) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[415]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_Wagering.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_Wagering) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 1}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) GetTotalWagered() uint32 {
	if x != nil && x.TotalWagered != nil {
		return *x.TotalWagered
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) GetTotalWon() uint32 {
	if x != nil && x.TotalWon != nil {
		return *x.TotalWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) GetAverageWon() uint32 {
	if x != nil && x.AverageWon != nil {
		return *x.AverageWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) GetSuccessRate() uint32 {
	if x != nil && x.SuccessRate != nil {
		return *x.SuccessRate
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Wagering) GetTotalTips() uint32 {
	if x != nil && x.TotalTips != nil {
		return *x.TotalTips
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_Achievements struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Completed     *uint32                `protobuf:"varint,1,opt,name=completed" json:"completed,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Achievements) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_Achievements{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[416]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Achievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_Achievements) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_Achievements) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[416]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_Achievements.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_Achievements) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 2}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Achievements) GetCompleted() uint32 {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Achievements) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Achievements) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_BattleCup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wins          *uint32                `protobuf:"varint,1,opt,name=wins" json:"wins,omitempty"`
	Score         *uint32                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_BattleCup) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_BattleCup{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[417]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_BattleCup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_BattleCup) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_BattleCup) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[417]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_BattleCup.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_BattleCup) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 3}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_BattleCup) GetWins() uint32 {
	if x != nil && x.Wins != nil {
		return *x.Wins
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_BattleCup) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_Predictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Predictions) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_Predictions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[418]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_Predictions) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[418]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_Predictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 4}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Predictions) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Predictions) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Predictions) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_Bracket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Points        *uint32                `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Bracket) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_Bracket{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[419]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_Bracket) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[419]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_Bracket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_Bracket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 5}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Bracket) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_Bracket) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_PlayerCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Quality       *uint32                `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_PlayerCard) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_PlayerCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[420]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_PlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_PlayerCard) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_PlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[420]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_PlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_PlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 6}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_PlayerCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_PlayerCard) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalScore    *float32               `protobuf:"fixed32,1,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	Percentile    *float32               `protobuf:"fixed32,2,opt,name=percentile" json:"percentile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[421]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[421]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{163, 7}
}

func (x *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI8_CavernCrawl struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RoomsCleared     *uint32                `protobuf:"varint,1,opt,name=rooms_cleared,json=roomsCleared" json:"rooms_cleared,omitempty"`
	CarryCompleted   *bool                  `protobuf:"varint,2,opt,name=carry_completed,json=carryCompleted" json:"carry_completed,omitempty"`
	SupportCompleted *bool                  `protobuf:"varint,3,opt,name=support_completed,json=supportCompleted" json:"support_completed,omitempty"`
	UtilityCompleted *bool                  `protobuf:"varint,4,opt,name=utility_completed,json=utilityCompleted" json:"utility_completed,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_CavernCrawl{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[422]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[422]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_CavernCrawl.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 0}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) GetRoomsCleared() uint32 {
	if x != nil && x.RoomsCleared != nil {
		return *x.RoomsCleared
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) GetCarryCompleted() bool {
	if x != nil && x.CarryCompleted != nil {
		return *x.CarryCompleted
	}
	return false
}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) GetSupportCompleted() bool {
	if x != nil && x.SupportCompleted != nil {
		return *x.SupportCompleted
	}
	return false
}

func (x *CMsgGCToClientBattlePassRollup_TI8_CavernCrawl) GetUtilityCompleted() bool {
	if x != nil && x.UtilityCompleted != nil {
		return *x.UtilityCompleted
	}
	return false
}

type CMsgGCToClientBattlePassRollup_TI8_Wagering struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalWagered  *uint32                `protobuf:"varint,1,opt,name=total_wagered,json=totalWagered" json:"total_wagered,omitempty"`
	TotalWon      *uint32                `protobuf:"varint,2,opt,name=total_won,json=totalWon" json:"total_won,omitempty"`
	AverageWon    *uint32                `protobuf:"varint,3,opt,name=average_won,json=averageWon" json:"average_won,omitempty"`
	SuccessRate   *uint32                `protobuf:"varint,4,opt,name=success_rate,json=successRate" json:"success_rate,omitempty"`
	TotalTips     *uint32                `protobuf:"varint,5,opt,name=total_tips,json=totalTips" json:"total_tips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_Wagering{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[423]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_Wagering) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[423]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_Wagering.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_Wagering) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 1}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) GetTotalWagered() uint32 {
	if x != nil && x.TotalWagered != nil {
		return *x.TotalWagered
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) GetTotalWon() uint32 {
	if x != nil && x.TotalWon != nil {
		return *x.TotalWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) GetAverageWon() uint32 {
	if x != nil && x.AverageWon != nil {
		return *x.AverageWon
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) GetSuccessRate() uint32 {
	if x != nil && x.SuccessRate != nil {
		return *x.SuccessRate
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Wagering) GetTotalTips() uint32 {
	if x != nil && x.TotalTips != nil {
		return *x.TotalTips
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI8_Achievements struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Completed     *uint32                `protobuf:"varint,1,opt,name=completed" json:"completed,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Achievements) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_Achievements{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[424]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Achievements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_Achievements) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_Achievements) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[424]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_Achievements.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_Achievements) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 2}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Achievements) GetCompleted() uint32 {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Achievements) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Achievements) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI8_Predictions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Total         *uint32                `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Points        *uint32                `protobuf:"varint,3,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Predictions) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_Predictions{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[425]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Predictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_Predictions) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_Predictions) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[425]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_Predictions.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_Predictions) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 3}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Predictions) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Predictions) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Predictions) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI8_Bracket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Correct       *uint32                `protobuf:"varint,1,opt,name=correct" json:"correct,omitempty"`
	Points        *uint32                `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Bracket) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_Bracket{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[426]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Bracket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_Bracket) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_Bracket) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[426]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_Bracket.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_Bracket) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 4}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Bracket) GetCorrect() uint32 {
	if x != nil && x.Correct != nil {
		return *x.Correct
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_Bracket) GetPoints() uint32 {
	if x != nil && x.Points != nil {
		return *x.Points
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI8_PlayerCard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Quality       *uint32                `protobuf:"varint,2,opt,name=quality" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_PlayerCard) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_PlayerCard{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[427]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_PlayerCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_PlayerCard) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_PlayerCard) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[427]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_PlayerCard.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_PlayerCard) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 5}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_PlayerCard) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_PlayerCard) GetQuality() uint32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

type CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalScore    *float32               `protobuf:"fixed32,1,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
	Percentile    *float32               `protobuf:"fixed32,2,opt,name=percentile" json:"percentile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) Reset() {
	*x = CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[428]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[428]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{164, 6}
}

func (x *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) GetTotalScore() float32 {
	if x != nil && x.TotalScore != nil {
		return *x.TotalScore
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge) GetPercentile() float32 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

type CMsgGCToClientBattlePassRollupListResponse_EventInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       *uint32                `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	Level         *uint32                `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientBattlePassRollupListResponse_EventInfo) Reset() {
	*x = CMsgGCToClientBattlePassRollupListResponse_EventInfo{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[429]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientBattlePassRollupListResponse_EventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientBattlePassRollupListResponse_EventInfo) ProtoMessage() {}

func (x *CMsgGCToClientBattlePassRollupListResponse_EventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[429]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientBattlePassRollupListResponse_EventInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientBattlePassRollupListResponse_EventInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{170, 0}
}

func (x *CMsgGCToClientBattlePassRollupListResponse_EventInfo) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgGCToClientBattlePassRollupListResponse_EventInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type CMsgDOTAClientToGCQuickStatsResponse_SimpleStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WinPercent    *float32               `protobuf:"fixed32,1,opt,name=win_percent,json=winPercent" json:"win_percent,omitempty"`
	PickPercent   *float32               `protobuf:"fixed32,2,opt,name=pick_percent,json=pickPercent" json:"pick_percent,omitempty"`
	WinCount      *uint32                `protobuf:"varint,3,opt,name=win_count,json=winCount" json:"win_count,omitempty"`
	PickCount     *uint32                `protobuf:"varint,4,opt,name=pick_count,json=pickCount" json:"pick_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) Reset() {
	*x = CMsgDOTAClientToGCQuickStatsResponse_SimpleStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[430]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) ProtoMessage() {}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[430]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAClientToGCQuickStatsResponse_SimpleStats.ProtoReflect.Descriptor instead.
func (*CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{188, 0}
}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) GetWinPercent() float32 {
	if x != nil && x.WinPercent != nil {
		return *x.WinPercent
	}
	return 0
}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) GetPickPercent() float32 {
	if x != nil && x.PickPercent != nil {
		return *x.PickPercent
	}
	return 0
}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) GetWinCount() uint32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *CMsgDOTAClientToGCQuickStatsResponse_SimpleStats) GetPickCount() uint32 {
	if x != nil && x.PickCount != nil {
		return *x.PickCount
	}
	return 0
}

type CMsgProfileResponse_FeaturedHero struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HeroId             *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	EquippedEconItems  []*CSOEconItem         `protobuf:"bytes,2,rep,name=equipped_econ_items,json=equippedEconItems" json:"equipped_econ_items,omitempty"`
	ManuallySet        *bool                  `protobuf:"varint,3,opt,name=manually_set,json=manuallySet" json:"manually_set,omitempty"`
	PlusHeroXp         *uint32                `protobuf:"varint,4,opt,name=plus_hero_xp,json=plusHeroXp" json:"plus_hero_xp,omitempty"`
	PlusHeroRelicsItem *CSOEconItem           `protobuf:"bytes,5,opt,name=plus_hero_relics_item,json=plusHeroRelicsItem" json:"plus_hero_relics_item,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgProfileResponse_FeaturedHero) Reset() {
	*x = CMsgProfileResponse_FeaturedHero{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[431]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgProfileResponse_FeaturedHero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProfileResponse_FeaturedHero) ProtoMessage() {}

func (x *CMsgProfileResponse_FeaturedHero) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[431]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProfileResponse_FeaturedHero.ProtoReflect.Descriptor instead.
func (*CMsgProfileResponse_FeaturedHero) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{204, 0}
}

func (x *CMsgProfileResponse_FeaturedHero) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgProfileResponse_FeaturedHero) GetEquippedEconItems() []*CSOEconItem {
	if x != nil {
		return x.EquippedEconItems
	}
	return nil
}

func (x *CMsgProfileResponse_FeaturedHero) GetManuallySet() bool {
	if x != nil && x.ManuallySet != nil {
		return *x.ManuallySet
	}
	return false
}

func (x *CMsgProfileResponse_FeaturedHero) GetPlusHeroXp() uint32 {
	if x != nil && x.PlusHeroXp != nil {
		return *x.PlusHeroXp
	}
	return 0
}

func (x *CMsgProfileResponse_FeaturedHero) GetPlusHeroRelicsItem() *CSOEconItem {
	if x != nil {
		return x.PlusHeroRelicsItem
	}
	return nil
}

type CMsgProfileResponse_MatchInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchId           *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	MatchTimestamp    *uint32                `protobuf:"varint,2,opt,name=match_timestamp,json=matchTimestamp" json:"match_timestamp,omitempty"`
	PerformanceRating *int32                 `protobuf:"zigzag32,3,opt,name=performance_rating,json=performanceRating" json:"performance_rating,omitempty"`
	HeroId            *int32                 `protobuf:"varint,4,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	WonMatch          *bool                  `protobuf:"varint,5,opt,name=won_match,json=wonMatch" json:"won_match,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgProfileResponse_MatchInfo) Reset() {
	*x = CMsgProfileResponse_MatchInfo{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[432]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgProfileResponse_MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgProfileResponse_MatchInfo) ProtoMessage() {}

func (x *CMsgProfileResponse_MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[432]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgProfileResponse_MatchInfo.ProtoReflect.Descriptor instead.
func (*CMsgProfileResponse_MatchInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{204, 1}
}

func (x *CMsgProfileResponse_MatchInfo) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgProfileResponse_MatchInfo) GetMatchTimestamp() uint32 {
	if x != nil && x.MatchTimestamp != nil {
		return *x.MatchTimestamp
	}
	return 0
}

func (x *CMsgProfileResponse_MatchInfo) GetPerformanceRating() int32 {
	if x != nil && x.PerformanceRating != nil {
		return *x.PerformanceRating
	}
	return 0
}

func (x *CMsgProfileResponse_MatchInfo) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgProfileResponse_MatchInfo) GetWonMatch() bool {
	if x != nil && x.WonMatch != nil {
		return *x.WonMatch
	}
	return false
}

type CMsgHeroGlobalDataResponse_GraphData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Day           *uint32                `protobuf:"varint,1,opt,name=day" json:"day,omitempty"`
	WinPercent    *float32               `protobuf:"fixed32,2,opt,name=win_percent,json=winPercent" json:"win_percent,omitempty"`
	PickPercent   *float32               `protobuf:"fixed32,3,opt,name=pick_percent,json=pickPercent" json:"pick_percent,omitempty"`
	BanPercent    *float32               `protobuf:"fixed32,4,opt,name=ban_percent,json=banPercent" json:"ban_percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataResponse_GraphData) Reset() {
	*x = CMsgHeroGlobalDataResponse_GraphData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[433]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataResponse_GraphData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataResponse_GraphData) ProtoMessage() {}

func (x *CMsgHeroGlobalDataResponse_GraphData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[433]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataResponse_GraphData.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataResponse_GraphData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{210, 0}
}

func (x *CMsgHeroGlobalDataResponse_GraphData) GetDay() uint32 {
	if x != nil && x.Day != nil {
		return *x.Day
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_GraphData) GetWinPercent() float32 {
	if x != nil && x.WinPercent != nil {
		return *x.WinPercent
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_GraphData) GetPickPercent() float32 {
	if x != nil && x.PickPercent != nil {
		return *x.PickPercent
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_GraphData) GetBanPercent() float32 {
	if x != nil && x.BanPercent != nil {
		return *x.BanPercent
	}
	return 0
}

type CMsgHeroGlobalDataResponse_WeekData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Week          *uint32                `protobuf:"varint,1,opt,name=week" json:"week,omitempty"`
	WinPercent    *float32               `protobuf:"fixed32,2,opt,name=win_percent,json=winPercent" json:"win_percent,omitempty"`
	PickPercent   *float32               `protobuf:"fixed32,3,opt,name=pick_percent,json=pickPercent" json:"pick_percent,omitempty"`
	BanPercent    *float32               `protobuf:"fixed32,4,opt,name=ban_percent,json=banPercent" json:"ban_percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataResponse_WeekData) Reset() {
	*x = CMsgHeroGlobalDataResponse_WeekData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[434]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataResponse_WeekData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataResponse_WeekData) ProtoMessage() {}

func (x *CMsgHeroGlobalDataResponse_WeekData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[434]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataResponse_WeekData.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataResponse_WeekData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{210, 1}
}

func (x *CMsgHeroGlobalDataResponse_WeekData) GetWeek() uint32 {
	if x != nil && x.Week != nil {
		return *x.Week
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_WeekData) GetWinPercent() float32 {
	if x != nil && x.WinPercent != nil {
		return *x.WinPercent
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_WeekData) GetPickPercent() float32 {
	if x != nil && x.PickPercent != nil {
		return *x.PickPercent
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_WeekData) GetBanPercent() float32 {
	if x != nil && x.BanPercent != nil {
		return *x.BanPercent
	}
	return 0
}

type CMsgHeroGlobalDataResponse_HeroDataPerRankChunk struct {
	state          protoimpl.MessageState                  `protogen:"open.v1"`
	RankChunk      *uint32                                 `protobuf:"varint,1,opt,name=rank_chunk,json=rankChunk" json:"rank_chunk,omitempty"`
	TalentWinRates []*CMsgTalentWinRates                   `protobuf:"bytes,2,rep,name=talent_win_rates,json=talentWinRates" json:"talent_win_rates,omitempty"`
	HeroAverages   *CMsgGlobalHeroAverages                 `protobuf:"bytes,3,opt,name=hero_averages,json=heroAverages" json:"hero_averages,omitempty"`
	GraphData      []*CMsgHeroGlobalDataResponse_GraphData `protobuf:"bytes,4,rep,name=graph_data,json=graphData" json:"graph_data,omitempty"`
	WeekData       []*CMsgHeroGlobalDataResponse_WeekData  `protobuf:"bytes,5,rep,name=week_data,json=weekData" json:"week_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) Reset() {
	*x = CMsgHeroGlobalDataResponse_HeroDataPerRankChunk{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[435]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) ProtoMessage() {}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[435]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataResponse_HeroDataPerRankChunk.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{210, 2}
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) GetRankChunk() uint32 {
	if x != nil && x.RankChunk != nil {
		return *x.RankChunk
	}
	return 0
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) GetTalentWinRates() []*CMsgTalentWinRates {
	if x != nil {
		return x.TalentWinRates
	}
	return nil
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) GetHeroAverages() *CMsgGlobalHeroAverages {
	if x != nil {
		return x.HeroAverages
	}
	return nil
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) GetGraphData() []*CMsgHeroGlobalDataResponse_GraphData {
	if x != nil {
		return x.GraphData
	}
	return nil
}

func (x *CMsgHeroGlobalDataResponse_HeroDataPerRankChunk) GetWeekData() []*CMsgHeroGlobalDataResponse_WeekData {
	if x != nil {
		return x.WeekData
	}
	return nil
}

type CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	HeroId           *int32                 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	WinRate          *uint32                `protobuf:"varint,2,opt,name=win_rate,json=winRate" json:"win_rate,omitempty"`
	FirstOtherHeroId *int32                 `protobuf:"varint,3,opt,name=first_other_hero_id,json=firstOtherHeroId" json:"first_other_hero_id,omitempty"`
	AllyWinRate      []uint32               `protobuf:"varint,5,rep,name=ally_win_rate,json=allyWinRate" json:"ally_win_rate,omitempty"`
	EnemyWinRate     []uint32               `protobuf:"varint,6,rep,name=enemy_win_rate,json=enemyWinRate" json:"enemy_win_rate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) Reset() {
	*x = CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[436]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) ProtoMessage() {}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[436]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{212, 0}
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) GetWinRate() uint32 {
	if x != nil && x.WinRate != nil {
		return *x.WinRate
	}
	return 0
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) GetFirstOtherHeroId() int32 {
	if x != nil && x.FirstOtherHeroId != nil {
		return *x.FirstOtherHeroId
	}
	return 0
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) GetAllyWinRate() []uint32 {
	if x != nil {
		return x.AllyWinRate
	}
	return nil
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData) GetEnemyWinRate() []uint32 {
	if x != nil {
		return x.EnemyWinRate
	}
	return nil
}

type CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Rank          *uint32                                              `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	HeroData      []*CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData `protobuf:"bytes,2,rep,name=hero_data,json=heroData" json:"hero_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) Reset() {
	*x = CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[437]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) ProtoMessage() {}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[437]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData.ProtoReflect.Descriptor instead.
func (*CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{212, 1}
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData) GetHeroData() []*CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData {
	if x != nil {
		return x.HeroData
	}
	return nil
}

type CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PathIdCompleted         *uint32                `protobuf:"varint,1,opt,name=path_id_completed,json=pathIdCompleted,def=255" json:"path_id_completed,omitempty"`
	ReceivedUltraRareReward *bool                  `protobuf:"varint,2,opt,name=received_ultra_rare_reward,json=receivedUltraRareReward" json:"received_ultra_rare_reward,omitempty"`
	HalfCompleted           *bool                  `protobuf:"varint,3,opt,name=half_completed,json=halfCompleted" json:"half_completed,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo fields.
const (
	Default_CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo_PathIdCompleted = uint32(255)
)

func (x *CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) Reset() {
	*x = CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[438]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) ProtoMessage() {}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[438]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{216, 0}
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) GetPathIdCompleted() uint32 {
	if x != nil && x.PathIdCompleted != nil {
		return *x.PathIdCompleted
	}
	return Default_CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo_PathIdCompleted
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) GetReceivedUltraRareReward() bool {
	if x != nil && x.ReceivedUltraRareReward != nil {
		return *x.ReceivedUltraRareReward
	}
	return false
}

func (x *CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo) GetHalfCompleted() bool {
	if x != nil && x.HalfCompleted != nil {
		return *x.HalfCompleted
	}
	return false
}

type CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PathId_1      *uint32                `protobuf:"varint,1,opt,name=path_id_1,json=pathId1,def=255" json:"path_id_1,omitempty"`
	PathId_2      *uint32                `protobuf:"varint,2,opt,name=path_id_2,json=pathId2,def=255" json:"path_id_2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge fields.
const (
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge_PathId_1 = uint32(255)
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge_PathId_2 = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) Reset() {
	*x = CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[439]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[439]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{225, 0}
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) GetPathId_1() uint32 {
	if x != nil && x.PathId_1 != nil {
		return *x.PathId_1
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge_PathId_1
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge) GetPathId_2() uint32 {
	if x != nil && x.PathId_2 != nil {
		return *x.PathId_2
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge_PathId_2
}

type CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemType      *uint32                `protobuf:"varint,1,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) Reset() {
	*x = CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[440]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[440]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{225, 1}
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MapRoomId      *uint32                `protobuf:"varint,1,opt,name=map_room_id,json=mapRoomId,def=255" json:"map_room_id,omitempty"`
	RevealedRoomId *uint32                `protobuf:"varint,2,opt,name=revealed_room_id,json=revealedRoomId,def=255" json:"revealed_room_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap fields.
const (
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap_MapRoomId      = uint32(255)
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap_RevealedRoomId = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) Reset() {
	*x = CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[441]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[441]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{225, 2}
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) GetMapRoomId() uint32 {
	if x != nil && x.MapRoomId != nil {
		return *x.MapRoomId
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap_MapRoomId
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap) GetRevealedRoomId() uint32 {
	if x != nil && x.RevealedRoomId != nil {
		return *x.RevealedRoomId
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap_RevealedRoomId
}

type CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant struct {
	state                     protoimpl.MessageState                                               `protogen:"open.v1"`
	MapVariant                *uint32                                                              `protobuf:"varint,1,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	ClaimedRooms_1            *uint64                                                              `protobuf:"fixed64,2,opt,name=claimed_rooms_1,json=claimedRooms1" json:"claimed_rooms_1,omitempty"`
	ClaimedRooms_2            *uint64                                                              `protobuf:"fixed64,3,opt,name=claimed_rooms_2,json=claimedRooms2" json:"claimed_rooms_2,omitempty"`
	RevealedRooms_1           *uint64                                                              `protobuf:"fixed64,4,opt,name=revealed_rooms_1,json=revealedRooms1" json:"revealed_rooms_1,omitempty"`
	RevealedRooms_2           *uint64                                                              `protobuf:"fixed64,5,opt,name=revealed_rooms_2,json=revealedRooms2" json:"revealed_rooms_2,omitempty"`
	CompletedPaths_1          *uint64                                                              `protobuf:"fixed64,6,opt,name=completed_paths_1,json=completedPaths1" json:"completed_paths_1,omitempty"`
	CompletedPaths_2          *uint64                                                              `protobuf:"fixed64,7,opt,name=completed_paths_2,json=completedPaths2" json:"completed_paths_2,omitempty"`
	CompletedPaths_3          *uint64                                                              `protobuf:"fixed64,8,opt,name=completed_paths_3,json=completedPaths3" json:"completed_paths_3,omitempty"`
	CompletedPaths_4          *uint64                                                              `protobuf:"fixed64,9,opt,name=completed_paths_4,json=completedPaths4" json:"completed_paths_4,omitempty"`
	HalfCompletedPaths_1      *uint64                                                              `protobuf:"fixed64,10,opt,name=half_completed_paths_1,json=halfCompletedPaths1" json:"half_completed_paths_1,omitempty"`
	HalfCompletedPaths_2      *uint64                                                              `protobuf:"fixed64,11,opt,name=half_completed_paths_2,json=halfCompletedPaths2" json:"half_completed_paths_2,omitempty"`
	HalfCompletedPaths_3      *uint64                                                              `protobuf:"fixed64,12,opt,name=half_completed_paths_3,json=halfCompletedPaths3" json:"half_completed_paths_3,omitempty"`
	HalfCompletedPaths_4      *uint64                                                              `protobuf:"fixed64,13,opt,name=half_completed_paths_4,json=halfCompletedPaths4" json:"half_completed_paths_4,omitempty"`
	SwappedChallenge          []*CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge `protobuf:"bytes,14,rep,name=swapped_challenge,json=swappedChallenge" json:"swapped_challenge,omitempty"`
	UltraRareRewardRoomNumber *uint32                                                              `protobuf:"varint,15,opt,name=ultra_rare_reward_room_number,json=ultraRareRewardRoomNumber,def=255" json:"ultra_rare_reward_room_number,omitempty"`
	TreasureMap               []*CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap      `protobuf:"bytes,16,rep,name=treasure_map,json=treasureMap" json:"treasure_map,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant fields.
const (
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant_MapVariant                = uint32(255)
	Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant_UltraRareRewardRoomNumber = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) Reset() {
	*x = CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[442]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[442]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{225, 3}
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant_MapVariant
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetClaimedRooms_1() uint64 {
	if x != nil && x.ClaimedRooms_1 != nil {
		return *x.ClaimedRooms_1
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetClaimedRooms_2() uint64 {
	if x != nil && x.ClaimedRooms_2 != nil {
		return *x.ClaimedRooms_2
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetRevealedRooms_1() uint64 {
	if x != nil && x.RevealedRooms_1 != nil {
		return *x.RevealedRooms_1
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetRevealedRooms_2() uint64 {
	if x != nil && x.RevealedRooms_2 != nil {
		return *x.RevealedRooms_2
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetCompletedPaths_1() uint64 {
	if x != nil && x.CompletedPaths_1 != nil {
		return *x.CompletedPaths_1
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetCompletedPaths_2() uint64 {
	if x != nil && x.CompletedPaths_2 != nil {
		return *x.CompletedPaths_2
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetCompletedPaths_3() uint64 {
	if x != nil && x.CompletedPaths_3 != nil {
		return *x.CompletedPaths_3
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetCompletedPaths_4() uint64 {
	if x != nil && x.CompletedPaths_4 != nil {
		return *x.CompletedPaths_4
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetHalfCompletedPaths_1() uint64 {
	if x != nil && x.HalfCompletedPaths_1 != nil {
		return *x.HalfCompletedPaths_1
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetHalfCompletedPaths_2() uint64 {
	if x != nil && x.HalfCompletedPaths_2 != nil {
		return *x.HalfCompletedPaths_2
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetHalfCompletedPaths_3() uint64 {
	if x != nil && x.HalfCompletedPaths_3 != nil {
		return *x.HalfCompletedPaths_3
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetHalfCompletedPaths_4() uint64 {
	if x != nil && x.HalfCompletedPaths_4 != nil {
		return *x.HalfCompletedPaths_4
	}
	return 0
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetSwappedChallenge() []*CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge {
	if x != nil {
		return x.SwappedChallenge
	}
	return nil
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetUltraRareRewardRoomNumber() uint32 {
	if x != nil && x.UltraRareRewardRoomNumber != nil {
		return *x.UltraRareRewardRoomNumber
	}
	return Default_CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant_UltraRareRewardRoomNumber
}

func (x *CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant) GetTreasureMap() []*CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap {
	if x != nil {
		return x.TreasureMap
	}
	return nil
}

type CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MapVariant    *uint32                `protobuf:"varint,1,opt,name=map_variant,json=mapVariant,def=255" json:"map_variant,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant fields.
const (
	Default_CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant_MapVariant = uint32(255)
)

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) Reset() {
	*x = CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[443]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) ProtoMessage() {}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[443]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{227, 0}
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) GetMapVariant() uint32 {
	if x != nil && x.MapVariant != nil {
		return *x.MapVariant
	}
	return Default_CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant_MapVariant
}

func (x *CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CMsgDOTAMutationList_Mutation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAMutationList_Mutation) Reset() {
	*x = CMsgDOTAMutationList_Mutation{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[444]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAMutationList_Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAMutationList_Mutation) ProtoMessage() {}

func (x *CMsgDOTAMutationList_Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[444]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAMutationList_Mutation.ProtoReflect.Descriptor instead.
func (*CMsgDOTAMutationList_Mutation) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{228, 0}
}

func (x *CMsgDOTAMutationList_Mutation) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgDOTAMutationList_Mutation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgDOTAMutationList_Mutation) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CMsgEventTipsSummaryResponse_Tipper struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TipperAccountId *uint32                `protobuf:"varint,1,opt,name=tipper_account_id,json=tipperAccountId" json:"tipper_account_id,omitempty"`
	TipCount        *uint32                `protobuf:"varint,2,opt,name=tip_count,json=tipCount,def=1" json:"tip_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgEventTipsSummaryResponse_Tipper fields.
const (
	Default_CMsgEventTipsSummaryResponse_Tipper_TipCount = uint32(1)
)

func (x *CMsgEventTipsSummaryResponse_Tipper) Reset() {
	*x = CMsgEventTipsSummaryResponse_Tipper{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[445]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgEventTipsSummaryResponse_Tipper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgEventTipsSummaryResponse_Tipper) ProtoMessage() {}

func (x *CMsgEventTipsSummaryResponse_Tipper) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[445]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgEventTipsSummaryResponse_Tipper.ProtoReflect.Descriptor instead.
func (*CMsgEventTipsSummaryResponse_Tipper) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{230, 0}
}

func (x *CMsgEventTipsSummaryResponse_Tipper) GetTipperAccountId() uint32 {
	if x != nil && x.TipperAccountId != nil {
		return *x.TipperAccountId
	}
	return 0
}

func (x *CMsgEventTipsSummaryResponse_Tipper) GetTipCount() uint32 {
	if x != nil && x.TipCount != nil {
		return *x.TipCount
	}
	return Default_CMsgEventTipsSummaryResponse_Tipper_TipCount
}

type CMsgSocialFeedResponse_FeedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FeedEventId   *uint64                `protobuf:"varint,1,opt,name=feed_event_id,json=feedEventId" json:"feed_event_id,omitempty"`
	AccountId     *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Timestamp     *uint32                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	CommentCount  *uint32                `protobuf:"varint,4,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
	EventType     *uint32                `protobuf:"varint,5,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	EventSubType  *uint32                `protobuf:"varint,6,opt,name=event_sub_type,json=eventSubType" json:"event_sub_type,omitempty"`
	ParamBigInt_1 *uint64                `protobuf:"varint,7,opt,name=param_big_int_1,json=paramBigInt1" json:"param_big_int_1,omitempty"`
	ParamInt_1    *uint32                `protobuf:"varint,8,opt,name=param_int_1,json=paramInt1" json:"param_int_1,omitempty"`
	ParamInt_2    *uint32                `protobuf:"varint,9,opt,name=param_int_2,json=paramInt2" json:"param_int_2,omitempty"`
	ParamInt_3    *uint32                `protobuf:"varint,10,opt,name=param_int_3,json=paramInt3" json:"param_int_3,omitempty"`
	ParamString   *string                `protobuf:"bytes,11,opt,name=param_string,json=paramString" json:"param_string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSocialFeedResponse_FeedEvent) Reset() {
	*x = CMsgSocialFeedResponse_FeedEvent{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[446]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSocialFeedResponse_FeedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSocialFeedResponse_FeedEvent) ProtoMessage() {}

func (x *CMsgSocialFeedResponse_FeedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[446]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSocialFeedResponse_FeedEvent.ProtoReflect.Descriptor instead.
func (*CMsgSocialFeedResponse_FeedEvent) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{232, 0}
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetFeedEventId() uint64 {
	if x != nil && x.FeedEventId != nil {
		return *x.FeedEventId
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetEventType() uint32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetEventSubType() uint32 {
	if x != nil && x.EventSubType != nil {
		return *x.EventSubType
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetParamBigInt_1() uint64 {
	if x != nil && x.ParamBigInt_1 != nil {
		return *x.ParamBigInt_1
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetParamInt_1() uint32 {
	if x != nil && x.ParamInt_1 != nil {
		return *x.ParamInt_1
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetParamInt_2() uint32 {
	if x != nil && x.ParamInt_2 != nil {
		return *x.ParamInt_2
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetParamInt_3() uint32 {
	if x != nil && x.ParamInt_3 != nil {
		return *x.ParamInt_3
	}
	return 0
}

func (x *CMsgSocialFeedResponse_FeedEvent) GetParamString() string {
	if x != nil && x.ParamString != nil {
		return *x.ParamString
	}
	return ""
}

type CMsgSocialFeedCommentsResponse_FeedComment struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CommenterAccountId *uint32                `protobuf:"varint,1,opt,name=commenter_account_id,json=commenterAccountId" json:"commenter_account_id,omitempty"`
	Timestamp          *uint32                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	CommentText        *string                `protobuf:"bytes,3,opt,name=comment_text,json=commentText" json:"comment_text,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgSocialFeedCommentsResponse_FeedComment) Reset() {
	*x = CMsgSocialFeedCommentsResponse_FeedComment{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[447]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSocialFeedCommentsResponse_FeedComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSocialFeedCommentsResponse_FeedComment) ProtoMessage() {}

func (x *CMsgSocialFeedCommentsResponse_FeedComment) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[447]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSocialFeedCommentsResponse_FeedComment.ProtoReflect.Descriptor instead.
func (*CMsgSocialFeedCommentsResponse_FeedComment) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{234, 0}
}

func (x *CMsgSocialFeedCommentsResponse_FeedComment) GetCommenterAccountId() uint32 {
	if x != nil && x.CommenterAccountId != nil {
		return *x.CommenterAccountId
	}
	return 0
}

func (x *CMsgSocialFeedCommentsResponse_FeedComment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSocialFeedCommentsResponse_FeedComment) GetCommentText() string {
	if x != nil && x.CommentText != nil {
		return *x.CommentText
	}
	return ""
}

type CMsgClientToGCRequestContestVotesResponse_ItemVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContestItemId *uint64                `protobuf:"varint,1,opt,name=contest_item_id,json=contestItemId" json:"contest_item_id,omitempty"`
	Vote          *int32                 `protobuf:"varint,2,opt,name=vote" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestContestVotesResponse_ItemVote) Reset() {
	*x = CMsgClientToGCRequestContestVotesResponse_ItemVote{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[448]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestContestVotesResponse_ItemVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestContestVotesResponse_ItemVote) ProtoMessage() {}

func (x *CMsgClientToGCRequestContestVotesResponse_ItemVote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[448]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestContestVotesResponse_ItemVote.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestContestVotesResponse_ItemVote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{238, 0}
}

func (x *CMsgClientToGCRequestContestVotesResponse_ItemVote) GetContestItemId() uint64 {
	if x != nil && x.ContestItemId != nil {
		return *x.ContestItemId
	}
	return 0
}

func (x *CMsgClientToGCRequestContestVotesResponse_ItemVote) GetVote() int32 {
	if x != nil && x.Vote != nil {
		return *x.Vote
	}
	return 0
}

type CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *uint32                `protobuf:"fixed32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	TimeAdded     *uint32                `protobuf:"fixed32,2,opt,name=time_added,json=timeAdded" json:"time_added,omitempty"`
	TimeExpires   *uint32                `protobuf:"fixed32,3,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	Note          *string                `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) Reset() {
	*x = CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[449]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) ProtoMessage() {}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[449]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{252, 0}
}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) GetTimeAdded() uint32 {
	if x != nil && x.TimeAdded != nil {
		return *x.TimeAdded
	}
	return 0
}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) GetTimeExpires() uint32 {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return 0
}

func (x *CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry) GetNote() string {
	if x != nil && x.Note != nil {
		return *x.Note
	}
	return ""
}

type CMsgGCToClientVerifyFavoritePlayersResponse_Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Player        *CMsgPartySearchPlayer `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	IsFavorite    *bool                  `protobuf:"varint,2,opt,name=is_favorite,json=isFavorite" json:"is_favorite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse_Result) Reset() {
	*x = CMsgGCToClientVerifyFavoritePlayersResponse_Result{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[450]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientVerifyFavoritePlayersResponse_Result) ProtoMessage() {}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[450]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientVerifyFavoritePlayersResponse_Result.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientVerifyFavoritePlayersResponse_Result) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{273, 0}
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse_Result) GetPlayer() *CMsgPartySearchPlayer {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CMsgGCToClientVerifyFavoritePlayersResponse_Result) GetIsFavorite() bool {
	if x != nil && x.IsFavorite != nil {
		return *x.IsFavorite
	}
	return false
}

type CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       *uint64                `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	HeroId        *int32                 `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	ReportReason  *uint32                `protobuf:"varint,3,opt,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	Timestamp     *uint32                `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) Reset() {
	*x = CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[451]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) ProtoMessage() {}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[451]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{298, 0}
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) GetHeroId() int32 {
	if x != nil && x.HeroId != nil {
		return *x.HeroId
	}
	return 0
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) GetReportReason() uint32 {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return 0
}

func (x *CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CMsgClientToGCGetOWMatchDetailsResponse_Marker struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StartGameTimeS *uint32                `protobuf:"varint,1,opt,name=start_game_time_s,json=startGameTimeS" json:"start_game_time_s,omitempty"`
	EndGameTimeS   *uint32                `protobuf:"varint,2,opt,name=end_game_time_s,json=endGameTimeS" json:"end_game_time_s,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse_Marker) Reset() {
	*x = CMsgClientToGCGetOWMatchDetailsResponse_Marker{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[452]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse_Marker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetOWMatchDetailsResponse_Marker) ProtoMessage() {}

func (x *CMsgClientToGCGetOWMatchDetailsResponse_Marker) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[452]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetOWMatchDetailsResponse_Marker.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetOWMatchDetailsResponse_Marker) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{304, 0}
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse_Marker) GetStartGameTimeS() uint32 {
	if x != nil && x.StartGameTimeS != nil {
		return *x.StartGameTimeS
	}
	return 0
}

func (x *CMsgClientToGCGetOWMatchDetailsResponse_Marker) GetEndGameTimeS() uint32 {
	if x != nil && x.EndGameTimeS != nil {
		return *x.EndGameTimeS
	}
	return 0
}

type CMsgClientToGCGetDPCFavoritesResponse_Favorite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FavoriteType  *EDPCFavoriteType      `protobuf:"varint,1,opt,name=favorite_type,json=favoriteType,enum=protocol.EDPCFavoriteType,def=0" json:"favorite_type,omitempty"`
	FavoriteId    *uint32                `protobuf:"varint,2,opt,name=favorite_id,json=favoriteId" json:"favorite_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCGetDPCFavoritesResponse_Favorite fields.
const (
	Default_CMsgClientToGCGetDPCFavoritesResponse_Favorite_FavoriteType = EDPCFavoriteType_FAVORITE_TYPE_ALL
)

func (x *CMsgClientToGCGetDPCFavoritesResponse_Favorite) Reset() {
	*x = CMsgClientToGCGetDPCFavoritesResponse_Favorite{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[453]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCGetDPCFavoritesResponse_Favorite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCGetDPCFavoritesResponse_Favorite) ProtoMessage() {}

func (x *CMsgClientToGCGetDPCFavoritesResponse_Favorite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[453]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCGetDPCFavoritesResponse_Favorite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCGetDPCFavoritesResponse_Favorite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{316, 0}
}

func (x *CMsgClientToGCGetDPCFavoritesResponse_Favorite) GetFavoriteType() EDPCFavoriteType {
	if x != nil && x.FavoriteType != nil {
		return *x.FavoriteType
	}
	return Default_CMsgClientToGCGetDPCFavoritesResponse_Favorite_FavoriteType
}

func (x *CMsgClientToGCGetDPCFavoritesResponse_Favorite) GetFavoriteId() uint32 {
	if x != nil && x.FavoriteId != nil {
		return *x.FavoriteId
	}
	return 0
}

type CMsgClientToGCPlaceStickersRequest_StickerItem struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PageNum       *uint32                 `protobuf:"varint,2,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	Sticker       *CMsgStickerbookSticker `protobuf:"bytes,3,opt,name=sticker" json:"sticker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCPlaceStickersRequest_StickerItem) Reset() {
	*x = CMsgClientToGCPlaceStickersRequest_StickerItem{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[454]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlaceStickersRequest_StickerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlaceStickersRequest_StickerItem) ProtoMessage() {}

func (x *CMsgClientToGCPlaceStickersRequest_StickerItem) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[454]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlaceStickersRequest_StickerItem.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlaceStickersRequest_StickerItem) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{329, 0}
}

func (x *CMsgClientToGCPlaceStickersRequest_StickerItem) GetPageNum() uint32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *CMsgClientToGCPlaceStickersRequest_StickerItem) GetSticker() *CMsgStickerbookSticker {
	if x != nil {
		return x.Sticker
	}
	return nil
}

type CMsgClientToGCPlaceCollectionStickersRequest_Slot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNum       *uint32                `protobuf:"varint,1,opt,name=page_num,json=pageNum" json:"page_num,omitempty"`
	Slot          *uint32                `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	NewItemId     *uint64                `protobuf:"varint,3,opt,name=new_item_id,json=newItemId" json:"new_item_id,omitempty"`
	OldItemDefId  *uint32                `protobuf:"varint,4,opt,name=old_item_def_id,json=oldItemDefId" json:"old_item_def_id,omitempty"`
	OldQuality    *uint32                `protobuf:"varint,5,opt,name=old_quality,json=oldQuality" json:"old_quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) Reset() {
	*x = CMsgClientToGCPlaceCollectionStickersRequest_Slot{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[455]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPlaceCollectionStickersRequest_Slot) ProtoMessage() {}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[455]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPlaceCollectionStickersRequest_Slot.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPlaceCollectionStickersRequest_Slot) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{331, 0}
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) GetPageNum() uint32 {
	if x != nil && x.PageNum != nil {
		return *x.PageNum
	}
	return 0
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) GetNewItemId() uint64 {
	if x != nil && x.NewItemId != nil {
		return *x.NewItemId
	}
	return 0
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) GetOldItemDefId() uint32 {
	if x != nil && x.OldItemDefId != nil {
		return *x.OldItemDefId
	}
	return 0
}

func (x *CMsgClientToGCPlaceCollectionStickersRequest_Slot) GetOldQuality() uint32 {
	if x != nil && x.OldQuality != nil {
		return *x.OldQuality
	}
	return 0
}

type CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	ItemDef       *uint32                                                            `protobuf:"varint,1,opt,name=item_def,json=itemDef" json:"item_def,omitempty"`
	VoteType      *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType `protobuf:"varint,2,opt,name=vote_type,json=voteType,enum=protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType,def=0" json:"vote_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote fields.
const (
	Default_CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_VoteType = CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_k_eUp
)

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) Reset() {
	*x = CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[456]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) ProtoMessage() {}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[456]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{344, 0}
}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) GetItemDef() uint32 {
	if x != nil && x.ItemDef != nil {
		return *x.ItemDef
	}
	return 0
}

func (x *CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote) GetVoteType() CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType {
	if x != nil && x.VoteType != nil {
		return *x.VoteType
	}
	return Default_CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_VoteType
}

type CMsgClientToGCUpdateComicBookStats_SingleStat struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	StatType      *CMsgClientToGCUpdateComicBookStat_Type `protobuf:"varint,1,opt,name=stat_type,json=statType,enum=protocol.CMsgClientToGCUpdateComicBookStat_Type,def=1" json:"stat_type,omitempty"`
	StatValue     *uint32                                 `protobuf:"varint,2,opt,name=stat_value,json=statValue" json:"stat_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCUpdateComicBookStats_SingleStat fields.
const (
	Default_CMsgClientToGCUpdateComicBookStats_SingleStat_StatType = CMsgClientToGCUpdateComicBookStat_Type_CMsgClientToGCUpdateComicBookStat_Type_HighestPageRead
)

func (x *CMsgClientToGCUpdateComicBookStats_SingleStat) Reset() {
	*x = CMsgClientToGCUpdateComicBookStats_SingleStat{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[457]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUpdateComicBookStats_SingleStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdateComicBookStats_SingleStat) ProtoMessage() {}

func (x *CMsgClientToGCUpdateComicBookStats_SingleStat) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[457]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdateComicBookStats_SingleStat.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdateComicBookStats_SingleStat) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{363, 0}
}

func (x *CMsgClientToGCUpdateComicBookStats_SingleStat) GetStatType() CMsgClientToGCUpdateComicBookStat_Type {
	if x != nil && x.StatType != nil {
		return *x.StatType
	}
	return Default_CMsgClientToGCUpdateComicBookStats_SingleStat_StatType
}

func (x *CMsgClientToGCUpdateComicBookStats_SingleStat) GetStatValue() uint32 {
	if x != nil && x.StatValue != nil {
		return *x.StatValue
	}
	return 0
}

type CMsgClientToGCUpdateComicBookStats_LanguageStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ComicId             *uint32                `protobuf:"varint,1,opt,name=comic_id,json=comicId" json:"comic_id,omitempty"`
	ClientLanguage      *uint32                `protobuf:"varint,2,opt,name=client_language,json=clientLanguage" json:"client_language,omitempty"`
	ClientComicLanguage *uint32                `protobuf:"varint,3,opt,name=client_comic_language,json=clientComicLanguage" json:"client_comic_language,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgClientToGCUpdateComicBookStats_LanguageStats) Reset() {
	*x = CMsgClientToGCUpdateComicBookStats_LanguageStats{}
	mi := &file_dota_gcmessages_client_proto_msgTypes[458]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCUpdateComicBookStats_LanguageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCUpdateComicBookStats_LanguageStats) ProtoMessage() {}

func (x *CMsgClientToGCUpdateComicBookStats_LanguageStats) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_proto_msgTypes[458]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCUpdateComicBookStats_LanguageStats.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCUpdateComicBookStats_LanguageStats) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_proto_rawDescGZIP(), []int{363, 1}
}

func (x *CMsgClientToGCUpdateComicBookStats_LanguageStats) GetComicId() uint32 {
	if x != nil && x.ComicId != nil {
		return *x.ComicId
	}
	return 0
}

func (x *CMsgClientToGCUpdateComicBookStats_LanguageStats) GetClientLanguage() uint32 {
	if x != nil && x.ClientLanguage != nil {
		return *x.ClientLanguage
	}
	return 0
}

func (x *CMsgClientToGCUpdateComicBookStats_LanguageStats) GetClientComicLanguage() uint32 {
	if x != nil && x.ClientComicLanguage != nil {
		return *x.ClientComicLanguage
	}
	return 0
}

var File_dota_gcmessages_client_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64,
	0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64, 0x6f, 0x74, 0x61,
	0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x61, 0x6c,
	0x76, 0x65, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x30, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x22, 0x47, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x88, 0x03, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x79, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x10, 0x0a, 0x0d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x2e, 0x50, 0x6f, 0x70, 0x75,
	0x70, 0x49, 0x44, 0x3a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x85, 0x0e, 0x0a, 0x07, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x49, 0x44, 0x12, 0x11, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x4c, 0x4f, 0x42, 0x42, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x49, 0x43, 0x4b, 0x45,
	0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x57, 0x41, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x42, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x41, 0x4d,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x49, 0x47, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x11, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x4d, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x13, 0x12,
	0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x20,
	0x0a, 0x1c, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x16,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44,
	0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48,
	0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10,
	0x19, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x54, 0x5f,
	0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x1b, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x1d, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x1f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x20, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x55, 0x50, 0x54, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x47, 0x4f, 0x54, 0x53, 0x10, 0x27, 0x12,
	0x38, 0x0a, 0x34, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x54, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d, 0x4f, 0x52, 0x45,
	0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x2a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x52,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x10, 0x2c, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x45, 0x45, 0x4b,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x5f, 0x55, 0x4e, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x10, 0x31, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x44, 0x45, 0x44,
	0x10, 0x32, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x55, 0x50, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x4c, 0x5f, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x34, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x35,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10,
	0x36, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x37, 0x12, 0x14, 0x0a,
	0x10, 0x56, 0x41, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x38, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x39, 0x12, 0x22, 0x0a, 0x1e, 0x4b, 0x49, 0x43,
	0x4b, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x3a, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x3e, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x41,
	0x52, 0x4e, 0x45, 0x44, 0x10, 0x3f, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x40, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x42,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55,
	0x4d, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x10,
	0x43, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x4d, 0x56, 0x50, 0x5f, 0x41,
	0x57, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x57, 0x5f,
	0x42, 0x41, 0x44, 0x47, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x10, 0x47, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x49, 0x4e, 0x53, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x48, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x49, 0x12,
	0x25, 0x0a, 0x21, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x4a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49,
	0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x49, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x46, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x4b, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x4c, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4d, 0x55, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x4d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x45, 0x57, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10,
	0x4e, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x4f, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x03, 0x0a,
	0x20, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x75, 0x6d, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x6e, 0x75, 0x6d, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x6e,
	0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6e, 0x75, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x75,
	0x6d, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x6d, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xca,
	0x04, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4c,
	0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x48, 0x61, 0x73, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0a, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x61,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f,
	0x65, 0x4e, 0x6f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0d, 0x22, 0x86, 0x01, 0x0a, 0x20,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x76, 0x6f,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1c, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xf0, 0x04, 0x0a, 0x24, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x4c, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x48, 0x61, 0x73, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x61, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a,
	0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0e, 0x22, 0x48, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x4d, 0x56, 0x50, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x56, 0x50,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x4d, 0x56, 0x50, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x76, 0x70, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x76, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c,
	0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65,
	0x3a, 0x15, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0x44, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x61, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x22, 0x40, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x22, 0xfc, 0x08, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38,
	0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x33, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x33, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x63, 0x5f, 0x73,
	0x6f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67, 0x63, 0x53, 0x6f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x50, 0x65, 0x72, 0x66, 0x65, 0x63,
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x69, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x52, 0x18, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x14,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x43, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65,
	0x48, 0x65, 0x72, 0x6f, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76,
	0x6f, 0x74, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x1b, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x26, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x57, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1c,
	0x6b, 0x5f, 0x45, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x4b, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x29, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x24, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0x62, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x61,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x40, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x33, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x33, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x44, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x44,
	0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x4f, 0x54, 0x41, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x52, 0x09,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xf2, 0x07, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x82, 0x07, 0x0a, 0x04, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x76,
	0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x76, 0x67, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x76, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x67, 0x70,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x76, 0x67, 0x47, 0x70, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x78, 0x70, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x76, 0x67, 0x58, 0x70, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x65, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x67, 0x70, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x47, 0x70, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x78, 0x70,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x58, 0x70, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x61, 0x6c, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c,
	0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x77, 0x69, 0x6e, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x45, 0x6e, 0x65, 0x6d, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x45, 0x6e, 0x65,
	0x6d, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x74, 0x68, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x68,
	0x69, 0x74, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x68, 0x69, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x6e, 0x79, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x6e, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x65, 0x61, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x65, 0x61, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x68, 0x69, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61,
	0x76, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x68, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x67, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x61, 0x76, 0x67, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x1d, 0x43, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70,
	0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x22, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x53, 0x74, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b,
	0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x3a,
	0x01, 0x31, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x6e,
	0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01,
	0x31, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01,
	0x31, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x06,
	0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x63, 0x61, 0x6d,
	0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x3a, 0x01, 0x31, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x64, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x07, 0x64, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x61,
	0x6d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52,
	0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0xf0, 0x05, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10,
	0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0xb5, 0x03, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x4a, 0x0a, 0x0c, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x0b, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0f,
	0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x64, 0x64, 0x65, 0x76, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x53, 0x74, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x64, 0x64, 0x65, 0x76, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x6e,
	0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x5e, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x25, 0x0a, 0x23,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x59, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x79, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x22,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x2a, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x46, 0x6c, 0x69, 0x70, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x14,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47,
	0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x63, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x12,
	0x67, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x02, 0x0a,
	0x18, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x0a, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1b,
	0x6b, 0x5f, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x84, 0x01, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x04, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x51, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x8c, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x8f, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x65,
	0x64, 0x22, 0xe3, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x65, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x15, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x23, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x43,
	0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x5f, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x22, 0xc1,
	0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xea, 0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xf0, 0x06, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0xd6, 0x05, 0x0a, 0x05, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x75, 0x67, 0x63, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75,
	0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x67,
	0x63, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xf9, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0xea, 0x01, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x6f, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x62, 0x0a, 0x07, 0x45, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x03, 0x22, 0x69, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x44, 0x4f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a,
	0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0f, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x44, 0x4f, 0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5c, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48,
	0x65, 0x72, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x48, 0x65, 0x72, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x20,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xc0, 0x06, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x61, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x75, 0x72, 0x72, 0x5f, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x75, 0x72,
	0x72, 0x4c, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x6c, 0x61, 0x70, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x4c, 0x61, 0x70,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61,
	0x70, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x65, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x70, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c,
	0x61, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x70, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x61, 0x70, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x41, 0x76, 0x67,
	0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x41, 0x76, 0x67, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x67, 0x54, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x70, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66,
	0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x70, 0x41, 0x76, 0x67, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x6c, 0x61, 0x70, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x4c, 0x61, 0x70, 0x41, 0x76, 0x67, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe4, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x1a, 0x6b, 0x0a, 0x06, 0x54, 0x72,
	0x6f, 0x70, 0x68, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x6f, 0x70,
	0x68, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x6f, 0x70, 0x68,
	0x79, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x4f, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x6b, 0x5f, 0x45, 0x52, 0x61,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x0b, 0x6b, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x33, 0x22, 0x43, 0x0a, 0x0b, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x5f,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x22,
	0xa4, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x52, 0x61, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x6b, 0x5f, 0x45, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a,
	0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c,
	0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xc5, 0x02, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x65,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x66,
	0x6f, 0x72, 0x67, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x22, 0x52, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe1, 0x06, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x67, 0x70, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x6e, 0x47, 0x70, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x78, 0x70, 0x70, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x58, 0x70, 0x70, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x68, 0x69, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x73, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x65, 0x67, 0x69, 0x73, 0x65, 0x73,
	0x5f, 0x73, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x61, 0x65, 0x67, 0x69, 0x73, 0x65, 0x73, 0x53, 0x6e, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x65, 0x73, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x74, 0x65,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x65, 0x73, 0x65, 0x73,
	0x45, 0x61, 0x74, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x65, 0x70, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x65, 0x70, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x66, 0x69, 0x67, 0x68, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x6e, 0x48, 0x65, 0x61,
	0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x61, 0x70, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x61, 0x70, 0x69, 0x65, 0x72, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x22,
	0x2f, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xff, 0x01, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x53, 0x0a,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x61, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x47, 0x0a, 0x2b, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x54, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x2d, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xa8, 0x06, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x53, 0x4f, 0x44,
	0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x02,
	0x55, 0x49, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x75,
	0x67, 0x63, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x67, 0x63, 0x54, 0x65, 0x61, 0x6d, 0x55, 0x69,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x69,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x77, 0x65,
	0x65, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x69, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x1a, 0x39, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x61,
	0x63, 0x68, 0x1a, 0xb8, 0x02, 0x0a, 0x0e, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x12, 0x69, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x57, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x69, 0x63, 0x68, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x27, 0x6b, 0x5f,
	0x45, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52,
	0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x85, 0x03,
	0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52,
	0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x53, 0x4f, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x02, 0x55, 0x49, 0x52, 0x0a, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x3a, 0x12, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x27,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x31,
	0x12, 0x1a, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x32, 0x22, 0x1f, 0x0a, 0x1d,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x32,
	0x36, 0x34, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x3d, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0xf3, 0x03, 0x0a,
	0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x4e, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0xca, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x1a, 0x91,
	0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x39, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x19, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x44, 0x4f, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xaa, 0x06, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x61, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x61, 0x77, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x77, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x6e, 0x0a, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x45, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x0f, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x0e, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x52, 0x0a, 0x0f, 0x45, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x42,
	0x61, 0x64, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xe7, 0x04, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x57, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x6b, 0x57, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x57, 0x61, 0x67, 0x65, 0x72,
	0x73, 0x4d, 0x61, 0x78, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x5f, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x63, 0x61, 0x6e,
	0x61, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x6f,
	0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x1a, 0x76, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x3a, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x47, 0x43,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0x8a,
	0x03, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8b, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x15,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x5f, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x87, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x22, 0x3f, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x6f, 0x74,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x4d, 0x56, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x48, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4d, 0x56, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x56, 0x6f, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x56, 0x50, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x56, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x39, 0x0a, 0x1c, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x56, 0x50,
	0x56, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x56, 0x50, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x95, 0x03, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54,
	0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x61,
	0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x1a, 0xf0, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x63,
	0x61, 0x6e, 0x61, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x22, 0xce, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x61, 0x6e,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x56, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x4e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x56,
	0x4f, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x63, 0x61, 0x6e,
	0x61, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0xfa, 0x01, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x61, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x1c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x72, 0x63,
	0x61, 0x6e, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x6c, 0x79, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x24,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x56, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xf4, 0x02, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x6c, 0x61, 0x72, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65,
	0x65, 0x6b, 0x22, 0x68, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x72, 0x6b,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x72, 0x61, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x72, 0x61, 0x57, 0x6f, 0x6e, 0x22, 0x9d, 0x03, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x69,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xf0, 0x01, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x58, 0x0a, 0x12,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x66, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x0b, 0x6b, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x0a, 0x0b, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0xad,
	0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75,
	0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x1a, 0x5c, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb,
	0x01, 0x0a, 0x36, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x75,
	0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x75, 0x6d, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a, 0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x41,
	0x52, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xeb, 0x01, 0x0a,
	0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x12, 0x36, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x4c,
	0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x02, 0x0a, 0x28, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x22, 0x6d, 0x0a, 0x1f, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x27, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x53,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x07, 0x22, 0x8d, 0x01, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x75, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x63, 0x61, 0x72, 0x64, 0x44, 0x75, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x22, 0xc5, 0x02, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x07, 0x22, 0xaa, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x12,
	0x29, 0x0a, 0x11, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64,
	0x44, 0x75, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0xcd, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x22, 0xa4, 0x0d, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x65, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x30,
	0x31, 0x36, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x0c, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x41, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75,
	0x70, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x68, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32,
	0x30, 0x31, 0x36, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x78,
	0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6e,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x6f, 0x73, 0x74, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x77, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x57, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x35, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x55, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x3b, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x45, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x1a, 0x53, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0xd3, 0x0c, 0x0a, 0x27, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c,
	0x32, 0x30, 0x31, 0x36, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x5c, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46,
	0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x08, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32,
	0x30, 0x31, 0x36, 0x2e, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31,
	0x36, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x5f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x42, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c,
	0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x6f, 0x0a,
	0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x2e, 0x46, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x66, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x88,
	0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x77, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x77,
	0x6f, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x57, 0x61,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x77, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x35, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x43, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x55,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x53, 0x0a, 0x10, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0xe5,
	0x0c, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31,
	0x37, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x77, 0x61, 0x67, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37, 0x2e,
	0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31,
	0x37, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x61, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x07, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37, 0x2e,
	0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x61, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32,
	0x30, 0x31, 0x37, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6e, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x77, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x70, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x35, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x55, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a,
	0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x1a, 0x53, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0xa6, 0x0c, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54,
	0x49, 0x37, 0x2e, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x5a, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07,
	0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x37, 0x2e, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a,
	0x88, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x77, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x77, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xaf, 0x01, 0x0a, 0x08, 0x57,
	0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x1a, 0x5a, 0x0a, 0x0c,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x35, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x43, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a,
	0x55, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x53, 0x0a, 0x10, 0x46, 0x61,
	0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22,
	0xc9, 0x0b, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x54, 0x49, 0x38, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x5b, 0x0a, 0x0c, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x5f, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x54, 0x49, 0x38, 0x2e, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x52, 0x0b, 0x63, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x12,
	0x51, 0x0a, 0x08, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x38, 0x2e,
	0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x5f, 0x54, 0x49, 0x38, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x5f, 0x54, 0x49, 0x38, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x38, 0x2e, 0x42, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x5a, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49,
	0x38, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x11, 0x66, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54,
	0x49, 0x38, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x10, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0xb5, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61,
	0x72, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0xaf, 0x01,
	0x0a, 0x08, 0x57, 0x61, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x1a,
	0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x45, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x53, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x50, 0x0a, 0x22, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49,
	0x39, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x51, 0x0a,
	0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f,
	0x54, 0x49, 0x31, 0x30, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x61, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xea, 0x04, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x36, 0x12, 0x58, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30,
	0x31, 0x36, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x31,
	0x36, 0x12, 0x5e, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x32, 0x30, 0x31, 0x37, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52,
	0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31, 0x37,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x32, 0x30, 0x31,
	0x37, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x37, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54,
	0x49, 0x37, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x37, 0x12, 0x49, 0x0a, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x38, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x38, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x39, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x6c, 0x75, 0x70, 0x5f, 0x54, 0x49, 0x39, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x39, 0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x31, 0x30,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x5f, 0x54, 0x49, 0x31, 0x30, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x31, 0x30,
	0x22, 0x4a, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a,
	0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x45, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x4d, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22,
	0x45, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x4d, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x43,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x4d, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69,
	0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x76, 0x69,
	0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x8a, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x44, 0x4f,
	0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69,
	0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1c, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x69,
	0x76, 0x69, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x54,
	0x45, 0x41, 0x4d, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x4f, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x41, 0x43, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x10, 0x05, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x55, 0x6e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x23,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x55, 0x6e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x22, 0xbe, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x06, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x09, 0x68, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d,
	0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x66, 0x0a, 0x11, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x66,
	0x75, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x0b,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x77, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x26,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x25, 0x6b,
	0x5f, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xae, 0x01, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x22, 0x38, 0x0a,
	0x1b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x4f, 0x54, 0x41, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01,
	0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x98, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x28, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75,
	0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x57,
	0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x90,
	0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x41, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x44, 0x4f, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x0d, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x69,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x48, 0x65, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x19, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x43, 0x5f, 0x52, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x52,
	0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x75, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x38, 0x0a, 0x36, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x75, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbe, 0x08, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x53, 0x4f, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x53,
	0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x48,
	0x65, 0x72, 0x6f, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x48, 0x65, 0x72,
	0x6f, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x10, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x4f,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x1a, 0xfd, 0x01, 0x0a,
	0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x53, 0x4f, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x65, 0x71, 0x75, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x53, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x78, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x73, 0x48, 0x65, 0x72, 0x6f,
	0x58, 0x70, 0x12, 0x48, 0x0a, 0x15, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f,
	0x72, 0x65, 0x6c, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x53, 0x4f,
	0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x70, 0x6c, 0x75, 0x73, 0x48, 0x65,
	0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0xb4, 0x01, 0x0a,
	0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x52, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x6d, 0x0a, 0x11, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x48,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x67, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x31, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x32, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x42,
	0x41, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x33, 0x10, 0x04, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x43,
	0x4d, 0x73, 0x67, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x16,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x76, 0x67, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x76, 0x67,
	0x47, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x61, 0x76,
	0x67, 0x5f, 0x78, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x58, 0x70, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x67, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x76, 0x67, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x76, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x61, 0x76, 0x67, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x69, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x76, 0x67, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x4e, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x8c, 0x06, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49,
	0x64, 0x12, 0x68, 0x0a, 0x13, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x10, 0x68, 0x65, 0x72, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x82, 0x01, 0x0a, 0x09,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x77, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x1a, 0x83, 0x01, 0x0a, 0x08, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x65, 0x65,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0xdf, 0x02, 0x0a, 0x14, 0x48, 0x65, 0x72, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x46,
	0x0a, 0x10, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0e, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x48, 0x65, 0x72, 0x6f, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x0c, 0x68, 0x65, 0x72, 0x6f, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x0a, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x09,
	0x77, 0x65, 0x65, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x77, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x48, 0x65, 0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x41, 0x6c,
	0x6c, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x65, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x72, 0x6f,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x65, 0x6d, 0x69,
	0x65, 0x73, 0x12, 0x6b, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x72, 0x6f,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73,
	0x41, 0x6c, 0x6c, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0xb7, 0x01, 0x0a, 0x08, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x79, 0x57, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x77, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x7e, 0x0a, 0x0e, 0x52, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x58, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x72, 0x6f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x69, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x45,
	0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x68, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x02, 0x0a, 0x21, 0x43, 0x4d, 0x73,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x49, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x22, 0xb3, 0x03,
	0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x4d, 0x61, 0x70, 0x50, 0x61,
	0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x6e, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x4d, 0x61, 0x70, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0a, 0x6d, 0x61,
	0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x1a, 0xa8, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0f,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x6c, 0x74, 0x72,
	0x61, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x6c, 0x74,
	0x72, 0x61, 0x52, 0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x68, 0x61, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x2a,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61,
	0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x55,
	0x4c, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0a, 0x6d,
	0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e,
	0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x41, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72,
	0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x03, 0x32, 0x35, 0x35, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x70,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03,
	0x32, 0x35, 0x35, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65,
	0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41,
	0x5f, 0x52, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0x45,
	0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf5, 0x0c, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x6f, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x68,
	0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61,
	0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x03, 0x32, 0x35, 0x35, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x31, 0x12, 0x1f, 0x0a,
	0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x32, 0x1a, 0x42,
	0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x61, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x09, 0x6d, 0x61, 0x70,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x1a, 0x86, 0x07, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0a,
	0x6d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d,
	0x73, 0x31, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x31, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x32, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x31, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x32, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x33, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x34, 0x12, 0x33,
	0x0a, 0x16, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13,
	0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x31, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x13, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x32, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x61, 0x6c, 0x66,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x33, 0x12, 0x33, 0x0a,
	0x16, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x68,
	0x61, 0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x34, 0x12, 0x78, 0x0a, 0x11, 0x73, 0x77, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x73, 0x77, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x1d,
	0x75, 0x6c, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x19, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x52,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x3d,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x22, 0x49, 0x0a,
	0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43,
	0x61, 0x76, 0x65, 0x72, 0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd4, 0x03, 0x0a, 0x34, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72,
	0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72,
	0x6e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6c, 0x0a, 0x0c, 0x6d, 0x61, 0x70,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x61, 0x76, 0x65, 0x72, 0x6e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x48, 0x0a, 0x0a, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x32, 0x35, 0x35, 0x52, 0x0a,
	0x6d, 0x61, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x3d, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x22,
	0xaf, 0x01, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x50, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x78, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x70, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x70, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x54, 0x69, 0x70, 0x70, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x69, 0x70, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x1a, 0x54, 0x0a, 0x06, 0x54, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x09, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x74, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53,
	0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0xde, 0x05, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63,
	0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x80, 0x03, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x5f, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x33, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xa9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x10, 0x05, 0x22, 0x43, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x65,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa2, 0x03, 0x0a, 0x1e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59,
	0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x0b, 0x46, 0x65,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x50, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x22, 0xa3,
	0x01, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x44, 0x75, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55,
	0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x22, 0x42, 0x0a, 0x21, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x84, 0x03,
	0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x46, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65,
	0x22, 0x52, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73,
	0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x22, 0x7c, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x01, 0x0a,
	0x07, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x51, 0x4c, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x22, 0x9f,
	0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x7d, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a,
	0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x7d, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x65, 0x76, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x20, 0x6b, 0x5f,
	0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x44,
	0x65, 0x76, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22,
	0x7f, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x77, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0x7c, 0x0a, 0x1e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x65, 0x76, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x20, 0x6b,
	0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3b, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x62, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x28, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x1a, 0x83,
	0x01, 0x0a, 0x0c, 0x43, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0x55, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22,
	0xae, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01,
	0x22, 0x64, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x18,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x57, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x4c, 0x4f, 0x54, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x4e, 0x54,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x54,
	0x5f, 0x41, 0x46, 0x46, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x22, 0x6f, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x31, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x22, 0x76, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1f,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x02, 0x4f, 0x4e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x22,
	0x2a, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x30,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x22, 0x7e, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54,
	0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x22, 0xbc, 0x02, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x03, 0x41, 0x44, 0x44,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x72, 0x6f, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x22, 0xcb, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x22, 0x64, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x55, 0x53, 0x59, 0x10, 0x05, 0x22, 0x74, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x02, 0x0a,
	0x28, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x25, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0x40,
	0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x46, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x2b, 0x43, 0x4d, 0x73,
	0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x62, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x38, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x60, 0x0a, 0x16,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x03, 0x22, 0x6e, 0x0a, 0x34, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f,
	0x49, 0x64, 0x22, 0xf0, 0x02, 0x0a, 0x3c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x60, 0x0a, 0x14, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x68, 0x65,
	0x72, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x52, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75,
	0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x07, 0x65, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x05, 0x22, 0x1b, 0x0a, 0x19,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x41,
	0x43, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x42, 0x75, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdf,
	0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x42, 0x75, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x42, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x6f, 0x6c, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x72,
	0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x24,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x72, 0x61, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5e,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x77,
	0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x52, 0x61,
	0x64, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x7f, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54,
	0x72, 0x69, 0x76, 0x69, 0x61, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xec, 0x04, 0x0a, 0x2c,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0b,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5f, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x6b, 0x65, 0x6e, 0x1a, 0x87, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4e, 0x6f,
	0x74, 0x54, 0x6f, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x06, 0x22, 0x47, 0x0a, 0x28, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x4d, 0x52, 0x22, 0x96, 0x02, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x4d, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x65, 0x4d, 0x4d, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x89, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75,
	0x73, 0x79, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65,
	0x4e, 0x6f, 0x74, 0x54, 0x6f, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x06, 0x22, 0x9a, 0x01, 0x0a,
	0x25, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x65, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x4f, 0x57,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe4, 0x06, 0x0a,
	0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x4f, 0x57, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x47, 0x65, 0x74, 0x4f, 0x57, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x47, 0x65, 0x74, 0x4f, 0x57, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x54, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x5a, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x25, 0x0a, 0x0f,
	0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x22, 0x7e, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x43, 0x61, 0x73, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x05, 0x22, 0xdc, 0x02, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x57, 0x43, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x52, 0x12, 0x63, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x13, 0x67, 0x72, 0x69, 0x65, 0x66, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x12,
	0x67, 0x72, 0x69, 0x65, 0x66, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf7, 0x02, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x57, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f,
	0x57, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x07, 0x22, 0x22, 0x0a, 0x20,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68,
	0x69, 0x6e, 0x61, 0x53, 0x53, 0x41, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x48, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x53, 0x53, 0x41, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68, 0x69, 0x6e,
	0x61, 0x53, 0x53, 0x41, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x53, 0x53, 0x41, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x25,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x74, 0x6f, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x22, 0x54, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x50,
	0x43, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74,
	0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65,
	0x74, 0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x1a, 0x7f, 0x0a, 0x08, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x52, 0x0a,
	0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x11, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x22, 0x79, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x05, 0x22, 0xb2, 0x01,
	0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x65, 0x74, 0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x52, 0x0c, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x44, 0x50, 0x43, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x44, 0x50, 0x43,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a,
	0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x6b, 0x5f, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x6b, 0x5f, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x55, 0x6e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x19,
	0x0a, 0x15, 0x6b, 0x5f, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x08, 0x22, 0x6b, 0x0a, 0x24, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54,
	0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x22, 0xc2, 0x01, 0x0a, 0x28,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e, 0x74, 0x68, 0x42,
	0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x22, 0xa3, 0x02, 0x0a, 0x30, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x79, 0x72,
	0x69, 0x6e, 0x74, 0x68, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e, 0x74, 0x68,
	0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7f, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4e,
	0x6f, 0x53, 0x75, 0x63, 0x68, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x4e, 0x6f,
	0x50, 0x61, 0x74, 0x68, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a,
	0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x47, 0x65, 0x74, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x0b, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x64, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04,
	0x22, 0xd4, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x50, 0x61, 0x67, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x22,
	0x8d, 0x01, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x22,
	0xba, 0x02, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x67, 0x65, 0x10, 0x06, 0x22, 0xe9, 0x01, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x64, 0x0a, 0x0b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x07,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0xcf, 0x02, 0x0a, 0x23, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x61, 0x67, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x10, 0x08, 0x22, 0xa1, 0x02, 0x0a, 0x2c, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x1a, 0x9d,
	0x01, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x90,
	0x03, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47,
	0x43, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xed, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x4f, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10,
	0x0a, 0x22, 0x8f, 0x01, 0x0a, 0x2d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f,
	0x6f, 0x6b, 0x54, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x6b,
	0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x50, 0x61, 0x67, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61,
	0x67, 0x65, 0x10, 0x05, 0x22, 0x77, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0xa2, 0x02,
	0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x53, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x53, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x49, 0x74, 0x65, 0x6d, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f,
	0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x5f, 0x65, 0x4f, 0x6c, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x65, 0x72, 0x6f,
	0x10, 0x06, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x47, 0x65, 0x74, 0x48, 0x65, 0x72, 0x6f,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x22, 0x50, 0x0a,
	0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22,
	0xf7, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x61, 0x67, 0x65, 0x10, 0x05, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x53, 0x77, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x3a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xdb, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x77, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x77, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x45, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x6b, 0x5f, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x5f, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x0a,
	0x22, 0x52, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x32, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x1a, 0xb7, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x6f, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x2e, 0x45,
	0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x05, 0x6b, 0x5f, 0x65, 0x55, 0x70, 0x52,
	0x08, 0x76, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x23, 0x0a, 0x09, 0x45, 0x56, 0x6f,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x5f, 0x65, 0x55, 0x70, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x22, 0x54,
	0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x70, 0x12,
	0x33, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6c, 0x69, 0x70, 0x22, 0xe3, 0x01, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x04, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x1e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x19,
	0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68,
	0x61, 0x6c, 0x66, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x61, 0x6c, 0x66, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x54, 0x49, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x54, 0x49, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x1f, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x54, 0x49, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x27, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x54, 0x49, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x74,
	0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x44, 0x10, 0x05, 0x22, 0x41, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x2c, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f,
	0x54, 0x49, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61, 0x64,
	0x54, 0x6f, 0x54, 0x49, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a,
	0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x44, 0x10, 0x06,
	0x22, 0x82, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f,
	0x54, 0x49, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x55,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x97, 0x02,
	0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x55, 0x73, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x42, 0x61, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x49, 0x74,
	0x65, 0x6d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x44, 0x10, 0x06, 0x22, 0x85, 0x01, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f,
	0x54, 0x49, 0x44, 0x65, 0x76, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xab, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x54, 0x49, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x52, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x54, 0x49, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x81, 0x01,
	0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43,
	0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x47, 0x69, 0x66,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x20, 0x6b, 0x45,
	0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x47, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64,
	0x73, 0x22, 0xb1, 0x04, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42,
	0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42,
	0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x6f,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x36, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x87, 0x01, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2a, 0xd8, 0x01, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x02,
	0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x56, 0x65, 0x72, 0x79, 0x48, 0x69, 0x67, 0x68, 0x10, 0x03,
	0x2a, 0x56, 0x0a, 0x14, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x54, 0x41,
	0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x54, 0x41, 0x5f, 0x57,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x10, 0x01, 0x2a, 0xd1, 0x01, 0x0a, 0x1c, 0x45, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x10, 0x04, 0x2a, 0xe8, 0x01, 0x0a,
	0x20, 0x45, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x33,
	0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x65, 0x79, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x57, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x57, 0x65, 0x65, 0x6b, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x69, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x45, 0x6c, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x10, 0x03, 0x2a, 0xa7, 0x02, 0x0a, 0x17, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f,
	0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x44, 0x4f, 0x54, 0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54,
	0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x54, 0x72,
	0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x05, 0x2a, 0x8e, 0x03, 0x0a, 0x18, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48,
	0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72,
	0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x6f,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f,
	0x45, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x65, 0x6c, 0x69, 0x63, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x64, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x65, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x10, 0x07, 0x2a, 0xb8, 0x02, 0x0a, 0x16, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x44, 0x65,
	0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x53, 0x71, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x03,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x05,
	0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x65, 0x76, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x44, 0x4f,
	0x4c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x06, 0x2a, 0xdd, 0x05,
	0x0a, 0x1a, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x01,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x43, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x4f, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x10, 0x06, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x36,
	0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x08, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x09, 0x12, 0x35, 0x0a, 0x31, 0x6b,
	0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x10, 0x0b, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0d, 0x2a, 0x82, 0x02,
	0x0a, 0x13, 0x45, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b,
	0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x6b,
	0x5f, 0x65, 0x4e, 0x6f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x65, 0x48, 0x61, 0x73, 0x42, 0x69, 0x67, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x5f, 0x65, 0x4e, 0x6f, 0x47,
	0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x6b, 0x5f, 0x65, 0x43, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x10, 0x0b, 0x2a, 0xc1, 0x02, 0x0a, 0x1c, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12,
	0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54,
	0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
	0x41, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x44,
	0x4f, 0x54, 0x41, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x72, 0x69, 0x76, 0x69,
	0x61, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x6b,
	0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x72, 0x69, 0x76, 0x69,
	0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x47, 0x43,
	0x44, 0x6f, 0x77, 0x6e, 0x10, 0x05, 0x2a, 0xe3, 0x01, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x47, 0x43, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f,
	0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x3e, 0x0a,
	0x3a, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x3d, 0x0a,
	0x39, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x10, 0x03, 0x42, 0x0c, 0x5a, 0x0a,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
})

var (
	file_dota_gcmessages_client_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_proto_rawDescData []byte
)

func file_dota_gcmessages_client_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_client_proto_rawDesc), len(file_dota_gcmessages_client_proto_rawDesc)))
	})
	return file_dota_gcmessages_client_proto_rawDescData
}

var file_dota_gcmessages_client_proto_enumTypes = make([]protoimpl.EnumInfo, 81)
var file_dota_gcmessages_client_proto_msgTypes = make([]protoimpl.MessageInfo, 459)
var file_dota_gcmessages_client_proto_goTypes = []any{
	(CMsgDOTARequestMatches_SkillLevel)(0),                                      // 0: protocol.CMsgDOTARequestMatches_SkillLevel
	(DOTA_WatchReplayType)(0),                                                   // 1: protocol.DOTA_WatchReplayType
	(EItemEditorReservationResult)(0),                                           // 2: protocol.EItemEditorReservationResult
	(EWeekendTourneyRichPresenceEvent)(0),                                       // 3: protocol.EWeekendTourneyRichPresenceEvent
	(EDOTATriviaAnswerResult)(0),                                                // 4: protocol.EDOTATriviaAnswerResult
	(EPurchaseHeroRelicResult)(0),                                               // 5: protocol.EPurchaseHeroRelicResult
	(EDevEventRequestResult)(0),                                                 // 6: protocol.EDevEventRequestResult
	(ESupportEventRequestResult)(0),                                             // 7: protocol.ESupportEventRequestResult
	(EUnderDraftResponse)(0),                                                    // 8: protocol.EUnderDraftResponse
	(EDOTADraftTriviaAnswerResult)(0),                                           // 9: protocol.EDOTADraftTriviaAnswerResult
	(CMsgClientToGCUpdateComicBookStat_Type)(0),                                 // 10: protocol.CMsgClientToGCUpdateComicBookStat_Type
	(CMsgDOTAPopup_PopupID)(0),                                                  // 11: protocol.CMsgDOTAPopup.PopupID
	(CMsgDOTASubmitPlayerReportResponse_EResult)(0),                             // 12: protocol.CMsgDOTASubmitPlayerReportResponse.EResult
	(CMsgDOTASubmitPlayerReportResponseV2_EResult)(0),                           // 13: protocol.CMsgDOTASubmitPlayerReportResponseV2.EResult
	(CMsgGCNotificationsUpdate_EResult)(0),                                      // 14: protocol.CMsgGCNotificationsUpdate.EResult
	(CMsgGCPlayerInfoSubmitResponse_EResult)(0),                                 // 15: protocol.CMsgGCPlayerInfoSubmitResponse.EResult
	(CMsgGCToClientRankResponse_EResultCode)(0),                                 // 16: protocol.CMsgGCToClientRankResponse.EResultCode
	(CMsgPlayerConductScorecard_EBehaviorRating)(0),                             // 17: protocol.CMsgPlayerConductScorecard.EBehaviorRating
	(CMsgClientToGCVoteForArcanaResponse_Result)(0),                             // 18: protocol.CMsgClientToGCVoteForArcanaResponse.Result
	(CMsgDOTARedeemItemResponse_EResultCode)(0),                                 // 19: protocol.CMsgDOTARedeemItemResponse.EResultCode
	(CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult)(0),         // 20: protocol.CMsgClientToGCSelectCompendiumInGamePredictionResponse.EResult
	(CMsgClientToGCOpenPlayerCardPackResponse_Result)(0),                        // 21: protocol.CMsgClientToGCOpenPlayerCardPackResponse.Result
	(CMsgClientToGCRecyclePlayerCardResponse_Result)(0),                         // 22: protocol.CMsgClientToGCRecyclePlayerCardResponse.Result
	(CMsgClientToGCCreatePlayerCardPackResponse_Result)(0),                      // 23: protocol.CMsgClientToGCCreatePlayerCardPackResponse.Result
	(CMsgClientToGCCreateTeamPlayerCardPackResponse_Result)(0),                  // 24: protocol.CMsgClientToGCCreateTeamPlayerCardPackResponse.Result
	(CMsgDOTAAnchorPhoneNumberResponse_Result)(0),                               // 25: protocol.CMsgDOTAAnchorPhoneNumberResponse.Result
	(CMsgDOTAUnanchorPhoneNumberResponse_Result)(0),                             // 26: protocol.CMsgDOTAUnanchorPhoneNumberResponse.Result
	(CMsgDOTASelectionPriorityChoiceResponse_Result)(0),                         // 27: protocol.CMsgDOTASelectionPriorityChoiceResponse.Result
	(CMsgDOTAGameAutographRewardResponse_Result)(0),                             // 28: protocol.CMsgDOTAGameAutographRewardResponse.Result
	(CMsgDOTADestroyLobbyResponse_Result)(0),                                    // 29: protocol.CMsgDOTADestroyLobbyResponse.Result
	(CMsgPurchaseItemWithEventPointsResponse_Result)(0),                         // 30: protocol.CMsgPurchaseItemWithEventPointsResponse.Result
	(CMsgProfileResponse_EResponse)(0),                                          // 31: protocol.CMsgProfileResponse.EResponse
	(CMsgProfileUpdateResponse_Result)(0),                                       // 32: protocol.CMsgProfileUpdateResponse.Result
	(CMsgActivatePlusFreeTrialResponse_Result)(0),                               // 33: protocol.CMsgActivatePlusFreeTrialResponse.Result
	(CMsgClientToGCCavernCrawlClaimRoomResponse_Result)(0),                      // 34: protocol.CMsgClientToGCCavernCrawlClaimRoomResponse.Result
	(CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result)(0),                  // 35: protocol.CMsgClientToGCCavernCrawlUseItemOnRoomResponse.Result
	(CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result)(0),                  // 36: protocol.CMsgClientToGCCavernCrawlUseItemOnPathResponse.Result
	(CMsgClientToGCCavernCrawlRequestMapStateResponse_Result)(0),                // 37: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.Result
	(CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result)(0),            // 38: protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.Result
	(CMsgSocialFeedResponse_Result)(0),                                          // 39: protocol.CMsgSocialFeedResponse.Result
	(CMsgSocialFeedCommentsResponse_Result)(0),                                  // 40: protocol.CMsgSocialFeedCommentsResponse.Result
	(CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result)(0),                // 41: protocol.CMsgClientToGCPlayerCardSpecificPurchaseResponse.Result
	(CMsgClientToGCRequestContestVotesResponse_EResponse)(0),                    // 42: protocol.CMsgClientToGCRequestContestVotesResponse.EResponse
	(CMsgGCToClientRecordContestVoteResponse_EResult)(0),                        // 43: protocol.CMsgGCToClientRecordContestVoteResponse.EResult
	(CMsgGCToClientGetFilteredPlayersResponse_Result)(0),                        // 44: protocol.CMsgGCToClientGetFilteredPlayersResponse.Result
	(CMsgGCToClientRemoveFilteredPlayerResponse_Result)(0),                      // 45: protocol.CMsgGCToClientRemoveFilteredPlayerResponse.Result
	(CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result)(0),                // 46: protocol.CMsgGCToClientPurchaseFilteredPlayerSlotResponse.Result
	(CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result)(0),                  // 47: protocol.CMsgGCToClientUpdateFilteredPlayerNoteResponse.Result
	(CMsgClientToGCUpdatePartyBeacon_Action)(0),                                 // 48: protocol.CMsgClientToGCUpdatePartyBeacon.Action
	(CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse)(0),             // 49: protocol.CMsgGCToClientRequestActiveBeaconPartiesResponse.EResponse
	(CMsgGCToClientJoinPartyFromBeaconResponse_EResponse)(0),                    // 50: protocol.CMsgGCToClientJoinPartyFromBeaconResponse.EResponse
	(CMsgClientToGCManageFavorites_Action)(0),                                   // 51: protocol.CMsgClientToGCManageFavorites.Action
	(CMsgGCToClientManageFavoritesResponse_EResponse)(0),                        // 52: protocol.CMsgGCToClientManageFavoritesResponse.EResponse
	(CMsgGCToClientGetFavoritePlayersResponse_EResponse)(0),                     // 53: protocol.CMsgGCToClientGetFavoritePlayersResponse.EResponse
	(CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse)(0),     // 54: protocol.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse.EResponse
	(CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse)(0), // 55: protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse.EResponse
	(CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse)(0),                // 56: protocol.CMsgClientToGCSubmitPlayerMatchSurveyResponse.EResponse
	(CMsgClientToGCRequestReporterUpdatesResponse_EResponse)(0),                 // 57: protocol.CMsgClientToGCRequestReporterUpdatesResponse.EResponse
	(CMsgClientToGCRecalibrateMMRResponse_EResponse)(0),                         // 58: protocol.CMsgClientToGCRecalibrateMMRResponse.EResponse
	(CMsgClientToGCGetOWMatchDetailsResponse_EResponse)(0),                      // 59: protocol.CMsgClientToGCGetOWMatchDetailsResponse.EResponse
	(CMsgClientToGCSubmitOWConvictionResponse_EResponse)(0),                     // 60: protocol.CMsgClientToGCSubmitOWConvictionResponse.EResponse
	(CMsgClientToGCGetDPCFavoritesResponse_EResponse)(0),                        // 61: protocol.CMsgClientToGCGetDPCFavoritesResponse.EResponse
	(CMsgClientToGCSetDPCFavoriteStateResponse_EResponse)(0),                    // 62: protocol.CMsgClientToGCSetDPCFavoriteStateResponse.EResponse
	(CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse)(0),                 // 63: protocol.CMsgClientToGCSetEventActiveSeasonIDResponse.EResponse
	(CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse)(0),             // 64: protocol.CMsgClientToGCPurchaseLabyrinthBlessingsResponse.EResponse
	(CMsgClientToGCGetStickerbookResponse_EResponse)(0),                         // 65: protocol.CMsgClientToGCGetStickerbookResponse.EResponse
	(CMsgClientToGCCreateStickerbookPageResponse_EResponse)(0),                  // 66: protocol.CMsgClientToGCCreateStickerbookPageResponse.EResponse
	(CMsgClientToGCDeleteStickerbookPageResponse_EResponse)(0),                  // 67: protocol.CMsgClientToGCDeleteStickerbookPageResponse.EResponse
	(CMsgClientToGCPlaceStickersResponse_EResponse)(0),                          // 68: protocol.CMsgClientToGCPlaceStickersResponse.EResponse
	(CMsgClientToGCPlaceCollectionStickersResponse_EResponse)(0),                // 69: protocol.CMsgClientToGCPlaceCollectionStickersResponse.EResponse
	(CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse)(0),               // 70: protocol.CMsgClientToGCOrderStickerbookTeamPageResponse.EResponse
	(CMsgClientToGCSetHeroStickerResponse_EResponse)(0),                         // 71: protocol.CMsgClientToGCSetHeroStickerResponse.EResponse
	(CMsgClientToGCGetHeroStickersResponse_EResponse)(0),                        // 72: protocol.CMsgClientToGCGetHeroStickersResponse.EResponse
	(CMsgClientToGCSetFavoritePageResponse_EResponse)(0),                        // 73: protocol.CMsgClientToGCSetFavoritePageResponse.EResponse
	(CMsgClientToGCClaimSwagResponse_EResponse)(0),                              // 74: protocol.CMsgClientToGCClaimSwagResponse.EResponse
	(CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType)(0),      // 75: protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse.Vote.EVoteType
	(CMsgGCToClientUploadMatchClipResponse_EResponse)(0),                        // 76: protocol.CMsgGCToClientUploadMatchClipResponse.EResponse
	(CMsgGCToClientMapStatsResponse_EResponse)(0),                               // 77: protocol.CMsgGCToClientMapStatsResponse.EResponse
	(CMsgClientToGCRoadToTIGetQuestsResponse_EResponse)(0),                      // 78: protocol.CMsgClientToGCRoadToTIGetQuestsResponse.EResponse
	(CMsgClientToGCRoadToTIGetActiveQuestResponse_EResponse)(0),                 // 79: protocol.CMsgClientToGCRoadToTIGetActiveQuestResponse.EResponse
	(CMsgClientToGCRoadToTIUseItemResponse_EResponse)(0),                        // 80: protocol.CMsgClientToGCRoadToTIUseItemResponse.EResponse
	(*CMsgClientSuspended)(nil),                                                 // 81: protocol.CMsgClientSuspended
	(*CMsgBalancedShuffleLobby)(nil),                                            // 82: protocol.CMsgBalancedShuffleLobby
	(*CMsgInitialQuestionnaireResponse)(nil),                                    // 83: protocol.CMsgInitialQuestionnaireResponse
	(*CMsgDOTARequestMatchesResponse)(nil),                                      // 84: protocol.CMsgDOTARequestMatchesResponse
	(*CMsgDOTAPopup)(nil),                                                       // 85: protocol.CMsgDOTAPopup
	(*CMsgDOTAReportsRemainingRequest)(nil),                                     // 86: protocol.CMsgDOTAReportsRemainingRequest
	(*CMsgDOTAReportsRemainingResponse)(nil),                                    // 87: protocol.CMsgDOTAReportsRemainingResponse
	(*CMsgDOTASubmitPlayerReport)(nil),                                          // 88: protocol.CMsgDOTASubmitPlayerReport
	(*CMsgDOTASubmitPlayerReportResponse)(nil),                                  // 89: protocol.CMsgDOTASubmitPlayerReportResponse
	(*CMsgDOTASubmitPlayerAvoidRequest)(nil),                                    // 90: protocol.CMsgDOTASubmitPlayerAvoidRequest
	(*CMsgDOTASubmitPlayerAvoidRequestResponse)(nil),                            // 91: protocol.CMsgDOTASubmitPlayerAvoidRequestResponse
	(*CMsgDOTASubmitPlayerReportV2)(nil),                                        // 92: protocol.CMsgDOTASubmitPlayerReportV2
	(*CMsgDOTASubmitPlayerReportResponseV2)(nil),                                // 93: protocol.CMsgDOTASubmitPlayerReportResponseV2
	(*CMsgDOTASubmitLobbyMVPVote)(nil),                                          // 94: protocol.CMsgDOTASubmitLobbyMVPVote
	(*CMsgDOTASubmitLobbyMVPVoteResponse)(nil),                                  // 95: protocol.CMsgDOTASubmitLobbyMVPVoteResponse
	(*CMsgDOTALobbyMVPAwarded)(nil),                                             // 96: protocol.CMsgDOTALobbyMVPAwarded
	(*CMsgDOTAKickedFromMatchmakingQueue)(nil),                                  // 97: protocol.CMsgDOTAKickedFromMatchmakingQueue
	(*CMsgGCMatchDetailsRequest)(nil),                                           // 98: protocol.CMsgGCMatchDetailsRequest
	(*CMsgGCMatchDetailsResponse)(nil),                                          // 99: protocol.CMsgGCMatchDetailsResponse
	(*CMsgDOTAProfileTickets)(nil),                                              // 100: protocol.CMsgDOTAProfileTickets
	(*CMsgClientToGCGetProfileTickets)(nil),                                     // 101: protocol.CMsgClientToGCGetProfileTickets
	(*CMsgGCToClientPartySearchInvites)(nil),                                    // 102: protocol.CMsgGCToClientPartySearchInvites
	(*CMsgDOTAWelcome)(nil),                                                     // 103: protocol.CMsgDOTAWelcome
	(*CSODOTAGameHeroFavorites)(nil),                                            // 104: protocol.CSODOTAGameHeroFavorites
	(*CMsgDOTAMatchVotes)(nil),                                                  // 105: protocol.CMsgDOTAMatchVotes
	(*CMsgMatchmakingMatchGroupInfo)(nil),                                       // 106: protocol.CMsgMatchmakingMatchGroupInfo
	(*CMsgDOTAMatchmakingStatsRequest)(nil),                                     // 107: protocol.CMsgDOTAMatchmakingStatsRequest
	(*CMsgDOTAMatchmakingStatsResponse)(nil),                                    // 108: protocol.CMsgDOTAMatchmakingStatsResponse
	(*CMsgDOTAUpdateMatchmakingStats)(nil),                                      // 109: protocol.CMsgDOTAUpdateMatchmakingStats
	(*CMsgDOTAUpdateMatchManagementStats)(nil),                                  // 110: protocol.CMsgDOTAUpdateMatchManagementStats
	(*CMsgDOTASetMatchHistoryAccess)(nil),                                       // 111: protocol.CMsgDOTASetMatchHistoryAccess
	(*CMsgDOTASetMatchHistoryAccessResponse)(nil),                               // 112: protocol.CMsgDOTASetMatchHistoryAccessResponse
	(*CMsgDOTANotifyAccountFlagsChange)(nil),                                    // 113: protocol.CMsgDOTANotifyAccountFlagsChange
	(*CMsgDOTASetProfilePrivacy)(nil),                                           // 114: protocol.CMsgDOTASetProfilePrivacy
	(*CMsgDOTASetProfilePrivacyResponse)(nil),                                   // 115: protocol.CMsgDOTASetProfilePrivacyResponse
	(*CMsgUpgradeLeagueItem)(nil),                                               // 116: protocol.CMsgUpgradeLeagueItem
	(*CMsgUpgradeLeagueItemResponse)(nil),                                       // 117: protocol.CMsgUpgradeLeagueItemResponse
	(*CMsgGCWatchDownloadedReplay)(nil),                                         // 118: protocol.CMsgGCWatchDownloadedReplay
	(*CMsgClientsRejoinChatChannels)(nil),                                       // 119: protocol.CMsgClientsRejoinChatChannels
	(*CMsgGCGetHeroStandings)(nil),                                              // 120: protocol.CMsgGCGetHeroStandings
	(*CMsgGCGetHeroStandingsResponse)(nil),                                      // 121: protocol.CMsgGCGetHeroStandingsResponse
	(*CMatchPlayerTimedStatAverages)(nil),                                       // 122: protocol.CMatchPlayerTimedStatAverages
	(*CMatchPlayerTimedStatStdDeviations)(nil),                                  // 123: protocol.CMatchPlayerTimedStatStdDeviations
	(*CMsgGCGetHeroTimedStatsResponse)(nil),                                     // 124: protocol.CMsgGCGetHeroTimedStatsResponse
	(*CMsgGCItemEditorReservationsRequest)(nil),                                 // 125: protocol.CMsgGCItemEditorReservationsRequest
	(*CMsgGCItemEditorReservation)(nil),                                         // 126: protocol.CMsgGCItemEditorReservation
	(*CMsgGCItemEditorReservationsResponse)(nil),                                // 127: protocol.CMsgGCItemEditorReservationsResponse
	(*CMsgGCItemEditorReserveItemDef)(nil),                                      // 128: protocol.CMsgGCItemEditorReserveItemDef
	(*CMsgGCItemEditorReserveItemDefResponse)(nil),                              // 129: protocol.CMsgGCItemEditorReserveItemDefResponse
	(*CMsgGCItemEditorReleaseReservation)(nil),                                  // 130: protocol.CMsgGCItemEditorReleaseReservation
	(*CMsgGCItemEditorReleaseReservationResponse)(nil),                          // 131: protocol.CMsgGCItemEditorReleaseReservationResponse
	(*CMsgFlipLobbyTeams)(nil),                                                  // 132: protocol.CMsgFlipLobbyTeams
	(*CMsgGCLobbyUpdateBroadcastChannelInfo)(nil),                               // 133: protocol.CMsgGCLobbyUpdateBroadcastChannelInfo
	(*CMsgDOTAClaimEventActionData)(nil),                                        // 134: protocol.CMsgDOTAClaimEventActionData
	(*CMsgDOTAClaimEventAction)(nil),                                            // 135: protocol.CMsgDOTAClaimEventAction
	(*CMsgClientToGCClaimEventActionUsingItem)(nil),                             // 136: protocol.CMsgClientToGCClaimEventActionUsingItem
	(*CMsgClientToGCClaimEventActionUsingItemResponse)(nil),                     // 137: protocol.CMsgClientToGCClaimEventActionUsingItemResponse
	(*CMsgGCToClientClaimEventActionUsingItemCompleted)(nil),                    // 138: protocol.CMsgGCToClientClaimEventActionUsingItemCompleted
	(*CMsgDOTAGetEventPoints)(nil),                                              // 139: protocol.CMsgDOTAGetEventPoints
	(*CMsgDOTAGetEventPointsResponse)(nil),                                      // 140: protocol.CMsgDOTAGetEventPointsResponse
	(*CMsgDOTAGetPeriodicResource)(nil),                                         // 141: protocol.CMsgDOTAGetPeriodicResource
	(*CMsgDOTAGetPeriodicResourceResponse)(nil),                                 // 142: protocol.CMsgDOTAGetPeriodicResourceResponse
	(*CMsgDOTAPeriodicResourceUpdated)(nil),                                     // 143: protocol.CMsgDOTAPeriodicResourceUpdated
	(*CMsgDOTACompendiumSelection)(nil),                                         // 144: protocol.CMsgDOTACompendiumSelection
	(*CMsgDOTACompendiumSelectionResponse)(nil),                                 // 145: protocol.CMsgDOTACompendiumSelectionResponse
	(*CMsgDOTACompendiumRemoveAllSelections)(nil),                               // 146: protocol.CMsgDOTACompendiumRemoveAllSelections
	(*CMsgDOTACompendiumRemoveAllSelectionsResponse)(nil),                       // 147: protocol.CMsgDOTACompendiumRemoveAllSelectionsResponse
	(*CMsgDOTACompendiumData)(nil),                                              // 148: protocol.CMsgDOTACompendiumData
	(*CMsgDOTACompendiumDataRequest)(nil),                                       // 149: protocol.CMsgDOTACompendiumDataRequest
	(*CMsgDOTACompendiumDataResponse)(nil),                                      // 150: protocol.CMsgDOTACompendiumDataResponse
	(*CMsgDOTAGetPlayerMatchHistory)(nil),                                       // 151: protocol.CMsgDOTAGetPlayerMatchHistory
	(*CMsgDOTAGetPlayerMatchHistoryResponse)(nil),                               // 152: protocol.CMsgDOTAGetPlayerMatchHistoryResponse
	(*CMsgGCNotificationsRequest)(nil),                                          // 153: protocol.CMsgGCNotificationsRequest
	(*CMsgGCNotifications_Notification)(nil),                                    // 154: protocol.CMsgGCNotifications_Notification
	(*CMsgGCNotificationsUpdate)(nil),                                           // 155: protocol.CMsgGCNotificationsUpdate
	(*CMsgGCNotificationsResponse)(nil),                                         // 156: protocol.CMsgGCNotificationsResponse
	(*CMsgGCNotificationsMarkReadRequest)(nil),                                  // 157: protocol.CMsgGCNotificationsMarkReadRequest
	(*CMsgGCPlayerInfoSubmit)(nil),                                              // 158: protocol.CMsgGCPlayerInfoSubmit
	(*CMsgGCPlayerInfoSubmitResponse)(nil),                                      // 159: protocol.CMsgGCPlayerInfoSubmitResponse
	(*CMsgDOTAEmoticonAccessSDO)(nil),                                           // 160: protocol.CMsgDOTAEmoticonAccessSDO
	(*CMsgClientToGCEmoticonDataRequest)(nil),                                   // 161: protocol.CMsgClientToGCEmoticonDataRequest
	(*CMsgGCToClientEmoticonData)(nil),                                          // 162: protocol.CMsgGCToClientEmoticonData
	(*CMsgGCToClientTournamentItemDrop)(nil),                                    // 163: protocol.CMsgGCToClientTournamentItemDrop
	(*CMsgClientToGCGetAllHeroOrder)(nil),                                       // 164: protocol.CMsgClientToGCGetAllHeroOrder
	(*CMsgClientToGCGetAllHeroOrderResponse)(nil),                               // 165: protocol.CMsgClientToGCGetAllHeroOrderResponse
	(*CMsgClientToGCGetAllHeroProgress)(nil),                                    // 166: protocol.CMsgClientToGCGetAllHeroProgress
	(*CMsgClientToGCGetAllHeroProgressResponse)(nil),                            // 167: protocol.CMsgClientToGCGetAllHeroProgressResponse
	(*CMsgClientToGCGetTrophyList)(nil),                                         // 168: protocol.CMsgClientToGCGetTrophyList
	(*CMsgClientToGCGetTrophyListResponse)(nil),                                 // 169: protocol.CMsgClientToGCGetTrophyListResponse
	(*CMsgGCToClientTrophyAwarded)(nil),                                         // 170: protocol.CMsgGCToClientTrophyAwarded
	(*CMsgClientToGCRankRequest)(nil),                                           // 171: protocol.CMsgClientToGCRankRequest
	(*CMsgGCToClientRankResponse)(nil),                                          // 172: protocol.CMsgGCToClientRankResponse
	(*CMsgGCToClientRankUpdate)(nil),                                            // 173: protocol.CMsgGCToClientRankUpdate
	(*CMsgClientToGCGetProfileCard)(nil),                                        // 174: protocol.CMsgClientToGCGetProfileCard
	(*CMsgClientToGCSetProfileCardSlots)(nil),                                   // 175: protocol.CMsgClientToGCSetProfileCardSlots
	(*CMsgClientToGCGetProfileCardStats)(nil),                                   // 176: protocol.CMsgClientToGCGetProfileCardStats
	(*CMsgClientToGCCreateHeroStatue)(nil),                                      // 177: protocol.CMsgClientToGCCreateHeroStatue
	(*CMsgGCToClientHeroStatueCreateResult)(nil),                                // 178: protocol.CMsgGCToClientHeroStatueCreateResult
	(*CMsgClientToGCPlayerStatsRequest)(nil),                                    // 179: protocol.CMsgClientToGCPlayerStatsRequest
	(*CMsgGCToClientPlayerStatsResponse)(nil),                                   // 180: protocol.CMsgGCToClientPlayerStatsResponse
	(*CMsgClientToGCCustomGamesFriendsPlayedRequest)(nil),                       // 181: protocol.CMsgClientToGCCustomGamesFriendsPlayedRequest
	(*CMsgGCToClientCustomGamesFriendsPlayedResponse)(nil),                      // 182: protocol.CMsgGCToClientCustomGamesFriendsPlayedResponse
	(*CMsgClientToGCSocialFeedPostCommentRequest)(nil),                          // 183: protocol.CMsgClientToGCSocialFeedPostCommentRequest
	(*CMsgGCToClientSocialFeedPostCommentResponse)(nil),                         // 184: protocol.CMsgGCToClientSocialFeedPostCommentResponse
	(*CMsgClientToGCSocialFeedPostMessageRequest)(nil),                          // 185: protocol.CMsgClientToGCSocialFeedPostMessageRequest
	(*CMsgGCToClientSocialFeedPostMessageResponse)(nil),                         // 186: protocol.CMsgGCToClientSocialFeedPostMessageResponse
	(*CMsgClientToGCFriendsPlayedCustomGameRequest)(nil),                        // 187: protocol.CMsgClientToGCFriendsPlayedCustomGameRequest
	(*CMsgGCToClientFriendsPlayedCustomGameResponse)(nil),                       // 188: protocol.CMsgGCToClientFriendsPlayedCustomGameResponse
	(*CMsgDOTAPartyRichPresence)(nil),                                           // 189: protocol.CMsgDOTAPartyRichPresence
	(*CMsgDOTALobbyRichPresence)(nil),                                           // 190: protocol.CMsgDOTALobbyRichPresence
	(*CMsgDOTACustomGameListenServerStartedLoading)(nil),                        // 191: protocol.CMsgDOTACustomGameListenServerStartedLoading
	(*CMsgDOTACustomGameClientFinishedLoading)(nil),                             // 192: protocol.CMsgDOTACustomGameClientFinishedLoading
	(*CMsgClientToGCApplyGemCombiner)(nil),                                      // 193: protocol.CMsgClientToGCApplyGemCombiner
	(*CMsgClientToGCH264Unsupported)(nil),                                       // 194: protocol.CMsgClientToGCH264Unsupported
	(*CMsgClientToGCGetQuestProgress)(nil),                                      // 195: protocol.CMsgClientToGCGetQuestProgress
	(*CMsgClientToGCGetQuestProgressResponse)(nil),                              // 196: protocol.CMsgClientToGCGetQuestProgressResponse
	(*CMsgGCToClientMatchSignedOut)(nil),                                        // 197: protocol.CMsgGCToClientMatchSignedOut
	(*CMsgGCGetHeroStatsHistory)(nil),                                           // 198: protocol.CMsgGCGetHeroStatsHistory
	(*CMsgGCGetHeroStatsHistoryResponse)(nil),                                   // 199: protocol.CMsgGCGetHeroStatsHistoryResponse
	(*CMsgPlayerConductScorecardRequest)(nil),                                   // 200: protocol.CMsgPlayerConductScorecardRequest
	(*CMsgPlayerConductScorecard)(nil),                                          // 201: protocol.CMsgPlayerConductScorecard
	(*CMsgClientToGCWageringRequest)(nil),                                       // 202: protocol.CMsgClientToGCWageringRequest
	(*CMsgGCToClientWageringResponse)(nil),                                      // 203: protocol.CMsgGCToClientWageringResponse
	(*CMsgGCToClientWageringUpdate)(nil),                                        // 204: protocol.CMsgGCToClientWageringUpdate
	(*CMsgGCToClientArcanaVotesUpdate)(nil),                                     // 205: protocol.CMsgGCToClientArcanaVotesUpdate
	(*CMsgClientToGCGetEventGoals)(nil),                                         // 206: protocol.CMsgClientToGCGetEventGoals
	(*CMsgEventGoals)(nil),                                                      // 207: protocol.CMsgEventGoals
	(*CMsgGCToGCLeaguePredictions)(nil),                                         // 208: protocol.CMsgGCToGCLeaguePredictions
	(*CMsgPredictionRankings)(nil),                                              // 209: protocol.CMsgPredictionRankings
	(*CMsgPredictionResults)(nil),                                               // 210: protocol.CMsgPredictionResults
	(*CMsgClientToGCHasPlayerVotedForMVP)(nil),                                  // 211: protocol.CMsgClientToGCHasPlayerVotedForMVP
	(*CMsgClientToGCHasPlayerVotedForMVPResponse)(nil),                          // 212: protocol.CMsgClientToGCHasPlayerVotedForMVPResponse
	(*CMsgClientToGCVoteForMVP)(nil),                                            // 213: protocol.CMsgClientToGCVoteForMVP
	(*CMsgClientToGCVoteForMVPResponse)(nil),                                    // 214: protocol.CMsgClientToGCVoteForMVPResponse
	(*CMsgClientToGCMVPVoteTimeout)(nil),                                        // 215: protocol.CMsgClientToGCMVPVoteTimeout
	(*CMsgClientToGCMVPVoteTimeoutResponse)(nil),                                // 216: protocol.CMsgClientToGCMVPVoteTimeoutResponse
	(*CMsgClientToGCTeammateStatsRequest)(nil),                                  // 217: protocol.CMsgClientToGCTeammateStatsRequest
	(*CMsgClientToGCTeammateStatsResponse)(nil),                                 // 218: protocol.CMsgClientToGCTeammateStatsResponse
	(*CMsgClientToGCVoteForArcana)(nil),                                         // 219: protocol.CMsgClientToGCVoteForArcana
	(*CMsgClientToGCVoteForArcanaResponse)(nil),                                 // 220: protocol.CMsgClientToGCVoteForArcanaResponse
	(*CMsgClientToGCRequestArcanaVotesRemaining)(nil),                           // 221: protocol.CMsgClientToGCRequestArcanaVotesRemaining
	(*CMsgClientToGCRequestArcanaVotesRemainingResponse)(nil),                   // 222: protocol.CMsgClientToGCRequestArcanaVotesRemainingResponse
	(*CMsgClientToGCRequestEventPointLogV2)(nil),                                // 223: protocol.CMsgClientToGCRequestEventPointLogV2
	(*CMsgClientToGCRequestEventPointLogResponseV2)(nil),                        // 224: protocol.CMsgClientToGCRequestEventPointLogResponseV2
	(*CMsgClientToGCPublishUserStat)(nil),                                       // 225: protocol.CMsgClientToGCPublishUserStat
	(*CMsgClientToGCRequestSlarkGameResult)(nil),                                // 226: protocol.CMsgClientToGCRequestSlarkGameResult
	(*CMsgClientToGCRequestSlarkGameResultResponse)(nil),                        // 227: protocol.CMsgClientToGCRequestSlarkGameResultResponse
	(*CMsgGCToClientQuestProgressUpdated)(nil),                                  // 228: protocol.CMsgGCToClientQuestProgressUpdated
	(*CMsgDOTARedeemItem)(nil),                                                  // 229: protocol.CMsgDOTARedeemItem
	(*CMsgDOTARedeemItemResponse)(nil),                                          // 230: protocol.CMsgDOTARedeemItemResponse
	(*CMsgClientToGCSelectCompendiumInGamePrediction)(nil),                      // 231: protocol.CMsgClientToGCSelectCompendiumInGamePrediction
	(*CMsgClientToGCSelectCompendiumInGamePredictionResponse)(nil),              // 232: protocol.CMsgClientToGCSelectCompendiumInGamePredictionResponse
	(*CMsgClientToGCOpenPlayerCardPack)(nil),                                    // 233: protocol.CMsgClientToGCOpenPlayerCardPack
	(*CMsgClientToGCOpenPlayerCardPackResponse)(nil),                            // 234: protocol.CMsgClientToGCOpenPlayerCardPackResponse
	(*CMsgClientToGCRecyclePlayerCard)(nil),                                     // 235: protocol.CMsgClientToGCRecyclePlayerCard
	(*CMsgClientToGCRecyclePlayerCardResponse)(nil),                             // 236: protocol.CMsgClientToGCRecyclePlayerCardResponse
	(*CMsgClientToGCCreatePlayerCardPack)(nil),                                  // 237: protocol.CMsgClientToGCCreatePlayerCardPack
	(*CMsgClientToGCCreatePlayerCardPackResponse)(nil),                          // 238: protocol.CMsgClientToGCCreatePlayerCardPackResponse
	(*CMsgClientToGCCreateTeamPlayerCardPack)(nil),                              // 239: protocol.CMsgClientToGCCreateTeamPlayerCardPack
	(*CMsgClientToGCCreateTeamPlayerCardPackResponse)(nil),                      // 240: protocol.CMsgClientToGCCreateTeamPlayerCardPackResponse
	(*CMsgGCToClientBattlePassRollup_International2016)(nil),                    // 241: protocol.CMsgGCToClientBattlePassRollup_International2016
	(*CMsgGCToClientBattlePassRollup_Fall2016)(nil),                             // 242: protocol.CMsgGCToClientBattlePassRollup_Fall2016
	(*CMsgGCToClientBattlePassRollup_Winter2017)(nil),                           // 243: protocol.CMsgGCToClientBattlePassRollup_Winter2017
	(*CMsgGCToClientBattlePassRollup_TI7)(nil),                                  // 244: protocol.CMsgGCToClientBattlePassRollup_TI7
	(*CMsgGCToClientBattlePassRollup_TI8)(nil),                                  // 245: protocol.CMsgGCToClientBattlePassRollup_TI8
	(*CMsgGCToClientBattlePassRollup_TI9)(nil),                                  // 246: protocol.CMsgGCToClientBattlePassRollup_TI9
	(*CMsgGCToClientBattlePassRollup_TI10)(nil),                                 // 247: protocol.CMsgGCToClientBattlePassRollup_TI10
	(*CMsgGCToClientBattlePassRollupRequest)(nil),                               // 248: protocol.CMsgGCToClientBattlePassRollupRequest
	(*CMsgGCToClientBattlePassRollupResponse)(nil),                              // 249: protocol.CMsgGCToClientBattlePassRollupResponse
	(*CMsgGCToClientBattlePassRollupListRequest)(nil),                           // 250: protocol.CMsgGCToClientBattlePassRollupListRequest
	(*CMsgGCToClientBattlePassRollupListResponse)(nil),                          // 251: protocol.CMsgGCToClientBattlePassRollupListResponse
	(*CMsgClientToGCTransferSeasonalMMRRequest)(nil),                            // 252: protocol.CMsgClientToGCTransferSeasonalMMRRequest
	(*CMsgClientToGCTransferSeasonalMMRResponse)(nil),                           // 253: protocol.CMsgClientToGCTransferSeasonalMMRResponse
	(*CMsgGCToClientPlaytestStatus)(nil),                                        // 254: protocol.CMsgGCToClientPlaytestStatus
	(*CMsgClientToGCJoinPlaytest)(nil),                                          // 255: protocol.CMsgClientToGCJoinPlaytest
	(*CMsgClientToGCJoinPlaytestResponse)(nil),                                  // 256: protocol.CMsgClientToGCJoinPlaytestResponse
	(*CMsgDOTASetFavoriteTeam)(nil),                                             // 257: protocol.CMsgDOTASetFavoriteTeam
	(*CMsgDOTATriviaCurrentQuestions)(nil),                                      // 258: protocol.CMsgDOTATriviaCurrentQuestions
	(*CMsgDOTASubmitTriviaQuestionAnswer)(nil),                                  // 259: protocol.CMsgDOTASubmitTriviaQuestionAnswer
	(*CMsgDOTASubmitTriviaQuestionAnswerResponse)(nil),                          // 260: protocol.CMsgDOTASubmitTriviaQuestionAnswerResponse
	(*CMsgDOTAStartTriviaSession)(nil),                                          // 261: protocol.CMsgDOTAStartTriviaSession
	(*CMsgDOTAStartTriviaSessionResponse)(nil),                                  // 262: protocol.CMsgDOTAStartTriviaSessionResponse
	(*CMsgDOTAAnchorPhoneNumberRequest)(nil),                                    // 263: protocol.CMsgDOTAAnchorPhoneNumberRequest
	(*CMsgDOTAAnchorPhoneNumberResponse)(nil),                                   // 264: protocol.CMsgDOTAAnchorPhoneNumberResponse
	(*CMsgDOTAUnanchorPhoneNumberRequest)(nil),                                  // 265: protocol.CMsgDOTAUnanchorPhoneNumberRequest
	(*CMsgDOTAUnanchorPhoneNumberResponse)(nil),                                 // 266: protocol.CMsgDOTAUnanchorPhoneNumberResponse
	(*CMsgGCToClientCommendNotification)(nil),                                   // 267: protocol.CMsgGCToClientCommendNotification
	(*CMsgDOTAClientToGCQuickStatsRequest)(nil),                                 // 268: protocol.CMsgDOTAClientToGCQuickStatsRequest
	(*CMsgDOTAClientToGCQuickStatsResponse)(nil),                                // 269: protocol.CMsgDOTAClientToGCQuickStatsResponse
	(*CMsgDOTASelectionPriorityChoiceRequest)(nil),                              // 270: protocol.CMsgDOTASelectionPriorityChoiceRequest
	(*CMsgDOTASelectionPriorityChoiceResponse)(nil),                             // 271: protocol.CMsgDOTASelectionPriorityChoiceResponse
	(*CMsgDOTAGameAutographReward)(nil),                                         // 272: protocol.CMsgDOTAGameAutographReward
	(*CMsgDOTAGameAutographRewardResponse)(nil),                                 // 273: protocol.CMsgDOTAGameAutographRewardResponse
	(*CMsgDOTADestroyLobbyRequest)(nil),                                         // 274: protocol.CMsgDOTADestroyLobbyRequest
	(*CMsgDOTADestroyLobbyResponse)(nil),                                        // 275: protocol.CMsgDOTADestroyLobbyResponse
	(*CMsgDOTAGetRecentPlayTimeFriendsRequest)(nil),                             // 276: protocol.CMsgDOTAGetRecentPlayTimeFriendsRequest
	(*CMsgDOTAGetRecentPlayTimeFriendsResponse)(nil),                            // 277: protocol.CMsgDOTAGetRecentPlayTimeFriendsResponse
	(*CMsgPurchaseItemWithEventPoints)(nil),                                     // 278: protocol.CMsgPurchaseItemWithEventPoints
	(*CMsgPurchaseItemWithEventPointsResponse)(nil),                             // 279: protocol.CMsgPurchaseItemWithEventPointsResponse
	(*CMsgPurchaseHeroRandomRelic)(nil),                                         // 280: protocol.CMsgPurchaseHeroRandomRelic
	(*CMsgPurchaseHeroRandomRelicResponse)(nil),                                 // 281: protocol.CMsgPurchaseHeroRandomRelicResponse
	(*CMsgClientToGCRequestPlusWeeklyChallengeResult)(nil),                      // 282: protocol.CMsgClientToGCRequestPlusWeeklyChallengeResult
	(*CMsgClientToGCRequestPlusWeeklyChallengeResultResponse)(nil),              // 283: protocol.CMsgClientToGCRequestPlusWeeklyChallengeResultResponse
	(*CMsgProfileRequest)(nil),                                                  // 284: protocol.CMsgProfileRequest
	(*CMsgProfileResponse)(nil),                                                 // 285: protocol.CMsgProfileResponse
	(*CMsgProfileUpdate)(nil),                                                   // 286: protocol.CMsgProfileUpdate
	(*CMsgProfileUpdateResponse)(nil),                                           // 287: protocol.CMsgProfileUpdateResponse
	(*CMsgTalentWinRates)(nil),                                                  // 288: protocol.CMsgTalentWinRates
	(*CMsgGlobalHeroAverages)(nil),                                              // 289: protocol.CMsgGlobalHeroAverages
	(*CMsgHeroGlobalDataRequest)(nil),                                           // 290: protocol.CMsgHeroGlobalDataRequest
	(*CMsgHeroGlobalDataResponse)(nil),                                          // 291: protocol.CMsgHeroGlobalDataResponse
	(*CMsgHeroGlobalDataAllHeroes)(nil),                                         // 292: protocol.CMsgHeroGlobalDataAllHeroes
	(*CMsgHeroGlobalDataHeroesAlliesAndEnemies)(nil),                            // 293: protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies
	(*CMsgPrivateMetadataKeyRequest)(nil),                                       // 294: protocol.CMsgPrivateMetadataKeyRequest
	(*CMsgPrivateMetadataKeyResponse)(nil),                                      // 295: protocol.CMsgPrivateMetadataKeyResponse
	(*CMsgActivatePlusFreeTrialResponse)(nil),                                   // 296: protocol.CMsgActivatePlusFreeTrialResponse
	(*CMsgGCToClientCavernCrawlMapPathCompleted)(nil),                           // 297: protocol.CMsgGCToClientCavernCrawlMapPathCompleted
	(*CMsgGCToClientCavernCrawlMapUpdated)(nil),                                 // 298: protocol.CMsgGCToClientCavernCrawlMapUpdated
	(*CMsgClientToGCCavernCrawlClaimRoom)(nil),                                  // 299: protocol.CMsgClientToGCCavernCrawlClaimRoom
	(*CMsgClientToGCCavernCrawlClaimRoomResponse)(nil),                          // 300: protocol.CMsgClientToGCCavernCrawlClaimRoomResponse
	(*CMsgClientToGCCavernCrawlUseItemOnRoom)(nil),                              // 301: protocol.CMsgClientToGCCavernCrawlUseItemOnRoom
	(*CMsgClientToGCCavernCrawlUseItemOnRoomResponse)(nil),                      // 302: protocol.CMsgClientToGCCavernCrawlUseItemOnRoomResponse
	(*CMsgClientToGCCavernCrawlUseItemOnPath)(nil),                              // 303: protocol.CMsgClientToGCCavernCrawlUseItemOnPath
	(*CMsgClientToGCCavernCrawlUseItemOnPathResponse)(nil),                      // 304: protocol.CMsgClientToGCCavernCrawlUseItemOnPathResponse
	(*CMsgClientToGCCavernCrawlRequestMapState)(nil),                            // 305: protocol.CMsgClientToGCCavernCrawlRequestMapState
	(*CMsgClientToGCCavernCrawlRequestMapStateResponse)(nil),                    // 306: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse
	(*CMsgClientToGCCavernCrawlGetClaimedRoomCount)(nil),                        // 307: protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCount
	(*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse)(nil),                // 308: protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse
	(*CMsgDOTAMutationList)(nil),                                                // 309: protocol.CMsgDOTAMutationList
	(*CMsgEventTipsSummaryRequest)(nil),                                         // 310: protocol.CMsgEventTipsSummaryRequest
	(*CMsgEventTipsSummaryResponse)(nil),                                        // 311: protocol.CMsgEventTipsSummaryResponse
	(*CMsgSocialFeedRequest)(nil),                                               // 312: protocol.CMsgSocialFeedRequest
	(*CMsgSocialFeedResponse)(nil),                                              // 313: protocol.CMsgSocialFeedResponse
	(*CMsgSocialFeedCommentsRequest)(nil),                                       // 314: protocol.CMsgSocialFeedCommentsRequest
	(*CMsgSocialFeedCommentsResponse)(nil),                                      // 315: protocol.CMsgSocialFeedCommentsResponse
	(*CMsgClientToGCPlayerCardSpecificPurchaseRequest)(nil),                     // 316: protocol.CMsgClientToGCPlayerCardSpecificPurchaseRequest
	(*CMsgClientToGCPlayerCardSpecificPurchaseResponse)(nil),                    // 317: protocol.CMsgClientToGCPlayerCardSpecificPurchaseResponse
	(*CMsgClientToGCRequestContestVotes)(nil),                                   // 318: protocol.CMsgClientToGCRequestContestVotes
	(*CMsgClientToGCRequestContestVotesResponse)(nil),                           // 319: protocol.CMsgClientToGCRequestContestVotesResponse
	(*CMsgClientToGCRecordContestVote)(nil),                                     // 320: protocol.CMsgClientToGCRecordContestVote
	(*CMsgGCToClientRecordContestVoteResponse)(nil),                             // 321: protocol.CMsgGCToClientRecordContestVoteResponse
	(*CMsgDevGrantEventPoints)(nil),                                             // 322: protocol.CMsgDevGrantEventPoints
	(*CMsgDevGrantEventPointsResponse)(nil),                                     // 323: protocol.CMsgDevGrantEventPointsResponse
	(*CMsgDevGrantEventAction)(nil),                                             // 324: protocol.CMsgDevGrantEventAction
	(*CMsgDevGrantEventActionResponse)(nil),                                     // 325: protocol.CMsgDevGrantEventActionResponse
	(*CMsgDevDeleteEventActions)(nil),                                           // 326: protocol.CMsgDevDeleteEventActions
	(*CMsgDevDeleteEventActionsResponse)(nil),                                   // 327: protocol.CMsgDevDeleteEventActionsResponse
	(*CMsgDevResetEventState)(nil),                                              // 328: protocol.CMsgDevResetEventState
	(*CMsgDevResetEventStateResponse)(nil),                                      // 329: protocol.CMsgDevResetEventStateResponse
	(*CMsgConsumeEventSupportGrantItem)(nil),                                    // 330: protocol.CMsgConsumeEventSupportGrantItem
	(*CMsgConsumeEventSupportGrantItemResponse)(nil),                            // 331: protocol.CMsgConsumeEventSupportGrantItemResponse
	(*CMsgClientToGCGetFilteredPlayers)(nil),                                    // 332: protocol.CMsgClientToGCGetFilteredPlayers
	(*CMsgGCToClientGetFilteredPlayersResponse)(nil),                            // 333: protocol.CMsgGCToClientGetFilteredPlayersResponse
	(*CMsgClientToGCRemoveFilteredPlayer)(nil),                                  // 334: protocol.CMsgClientToGCRemoveFilteredPlayer
	(*CMsgGCToClientRemoveFilteredPlayerResponse)(nil),                          // 335: protocol.CMsgGCToClientRemoveFilteredPlayerResponse
	(*CMsgClientToGCPurchaseFilteredPlayerSlot)(nil),                            // 336: protocol.CMsgClientToGCPurchaseFilteredPlayerSlot
	(*CMsgGCToClientPurchaseFilteredPlayerSlotResponse)(nil),                    // 337: protocol.CMsgGCToClientPurchaseFilteredPlayerSlotResponse
	(*CMsgClientToGCUpdateFilteredPlayerNote)(nil),                              // 338: protocol.CMsgClientToGCUpdateFilteredPlayerNote
	(*CMsgGCToClientUpdateFilteredPlayerNoteResponse)(nil),                      // 339: protocol.CMsgGCToClientUpdateFilteredPlayerNoteResponse
	(*CMsgPartySearchPlayer)(nil),                                               // 340: protocol.CMsgPartySearchPlayer
	(*CMsgGCToClientPlayerBeaconState)(nil),                                     // 341: protocol.CMsgGCToClientPlayerBeaconState
	(*CMsgGCToClientPartyBeaconUpdate)(nil),                                     // 342: protocol.CMsgGCToClientPartyBeaconUpdate
	(*CMsgClientToGCUpdatePartyBeacon)(nil),                                     // 343: protocol.CMsgClientToGCUpdatePartyBeacon
	(*CMsgClientToGCRequestActiveBeaconParties)(nil),                            // 344: protocol.CMsgClientToGCRequestActiveBeaconParties
	(*CMsgGCToClientRequestActiveBeaconPartiesResponse)(nil),                    // 345: protocol.CMsgGCToClientRequestActiveBeaconPartiesResponse
	(*CMsgClientToGCJoinPartyFromBeacon)(nil),                                   // 346: protocol.CMsgClientToGCJoinPartyFromBeacon
	(*CMsgGCToClientJoinPartyFromBeaconResponse)(nil),                           // 347: protocol.CMsgGCToClientJoinPartyFromBeaconResponse
	(*CMsgClientToGCManageFavorites)(nil),                                       // 348: protocol.CMsgClientToGCManageFavorites
	(*CMsgGCToClientManageFavoritesResponse)(nil),                               // 349: protocol.CMsgGCToClientManageFavoritesResponse
	(*CMsgClientToGCGetFavoritePlayers)(nil),                                    // 350: protocol.CMsgClientToGCGetFavoritePlayers
	(*CMsgGCToClientGetFavoritePlayersResponse)(nil),                            // 351: protocol.CMsgGCToClientGetFavoritePlayersResponse
	(*CMsgGCToClientPartySearchInvite)(nil),                                     // 352: protocol.CMsgGCToClientPartySearchInvite
	(*CMsgClientToGCVerifyFavoritePlayers)(nil),                                 // 353: protocol.CMsgClientToGCVerifyFavoritePlayers
	(*CMsgGCToClientVerifyFavoritePlayersResponse)(nil),                         // 354: protocol.CMsgGCToClientVerifyFavoritePlayersResponse
	(*CMsgClientToGCRequestPlayerRecentAccomplishments)(nil),                    // 355: protocol.CMsgClientToGCRequestPlayerRecentAccomplishments
	(*CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse)(nil),            // 356: protocol.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse
	(*CMsgClientToGCRequestPlayerHeroRecentAccomplishments)(nil),                // 357: protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishments
	(*CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse)(nil),        // 358: protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse
	(*CMsgClientToGCSubmitPlayerMatchSurvey)(nil),                               // 359: protocol.CMsgClientToGCSubmitPlayerMatchSurvey
	(*CMsgClientToGCSubmitPlayerMatchSurveyResponse)(nil),                       // 360: protocol.CMsgClientToGCSubmitPlayerMatchSurveyResponse
	(*CMsgGCToClientVACReminder)(nil),                                           // 361: protocol.CMsgGCToClientVACReminder
	(*CMsgClientToGCUnderDraftRequest)(nil),                                     // 362: protocol.CMsgClientToGCUnderDraftRequest
	(*CMsgClientToGCUnderDraftResponse)(nil),                                    // 363: protocol.CMsgClientToGCUnderDraftResponse
	(*CMsgClientToGCUnderDraftReroll)(nil),                                      // 364: protocol.CMsgClientToGCUnderDraftReroll
	(*CMsgClientToGCUnderDraftRerollResponse)(nil),                              // 365: protocol.CMsgClientToGCUnderDraftRerollResponse
	(*CMsgClientToGCUnderDraftBuy)(nil),                                         // 366: protocol.CMsgClientToGCUnderDraftBuy
	(*CMsgGCToClientGuildUnderDraftGoldUpdated)(nil),                            // 367: protocol.CMsgGCToClientGuildUnderDraftGoldUpdated
	(*CMsgClientToGCUnderDraftBuyResponse)(nil),                                 // 368: protocol.CMsgClientToGCUnderDraftBuyResponse
	(*CMsgClientToGCUnderDraftRollBackBench)(nil),                               // 369: protocol.CMsgClientToGCUnderDraftRollBackBench
	(*CMsgClientToGCUnderDraftRollBackBenchResponse)(nil),                       // 370: protocol.CMsgClientToGCUnderDraftRollBackBenchResponse
	(*CMsgClientToGCUnderDraftSell)(nil),                                        // 371: protocol.CMsgClientToGCUnderDraftSell
	(*CMsgClientToGCUnderDraftSellResponse)(nil),                                // 372: protocol.CMsgClientToGCUnderDraftSellResponse
	(*CMsgClientToGCUnderDraftRedeemReward)(nil),                                // 373: protocol.CMsgClientToGCUnderDraftRedeemReward
	(*CMsgClientToGCUnderDraftRedeemRewardResponse)(nil),                        // 374: protocol.CMsgClientToGCUnderDraftRedeemRewardResponse
	(*CMsgClientToGCSubmitDraftTriviaMatchAnswer)(nil),                          // 375: protocol.CMsgClientToGCSubmitDraftTriviaMatchAnswer
	(*CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse)(nil),                  // 376: protocol.CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse
	(*CMsgDraftTriviaVoteCount)(nil),                                            // 377: protocol.CMsgDraftTriviaVoteCount
	(*CMsgClientToGCRequestReporterUpdates)(nil),                                // 378: protocol.CMsgClientToGCRequestReporterUpdates
	(*CMsgClientToGCRequestReporterUpdatesResponse)(nil),                        // 379: protocol.CMsgClientToGCRequestReporterUpdatesResponse
	(*CMsgClientToGCAcknowledgeReporterUpdates)(nil),                            // 380: protocol.CMsgClientToGCAcknowledgeReporterUpdates
	(*CMsgClientToGCRecalibrateMMR)(nil),                                        // 381: protocol.CMsgClientToGCRecalibrateMMR
	(*CMsgClientToGCRecalibrateMMRResponse)(nil),                                // 382: protocol.CMsgClientToGCRecalibrateMMRResponse
	(*CMsgDOTAPostGameItemAwardNotification)(nil),                               // 383: protocol.CMsgDOTAPostGameItemAwardNotification
	(*CMsgClientToGCGetOWMatchDetails)(nil),                                     // 384: protocol.CMsgClientToGCGetOWMatchDetails
	(*CMsgClientToGCGetOWMatchDetailsResponse)(nil),                             // 385: protocol.CMsgClientToGCGetOWMatchDetailsResponse
	(*CMsgClientToGCSubmitOWConviction)(nil),                                    // 386: protocol.CMsgClientToGCSubmitOWConviction
	(*CMsgClientToGCSubmitOWConvictionResponse)(nil),                            // 387: protocol.CMsgClientToGCSubmitOWConvictionResponse
	(*CMsgClientToGCChinaSSAURLRequest)(nil),                                    // 388: protocol.CMsgClientToGCChinaSSAURLRequest
	(*CMsgClientToGCChinaSSAURLResponse)(nil),                                   // 389: protocol.CMsgClientToGCChinaSSAURLResponse
	(*CMsgClientToGCChinaSSAAcceptedRequest)(nil),                               // 390: protocol.CMsgClientToGCChinaSSAAcceptedRequest
	(*CMsgClientToGCChinaSSAAcceptedResponse)(nil),                              // 391: protocol.CMsgClientToGCChinaSSAAcceptedResponse
	(*CMsgGCToClientOverwatchCasesAvailable)(nil),                               // 392: protocol.CMsgGCToClientOverwatchCasesAvailable
	(*CMsgClientToGCStartWatchingOverwatch)(nil),                                // 393: protocol.CMsgClientToGCStartWatchingOverwatch
	(*CMsgClientToGCStopWatchingOverwatch)(nil),                                 // 394: protocol.CMsgClientToGCStopWatchingOverwatch
	(*CMsgClientToGCOverwatchReplayError)(nil),                                  // 395: protocol.CMsgClientToGCOverwatchReplayError
	(*CMsgClientToGCGetDPCFavorites)(nil),                                       // 396: protocol.CMsgClientToGCGetDPCFavorites
	(*CMsgClientToGCGetDPCFavoritesResponse)(nil),                               // 397: protocol.CMsgClientToGCGetDPCFavoritesResponse
	(*CMsgClientToGCSetDPCFavoriteState)(nil),                                   // 398: protocol.CMsgClientToGCSetDPCFavoriteState
	(*CMsgClientToGCSetDPCFavoriteStateResponse)(nil),                           // 399: protocol.CMsgClientToGCSetDPCFavoriteStateResponse
	(*CMsgClientToGCSetEventActiveSeasonID)(nil),                                // 400: protocol.CMsgClientToGCSetEventActiveSeasonID
	(*CMsgClientToGCSetEventActiveSeasonIDResponse)(nil),                        // 401: protocol.CMsgClientToGCSetEventActiveSeasonIDResponse
	(*CMsgClientToGCPurchaseLabyrinthBlessings)(nil),                            // 402: protocol.CMsgClientToGCPurchaseLabyrinthBlessings
	(*CMsgClientToGCPurchaseLabyrinthBlessingsResponse)(nil),                    // 403: protocol.CMsgClientToGCPurchaseLabyrinthBlessingsResponse
	(*CMsgClientToGCGetStickerbookRequest)(nil),                                 // 404: protocol.CMsgClientToGCGetStickerbookRequest
	(*CMsgClientToGCGetStickerbookResponse)(nil),                                // 405: protocol.CMsgClientToGCGetStickerbookResponse
	(*CMsgClientToGCCreateStickerbookPageRequest)(nil),                          // 406: protocol.CMsgClientToGCCreateStickerbookPageRequest
	(*CMsgClientToGCCreateStickerbookPageResponse)(nil),                         // 407: protocol.CMsgClientToGCCreateStickerbookPageResponse
	(*CMsgClientToGCDeleteStickerbookPageRequest)(nil),                          // 408: protocol.CMsgClientToGCDeleteStickerbookPageRequest
	(*CMsgClientToGCDeleteStickerbookPageResponse)(nil),                         // 409: protocol.CMsgClientToGCDeleteStickerbookPageResponse
	(*CMsgClientToGCPlaceStickersRequest)(nil),                                  // 410: protocol.CMsgClientToGCPlaceStickersRequest
	(*CMsgClientToGCPlaceStickersResponse)(nil),                                 // 411: protocol.CMsgClientToGCPlaceStickersResponse
	(*CMsgClientToGCPlaceCollectionStickersRequest)(nil),                        // 412: protocol.CMsgClientToGCPlaceCollectionStickersRequest
	(*CMsgClientToGCPlaceCollectionStickersResponse)(nil),                       // 413: protocol.CMsgClientToGCPlaceCollectionStickersResponse
	(*CMsgClientToGCOrderStickerbookTeamPageRequest)(nil),                       // 414: protocol.CMsgClientToGCOrderStickerbookTeamPageRequest
	(*CMsgClientToGCOrderStickerbookTeamPageResponse)(nil),                      // 415: protocol.CMsgClientToGCOrderStickerbookTeamPageResponse
	(*CMsgClientToGCSetHeroSticker)(nil),                                        // 416: protocol.CMsgClientToGCSetHeroSticker
	(*CMsgClientToGCSetHeroStickerResponse)(nil),                                // 417: protocol.CMsgClientToGCSetHeroStickerResponse
	(*CMsgClientToGCGetHeroStickers)(nil),                                       // 418: protocol.CMsgClientToGCGetHeroStickers
	(*CMsgClientToGCGetHeroStickersResponse)(nil),                               // 419: protocol.CMsgClientToGCGetHeroStickersResponse
	(*CMsgClientToGCSetFavoritePage)(nil),                                       // 420: protocol.CMsgClientToGCSetFavoritePage
	(*CMsgClientToGCSetFavoritePageResponse)(nil),                               // 421: protocol.CMsgClientToGCSetFavoritePageResponse
	(*CMsgClientToGCClaimSwag)(nil),                                             // 422: protocol.CMsgClientToGCClaimSwag
	(*CMsgClientToGCClaimSwagResponse)(nil),                                     // 423: protocol.CMsgClientToGCClaimSwagResponse
	(*CMsgClientToGCCollectorsCacheAvailableDataRequest)(nil),                   // 424: protocol.CMsgClientToGCCollectorsCacheAvailableDataRequest
	(*CMsgGCToClientCollectorsCacheAvailableDataResponse)(nil),                  // 425: protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse
	(*CMsgClientToGCUploadMatchClip)(nil),                                       // 426: protocol.CMsgClientToGCUploadMatchClip
	(*CMsgGCToClientUploadMatchClipResponse)(nil),                               // 427: protocol.CMsgGCToClientUploadMatchClipResponse
	(*CMsgClientToGCMapStatsRequest)(nil),                                       // 428: protocol.CMsgClientToGCMapStatsRequest
	(*CMsgGCToClientMapStatsResponse)(nil),                                      // 429: protocol.CMsgGCToClientMapStatsResponse
	(*CMsgRoadToTIAssignedQuest)(nil),                                           // 430: protocol.CMsgRoadToTIAssignedQuest
	(*CMsgRoadToTIUserData)(nil),                                                // 431: protocol.CMsgRoadToTIUserData
	(*CMsgClientToGCRoadToTIGetQuests)(nil),                                     // 432: protocol.CMsgClientToGCRoadToTIGetQuests
	(*CMsgClientToGCRoadToTIGetQuestsResponse)(nil),                             // 433: protocol.CMsgClientToGCRoadToTIGetQuestsResponse
	(*CMsgClientToGCRoadToTIGetActiveQuest)(nil),                                // 434: protocol.CMsgClientToGCRoadToTIGetActiveQuest
	(*CMsgClientToGCRoadToTIGetActiveQuestResponse)(nil),                        // 435: protocol.CMsgClientToGCRoadToTIGetActiveQuestResponse
	(*CMsgGCToClientRoadToTIQuestDataUpdated)(nil),                              // 436: protocol.CMsgGCToClientRoadToTIQuestDataUpdated
	(*CMsgClientToGCRoadToTIUseItem)(nil),                                       // 437: protocol.CMsgClientToGCRoadToTIUseItem
	(*CMsgClientToGCRoadToTIUseItemResponse)(nil),                               // 438: protocol.CMsgClientToGCRoadToTIUseItemResponse
	(*CMsgClientToGCRoadToTIDevForceQuest)(nil),                                 // 439: protocol.CMsgClientToGCRoadToTIDevForceQuest
	(*CMsgLobbyRoadToTIMatchQuestData)(nil),                                     // 440: protocol.CMsgLobbyRoadToTIMatchQuestData
	(*CMsgClientToGCNewBloomGift)(nil),                                          // 441: protocol.CMsgClientToGCNewBloomGift
	(*CMsgClientToGCNewBloomGiftResponse)(nil),                                  // 442: protocol.CMsgClientToGCNewBloomGiftResponse
	(*CMsgClientToGCSetBannedHeroes)(nil),                                       // 443: protocol.CMsgClientToGCSetBannedHeroes
	(*CMsgClientToGCUpdateComicBookStats)(nil),                                  // 444: protocol.CMsgClientToGCUpdateComicBookStats
	(*CMsgDOTARequestMatchesResponse_Series)(nil),                               // 445: protocol.CMsgDOTARequestMatchesResponse.Series
	(*CMsgDOTAProfileTickets_LeaguePass)(nil),                                   // 446: protocol.CMsgDOTAProfileTickets.LeaguePass
	(*CMsgDOTAWelcome_CExtraMsg)(nil),                                           // 447: protocol.CMsgDOTAWelcome.CExtraMsg
	(*CMsgDOTAMatchVotes_PlayerVote)(nil),                                       // 448: protocol.CMsgDOTAMatchVotes.PlayerVote
	(*CMsgGCGetHeroStandingsResponse_Hero)(nil),                                 // 449: protocol.CMsgGCGetHeroStandingsResponse.Hero
	(*CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer)(nil),                 // 450: protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer
	(*CMsgGCGetHeroTimedStatsResponse_RankChunkedStats)(nil),                    // 451: protocol.CMsgGCGetHeroTimedStatsResponse.RankChunkedStats
	(*CMsgDOTAClaimEventActionData_GrantItemGiftData)(nil),                      // 452: protocol.CMsgDOTAClaimEventActionData.GrantItemGiftData
	(*CMsgDOTAGetEventPointsResponse_Action)(nil),                               // 453: protocol.CMsgDOTAGetEventPointsResponse.Action
	(*CMsgDOTAGetPlayerMatchHistoryResponse_Match)(nil),                         // 454: protocol.CMsgDOTAGetPlayerMatchHistoryResponse.Match
	(*CMsgClientToGCGetTrophyListResponse_Trophy)(nil),                          // 455: protocol.CMsgClientToGCGetTrophyListResponse.Trophy
	(*CMsgClientToGCSetProfileCardSlots_CardSlot)(nil),                          // 456: protocol.CMsgClientToGCSetProfileCardSlots.CardSlot
	(*CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame)(nil),           // 457: protocol.CMsgGCToClientCustomGamesFriendsPlayedResponse.CustomGame
	(*CMsgDOTAPartyRichPresence_Member)(nil),                                    // 458: protocol.CMsgDOTAPartyRichPresence.Member
	(*CMsgDOTAPartyRichPresence_WeekendTourney)(nil),                            // 459: protocol.CMsgDOTAPartyRichPresence.WeekendTourney
	(*CMsgClientToGCGetQuestProgressResponse_Challenge)(nil),                    // 460: protocol.CMsgClientToGCGetQuestProgressResponse.Challenge
	(*CMsgClientToGCGetQuestProgressResponse_Quest)(nil),                        // 461: protocol.CMsgClientToGCGetQuestProgressResponse.Quest
	(*CMsgEventGoals_EventGoal)(nil),                                            // 462: protocol.CMsgEventGoals.EventGoal
	(*CMsgPredictionRankings_PredictionLine)(nil),                               // 463: protocol.CMsgPredictionRankings.PredictionLine
	(*CMsgPredictionRankings_Prediction)(nil),                                   // 464: protocol.CMsgPredictionRankings.Prediction
	(*CMsgPredictionResults_ResultBreakdown)(nil),                               // 465: protocol.CMsgPredictionResults.ResultBreakdown
	(*CMsgPredictionResults_Result)(nil),                                        // 466: protocol.CMsgPredictionResults.Result
	(*CMsgClientToGCTeammateStatsResponse_TeammateStat)(nil),                    // 467: protocol.CMsgClientToGCTeammateStatsResponse.TeammateStat
	(*CMsgClientToGCRequestEventPointLogResponseV2_LogEntry)(nil),               // 468: protocol.CMsgClientToGCRequestEventPointLogResponseV2.LogEntry
	(*CMsgGCToClientQuestProgressUpdated_Challenge)(nil),                        // 469: protocol.CMsgGCToClientQuestProgressUpdated.Challenge
	(*CMsgClientToGCSelectCompendiumInGamePrediction_Prediction)(nil),           // 470: protocol.CMsgClientToGCSelectCompendiumInGamePrediction.Prediction
	(*CMsgGCToClientBattlePassRollup_International2016_Questlines)(nil),         // 471: protocol.CMsgGCToClientBattlePassRollup_International2016.Questlines
	(*CMsgGCToClientBattlePassRollup_International2016_Wagering)(nil),           // 472: protocol.CMsgGCToClientBattlePassRollup_International2016.Wagering
	(*CMsgGCToClientBattlePassRollup_International2016_Achievements)(nil),       // 473: protocol.CMsgGCToClientBattlePassRollup_International2016.Achievements
	(*CMsgGCToClientBattlePassRollup_International2016_BattleCup)(nil),          // 474: protocol.CMsgGCToClientBattlePassRollup_International2016.BattleCup
	(*CMsgGCToClientBattlePassRollup_International2016_Predictions)(nil),        // 475: protocol.CMsgGCToClientBattlePassRollup_International2016.Predictions
	(*CMsgGCToClientBattlePassRollup_International2016_Bracket)(nil),            // 476: protocol.CMsgGCToClientBattlePassRollup_International2016.Bracket
	(*CMsgGCToClientBattlePassRollup_International2016_PlayerCard)(nil),         // 477: protocol.CMsgGCToClientBattlePassRollup_International2016.PlayerCard
	(*CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge)(nil),   // 478: protocol.CMsgGCToClientBattlePassRollup_International2016.FantasyChallenge
	(*CMsgGCToClientBattlePassRollup_Fall2016_Questlines)(nil),                  // 479: protocol.CMsgGCToClientBattlePassRollup_Fall2016.Questlines
	(*CMsgGCToClientBattlePassRollup_Fall2016_Wagering)(nil),                    // 480: protocol.CMsgGCToClientBattlePassRollup_Fall2016.Wagering
	(*CMsgGCToClientBattlePassRollup_Fall2016_Achievements)(nil),                // 481: protocol.CMsgGCToClientBattlePassRollup_Fall2016.Achievements
	(*CMsgGCToClientBattlePassRollup_Fall2016_BattleCup)(nil),                   // 482: protocol.CMsgGCToClientBattlePassRollup_Fall2016.BattleCup
	(*CMsgGCToClientBattlePassRollup_Fall2016_Predictions)(nil),                 // 483: protocol.CMsgGCToClientBattlePassRollup_Fall2016.Predictions
	(*CMsgGCToClientBattlePassRollup_Fall2016_Bracket)(nil),                     // 484: protocol.CMsgGCToClientBattlePassRollup_Fall2016.Bracket
	(*CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard)(nil),                  // 485: protocol.CMsgGCToClientBattlePassRollup_Fall2016.PlayerCard
	(*CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge)(nil),            // 486: protocol.CMsgGCToClientBattlePassRollup_Fall2016.FantasyChallenge
	(*CMsgGCToClientBattlePassRollup_Winter2017_Questlines)(nil),                // 487: protocol.CMsgGCToClientBattlePassRollup_Winter2017.Questlines
	(*CMsgGCToClientBattlePassRollup_Winter2017_Wagering)(nil),                  // 488: protocol.CMsgGCToClientBattlePassRollup_Winter2017.Wagering
	(*CMsgGCToClientBattlePassRollup_Winter2017_Achievements)(nil),              // 489: protocol.CMsgGCToClientBattlePassRollup_Winter2017.Achievements
	(*CMsgGCToClientBattlePassRollup_Winter2017_BattleCup)(nil),                 // 490: protocol.CMsgGCToClientBattlePassRollup_Winter2017.BattleCup
	(*CMsgGCToClientBattlePassRollup_Winter2017_Predictions)(nil),               // 491: protocol.CMsgGCToClientBattlePassRollup_Winter2017.Predictions
	(*CMsgGCToClientBattlePassRollup_Winter2017_Bracket)(nil),                   // 492: protocol.CMsgGCToClientBattlePassRollup_Winter2017.Bracket
	(*CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard)(nil),                // 493: protocol.CMsgGCToClientBattlePassRollup_Winter2017.PlayerCard
	(*CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge)(nil),          // 494: protocol.CMsgGCToClientBattlePassRollup_Winter2017.FantasyChallenge
	(*CMsgGCToClientBattlePassRollup_TI7_Questlines)(nil),                       // 495: protocol.CMsgGCToClientBattlePassRollup_TI7.Questlines
	(*CMsgGCToClientBattlePassRollup_TI7_Wagering)(nil),                         // 496: protocol.CMsgGCToClientBattlePassRollup_TI7.Wagering
	(*CMsgGCToClientBattlePassRollup_TI7_Achievements)(nil),                     // 497: protocol.CMsgGCToClientBattlePassRollup_TI7.Achievements
	(*CMsgGCToClientBattlePassRollup_TI7_BattleCup)(nil),                        // 498: protocol.CMsgGCToClientBattlePassRollup_TI7.BattleCup
	(*CMsgGCToClientBattlePassRollup_TI7_Predictions)(nil),                      // 499: protocol.CMsgGCToClientBattlePassRollup_TI7.Predictions
	(*CMsgGCToClientBattlePassRollup_TI7_Bracket)(nil),                          // 500: protocol.CMsgGCToClientBattlePassRollup_TI7.Bracket
	(*CMsgGCToClientBattlePassRollup_TI7_PlayerCard)(nil),                       // 501: protocol.CMsgGCToClientBattlePassRollup_TI7.PlayerCard
	(*CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge)(nil),                 // 502: protocol.CMsgGCToClientBattlePassRollup_TI7.FantasyChallenge
	(*CMsgGCToClientBattlePassRollup_TI8_CavernCrawl)(nil),                      // 503: protocol.CMsgGCToClientBattlePassRollup_TI8.CavernCrawl
	(*CMsgGCToClientBattlePassRollup_TI8_Wagering)(nil),                         // 504: protocol.CMsgGCToClientBattlePassRollup_TI8.Wagering
	(*CMsgGCToClientBattlePassRollup_TI8_Achievements)(nil),                     // 505: protocol.CMsgGCToClientBattlePassRollup_TI8.Achievements
	(*CMsgGCToClientBattlePassRollup_TI8_Predictions)(nil),                      // 506: protocol.CMsgGCToClientBattlePassRollup_TI8.Predictions
	(*CMsgGCToClientBattlePassRollup_TI8_Bracket)(nil),                          // 507: protocol.CMsgGCToClientBattlePassRollup_TI8.Bracket
	(*CMsgGCToClientBattlePassRollup_TI8_PlayerCard)(nil),                       // 508: protocol.CMsgGCToClientBattlePassRollup_TI8.PlayerCard
	(*CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge)(nil),                 // 509: protocol.CMsgGCToClientBattlePassRollup_TI8.FantasyChallenge
	(*CMsgGCToClientBattlePassRollupListResponse_EventInfo)(nil),                // 510: protocol.CMsgGCToClientBattlePassRollupListResponse.EventInfo
	(*CMsgDOTAClientToGCQuickStatsResponse_SimpleStats)(nil),                    // 511: protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	(*CMsgProfileResponse_FeaturedHero)(nil),                                    // 512: protocol.CMsgProfileResponse.FeaturedHero
	(*CMsgProfileResponse_MatchInfo)(nil),                                       // 513: protocol.CMsgProfileResponse.MatchInfo
	(*CMsgHeroGlobalDataResponse_GraphData)(nil),                                // 514: protocol.CMsgHeroGlobalDataResponse.GraphData
	(*CMsgHeroGlobalDataResponse_WeekData)(nil),                                 // 515: protocol.CMsgHeroGlobalDataResponse.WeekData
	(*CMsgHeroGlobalDataResponse_HeroDataPerRankChunk)(nil),                     // 516: protocol.CMsgHeroGlobalDataResponse.HeroDataPerRankChunk
	(*CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData)(nil),                   // 517: protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies.HeroData
	(*CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData)(nil),             // 518: protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies.RankedHeroData
	(*CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo)(nil),         // 519: protocol.CMsgGCToClientCavernCrawlMapPathCompleted.CompletedPathInfo
	(*CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge)(nil),   // 520: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.SwappedChallenge
	(*CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem)(nil),      // 521: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.InventoryItem
	(*CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap)(nil),        // 522: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.TreasureMap
	(*CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant)(nil),         // 523: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.MapVariant
	(*CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant)(nil),     // 524: protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.MapVariant
	(*CMsgDOTAMutationList_Mutation)(nil),                                       // 525: protocol.CMsgDOTAMutationList.Mutation
	(*CMsgEventTipsSummaryResponse_Tipper)(nil),                                 // 526: protocol.CMsgEventTipsSummaryResponse.Tipper
	(*CMsgSocialFeedResponse_FeedEvent)(nil),                                    // 527: protocol.CMsgSocialFeedResponse.FeedEvent
	(*CMsgSocialFeedCommentsResponse_FeedComment)(nil),                          // 528: protocol.CMsgSocialFeedCommentsResponse.FeedComment
	(*CMsgClientToGCRequestContestVotesResponse_ItemVote)(nil),                  // 529: protocol.CMsgClientToGCRequestContestVotesResponse.ItemVote
	(*CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry)(nil),               // 530: protocol.CMsgGCToClientGetFilteredPlayersResponse.CFilterEntry
	(*CMsgGCToClientVerifyFavoritePlayersResponse_Result)(nil),                  // 531: protocol.CMsgGCToClientVerifyFavoritePlayersResponse.Result
	(*CMsgClientToGCRequestReporterUpdatesResponse_ReporterUpdate)(nil),         // 532: protocol.CMsgClientToGCRequestReporterUpdatesResponse.ReporterUpdate
	(*CMsgClientToGCGetOWMatchDetailsResponse_Marker)(nil),                      // 533: protocol.CMsgClientToGCGetOWMatchDetailsResponse.Marker
	(*CMsgClientToGCGetDPCFavoritesResponse_Favorite)(nil),                      // 534: protocol.CMsgClientToGCGetDPCFavoritesResponse.Favorite
	(*CMsgClientToGCPlaceStickersRequest_StickerItem)(nil),                      // 535: protocol.CMsgClientToGCPlaceStickersRequest.StickerItem
	(*CMsgClientToGCPlaceCollectionStickersRequest_Slot)(nil),                   // 536: protocol.CMsgClientToGCPlaceCollectionStickersRequest.Slot
	(*CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote)(nil),             // 537: protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse.Vote
	(*CMsgClientToGCUpdateComicBookStats_SingleStat)(nil),                       // 538: protocol.CMsgClientToGCUpdateComicBookStats.SingleStat
	(*CMsgClientToGCUpdateComicBookStats_LanguageStats)(nil),                    // 539: protocol.CMsgClientToGCUpdateComicBookStats.LanguageStats
	(*CMsgDOTAMatch)(nil),                                                       // 540: protocol.CMsgDOTAMatch
	(MatchType)(0),                                                              // 541: protocol.MatchType
	(DOTAMatchVote)(0),                                                          // 542: protocol.DOTAMatchVote
	(EEvent)(0),                                                                 // 543: protocol.EEvent
	(*CExtraMsgBlock)(nil),                                                      // 544: protocol.CExtraMsgBlock
	(EMatchGroupServerStatus)(0),                                                // 545: protocol.EMatchGroupServerStatus
	(EEventActionScoreMode)(0),                                                  // 546: protocol.EEventActionScoreMode
	(*CMsgDOTAClaimEventActionResponse)(nil),                                    // 547: protocol.CMsgDOTAClaimEventActionResponse
	(ERankType)(0),                                                              // 548: protocol.ERankType
	(CSODOTAParty_State)(0),                                                     // 549: protocol.CSODOTAParty.State
	(CSODOTALobby_State)(0),                                                     // 550: protocol.CSODOTALobby.State
	(DOTA_GameMode)(0),                                                          // 551: protocol.DOTA_GameMode
	(*CMsgDOTASDOHeroStatsHistory)(nil),                                         // 552: protocol.CMsgDOTASDOHeroStatsHistory
	(*CMsgArcanaVoteMatchVotes)(nil),                                            // 553: protocol.CMsgArcanaVoteMatchVotes
	(ELeagueRegion)(0),                                                          // 554: protocol.ELeagueRegion
	(*CMsgDOTATriviaQuestion)(nil),                                              // 555: protocol.CMsgDOTATriviaQuestion
	(DOTASelectionPriorityChoice)(0),                                            // 556: protocol.DOTASelectionPriorityChoice
	(EHeroRelicRarity)(0),                                                       // 557: protocol.EHeroRelicRarity
	(*CSOEconItem)(nil),                                                         // 558: protocol.CSOEconItem
	(*CMsgSuccessfulHero)(nil),                                                  // 559: protocol.CMsgSuccessfulHero
	(*CMsgRecentMatchInfo)(nil),                                                 // 560: protocol.CMsgRecentMatchInfo
	(*CMsgStickerbookPage)(nil),                                                 // 561: protocol.CMsgStickerbookPage
	(*CPartySearchClientParty)(nil),                                             // 562: protocol.CPartySearchClientParty
	(*CMsgPlayerRecentAccomplishments)(nil),                                     // 563: protocol.CMsgPlayerRecentAccomplishments
	(*CMsgPlayerHeroRecentAccomplishments)(nil),                                 // 564: protocol.CMsgPlayerHeroRecentAccomplishments
	(*CMsgUnderDraftData)(nil),                                                  // 565: protocol.CMsgUnderDraftData
	(EOverwatchReportReason)(0),                                                 // 566: protocol.EOverwatchReportReason
	(EOverwatchConviction)(0),                                                   // 567: protocol.EOverwatchConviction
	(EDPCFavoriteType)(0),                                                       // 568: protocol.EDPCFavoriteType
	(*CMsgStickerbook)(nil),                                                     // 569: protocol.CMsgStickerbook
	(EStickerbookPageType)(0),                                                   // 570: protocol.EStickerbookPageType
	(*CMsgStickerbookTeamPageOrderSequence)(nil),                                // 571: protocol.CMsgStickerbookTeamPageOrderSequence
	(*CMsgStickerHeroes)(nil),                                                   // 572: protocol.CMsgStickerHeroes
	(*CMatchClip)(nil),                                                          // 573: protocol.CMatchClip
	(*CMsgMapStatsSnapshot)(nil),                                                // 574: protocol.CMsgMapStatsSnapshot
	(*CMsgGlobalMapStats)(nil),                                                  // 575: protocol.CMsgGlobalMapStats
	(ENewBloomGiftingResponse)(0),                                               // 576: protocol.ENewBloomGiftingResponse
	(EProfileCardSlotType)(0),                                                   // 577: protocol.EProfileCardSlotType
	(*CMsgStickerbookSticker)(nil),                                              // 578: protocol.CMsgStickerbookSticker
}
var file_dota_gcmessages_client_proto_depIdxs = []int32{
	540, // 0: protocol.CMsgDOTARequestMatchesResponse.matches:type_name -> protocol.CMsgDOTAMatch
	445, // 1: protocol.CMsgDOTARequestMatchesResponse.series:type_name -> protocol.CMsgDOTARequestMatchesResponse.Series
	11,  // 2: protocol.CMsgDOTAPopup.id:type_name -> protocol.CMsgDOTAPopup.PopupID
	12,  // 3: protocol.CMsgDOTASubmitPlayerReportResponse.enum_result:type_name -> protocol.CMsgDOTASubmitPlayerReportResponse.EResult
	13,  // 4: protocol.CMsgDOTASubmitPlayerReportResponseV2.enum_result:type_name -> protocol.CMsgDOTASubmitPlayerReportResponseV2.EResult
	541, // 5: protocol.CMsgDOTAKickedFromMatchmakingQueue.match_type:type_name -> protocol.MatchType
	540, // 6: protocol.CMsgGCMatchDetailsResponse.match:type_name -> protocol.CMsgDOTAMatch
	542, // 7: protocol.CMsgGCMatchDetailsResponse.vote:type_name -> protocol.DOTAMatchVote
	446, // 8: protocol.CMsgDOTAProfileTickets.league_passes:type_name -> protocol.CMsgDOTAProfileTickets.LeaguePass
	352, // 9: protocol.CMsgGCToClientPartySearchInvites.invites:type_name -> protocol.CMsgGCToClientPartySearchInvite
	447, // 10: protocol.CMsgDOTAWelcome.extra_messages:type_name -> protocol.CMsgDOTAWelcome.CExtraMsg
	543, // 11: protocol.CMsgDOTAWelcome.active_event:type_name -> protocol.EEvent
	102, // 12: protocol.CMsgDOTAWelcome.party_search_friend_invites:type_name -> protocol.CMsgGCToClientPartySearchInvites
	544, // 13: protocol.CMsgDOTAWelcome.extra_message_blocks:type_name -> protocol.CExtraMsgBlock
	448, // 14: protocol.CMsgDOTAMatchVotes.votes:type_name -> protocol.CMsgDOTAMatchVotes.PlayerVote
	545, // 15: protocol.CMsgMatchmakingMatchGroupInfo.status:type_name -> protocol.EMatchGroupServerStatus
	106, // 16: protocol.CMsgDOTAMatchmakingStatsResponse.match_groups:type_name -> protocol.CMsgMatchmakingMatchGroupInfo
	108, // 17: protocol.CMsgDOTAUpdateMatchmakingStats.stats:type_name -> protocol.CMsgDOTAMatchmakingStatsResponse
	108, // 18: protocol.CMsgDOTAUpdateMatchManagementStats.stats:type_name -> protocol.CMsgDOTAMatchmakingStatsResponse
	1,   // 19: protocol.CMsgGCWatchDownloadedReplay.watch_type:type_name -> protocol.DOTA_WatchReplayType
	449, // 20: protocol.CMsgGCGetHeroStandingsResponse.standings:type_name -> protocol.CMsgGCGetHeroStandingsResponse.Hero
	451, // 21: protocol.CMsgGCGetHeroTimedStatsResponse.rank_chunked_stats:type_name -> protocol.CMsgGCGetHeroTimedStatsResponse.RankChunkedStats
	126, // 22: protocol.CMsgGCItemEditorReservationsResponse.reservations:type_name -> protocol.CMsgGCItemEditorReservation
	452, // 23: protocol.CMsgDOTAClaimEventActionData.grant_item_gift_data:type_name -> protocol.CMsgDOTAClaimEventActionData.GrantItemGiftData
	134, // 24: protocol.CMsgDOTAClaimEventAction.data:type_name -> protocol.CMsgDOTAClaimEventActionData
	546, // 25: protocol.CMsgDOTAClaimEventAction.score_mode:type_name -> protocol.EEventActionScoreMode
	547, // 26: protocol.CMsgClientToGCClaimEventActionUsingItemResponse.action_results:type_name -> protocol.CMsgDOTAClaimEventActionResponse
	547, // 27: protocol.CMsgGCToClientClaimEventActionUsingItemCompleted.action_results:type_name -> protocol.CMsgDOTAClaimEventActionResponse
	453, // 28: protocol.CMsgDOTAGetEventPointsResponse.completed_actions:type_name -> protocol.CMsgDOTAGetEventPointsResponse.Action
	141, // 29: protocol.CMsgDOTAPeriodicResourceUpdated.periodic_resource_key:type_name -> protocol.CMsgDOTAGetPeriodicResource
	142, // 30: protocol.CMsgDOTAPeriodicResourceUpdated.periodic_resource_value:type_name -> protocol.CMsgDOTAGetPeriodicResourceResponse
	144, // 31: protocol.CMsgDOTACompendiumData.selections:type_name -> protocol.CMsgDOTACompendiumSelection
	148, // 32: protocol.CMsgDOTACompendiumDataResponse.compendium_data:type_name -> protocol.CMsgDOTACompendiumData
	454, // 33: protocol.CMsgDOTAGetPlayerMatchHistoryResponse.matches:type_name -> protocol.CMsgDOTAGetPlayerMatchHistoryResponse.Match
	14,  // 34: protocol.CMsgGCNotificationsUpdate.result:type_name -> protocol.CMsgGCNotificationsUpdate.EResult
	154, // 35: protocol.CMsgGCNotificationsUpdate.notifications:type_name -> protocol.CMsgGCNotifications_Notification
	155, // 36: protocol.CMsgGCNotificationsResponse.update:type_name -> protocol.CMsgGCNotificationsUpdate
	15,  // 37: protocol.CMsgGCPlayerInfoSubmitResponse.result:type_name -> protocol.CMsgGCPlayerInfoSubmitResponse.EResult
	160, // 38: protocol.CMsgGCToClientEmoticonData.emoticon_access:type_name -> protocol.CMsgDOTAEmoticonAccessSDO
	455, // 39: protocol.CMsgClientToGCGetTrophyListResponse.trophies:type_name -> protocol.CMsgClientToGCGetTrophyListResponse.Trophy
	548, // 40: protocol.CMsgClientToGCRankRequest.rank_type:type_name -> protocol.ERankType
	16,  // 41: protocol.CMsgGCToClientRankResponse.result:type_name -> protocol.CMsgGCToClientRankResponse.EResultCode
	548, // 42: protocol.CMsgGCToClientRankUpdate.rank_type:type_name -> protocol.ERankType
	172, // 43: protocol.CMsgGCToClientRankUpdate.rank_info:type_name -> protocol.CMsgGCToClientRankResponse
	456, // 44: protocol.CMsgClientToGCSetProfileCardSlots.slots:type_name -> protocol.CMsgClientToGCSetProfileCardSlots.CardSlot
	457, // 45: protocol.CMsgGCToClientCustomGamesFriendsPlayedResponse.games:type_name -> protocol.CMsgGCToClientCustomGamesFriendsPlayedResponse.CustomGame
	549, // 46: protocol.CMsgDOTAPartyRichPresence.party_state:type_name -> protocol.CSODOTAParty.State
	458, // 47: protocol.CMsgDOTAPartyRichPresence.members:type_name -> protocol.CMsgDOTAPartyRichPresence.Member
	459, // 48: protocol.CMsgDOTAPartyRichPresence.weekend_tourney:type_name -> protocol.CMsgDOTAPartyRichPresence.WeekendTourney
	550, // 49: protocol.CMsgDOTALobbyRichPresence.lobby_state:type_name -> protocol.CSODOTALobby.State
	551, // 50: protocol.CMsgDOTALobbyRichPresence.game_mode:type_name -> protocol.DOTA_GameMode
	461, // 51: protocol.CMsgClientToGCGetQuestProgressResponse.quests:type_name -> protocol.CMsgClientToGCGetQuestProgressResponse.Quest
	552, // 52: protocol.CMsgGCGetHeroStatsHistoryResponse.records:type_name -> protocol.CMsgDOTASDOHeroStatsHistory
	17,  // 53: protocol.CMsgPlayerConductScorecard.behavior_rating:type_name -> protocol.CMsgPlayerConductScorecard.EBehaviorRating
	203, // 54: protocol.CMsgGCToClientWageringUpdate.wagering_info:type_name -> protocol.CMsgGCToClientWageringResponse
	222, // 55: protocol.CMsgGCToClientArcanaVotesUpdate.arcana_votes:type_name -> protocol.CMsgClientToGCRequestArcanaVotesRemainingResponse
	543, // 56: protocol.CMsgClientToGCGetEventGoals.event_ids:type_name -> protocol.EEvent
	462, // 57: protocol.CMsgEventGoals.event_goals:type_name -> protocol.CMsgEventGoals.EventGoal
	464, // 58: protocol.CMsgPredictionRankings.predictions:type_name -> protocol.CMsgPredictionRankings.Prediction
	466, // 59: protocol.CMsgPredictionResults.results:type_name -> protocol.CMsgPredictionResults.Result
	467, // 60: protocol.CMsgClientToGCTeammateStatsResponse.teammate_stats:type_name -> protocol.CMsgClientToGCTeammateStatsResponse.TeammateStat
	553, // 61: protocol.CMsgClientToGCVoteForArcana.matches:type_name -> protocol.CMsgArcanaVoteMatchVotes
	18,  // 62: protocol.CMsgClientToGCVoteForArcanaResponse.result:type_name -> protocol.CMsgClientToGCVoteForArcanaResponse.Result
	553, // 63: protocol.CMsgClientToGCRequestArcanaVotesRemainingResponse.matches_previously_voted_for:type_name -> protocol.CMsgArcanaVoteMatchVotes
	543, // 64: protocol.CMsgClientToGCRequestEventPointLogResponseV2.event_id:type_name -> protocol.EEvent
	468, // 65: protocol.CMsgClientToGCRequestEventPointLogResponseV2.log_entries:type_name -> protocol.CMsgClientToGCRequestEventPointLogResponseV2.LogEntry
	543, // 66: protocol.CMsgClientToGCRequestSlarkGameResult.event_id:type_name -> protocol.EEvent
	469, // 67: protocol.CMsgGCToClientQuestProgressUpdated.completed_challenges:type_name -> protocol.CMsgGCToClientQuestProgressUpdated.Challenge
	19,  // 68: protocol.CMsgDOTARedeemItemResponse.response:type_name -> protocol.CMsgDOTARedeemItemResponse.EResultCode
	470, // 69: protocol.CMsgClientToGCSelectCompendiumInGamePrediction.predictions:type_name -> protocol.CMsgClientToGCSelectCompendiumInGamePrediction.Prediction
	20,  // 70: protocol.CMsgClientToGCSelectCompendiumInGamePredictionResponse.result:type_name -> protocol.CMsgClientToGCSelectCompendiumInGamePredictionResponse.EResult
	554, // 71: protocol.CMsgClientToGCOpenPlayerCardPack.region:type_name -> protocol.ELeagueRegion
	21,  // 72: protocol.CMsgClientToGCOpenPlayerCardPackResponse.result:type_name -> protocol.CMsgClientToGCOpenPlayerCardPackResponse.Result
	22,  // 73: protocol.CMsgClientToGCRecyclePlayerCardResponse.result:type_name -> protocol.CMsgClientToGCRecyclePlayerCardResponse.Result
	23,  // 74: protocol.CMsgClientToGCCreatePlayerCardPackResponse.result:type_name -> protocol.CMsgClientToGCCreatePlayerCardPackResponse.Result
	24,  // 75: protocol.CMsgClientToGCCreateTeamPlayerCardPackResponse.result:type_name -> protocol.CMsgClientToGCCreateTeamPlayerCardPackResponse.Result
	471, // 76: protocol.CMsgGCToClientBattlePassRollup_International2016.questlines:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.Questlines
	472, // 77: protocol.CMsgGCToClientBattlePassRollup_International2016.wagering:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.Wagering
	473, // 78: protocol.CMsgGCToClientBattlePassRollup_International2016.achievements:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.Achievements
	474, // 79: protocol.CMsgGCToClientBattlePassRollup_International2016.battle_cup:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.BattleCup
	475, // 80: protocol.CMsgGCToClientBattlePassRollup_International2016.predictions:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.Predictions
	476, // 81: protocol.CMsgGCToClientBattlePassRollup_International2016.bracket:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.Bracket
	477, // 82: protocol.CMsgGCToClientBattlePassRollup_International2016.player_cards:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.PlayerCard
	478, // 83: protocol.CMsgGCToClientBattlePassRollup_International2016.fantasy_challenge:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016.FantasyChallenge
	479, // 84: protocol.CMsgGCToClientBattlePassRollup_Fall2016.questlines:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.Questlines
	480, // 85: protocol.CMsgGCToClientBattlePassRollup_Fall2016.wagering:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.Wagering
	481, // 86: protocol.CMsgGCToClientBattlePassRollup_Fall2016.achievements:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.Achievements
	482, // 87: protocol.CMsgGCToClientBattlePassRollup_Fall2016.battle_cup:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.BattleCup
	483, // 88: protocol.CMsgGCToClientBattlePassRollup_Fall2016.predictions:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.Predictions
	484, // 89: protocol.CMsgGCToClientBattlePassRollup_Fall2016.bracket:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.Bracket
	485, // 90: protocol.CMsgGCToClientBattlePassRollup_Fall2016.player_cards:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.PlayerCard
	486, // 91: protocol.CMsgGCToClientBattlePassRollup_Fall2016.fantasy_challenge:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016.FantasyChallenge
	487, // 92: protocol.CMsgGCToClientBattlePassRollup_Winter2017.questlines:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.Questlines
	488, // 93: protocol.CMsgGCToClientBattlePassRollup_Winter2017.wagering:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.Wagering
	489, // 94: protocol.CMsgGCToClientBattlePassRollup_Winter2017.achievements:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.Achievements
	490, // 95: protocol.CMsgGCToClientBattlePassRollup_Winter2017.battle_cup:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.BattleCup
	491, // 96: protocol.CMsgGCToClientBattlePassRollup_Winter2017.predictions:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.Predictions
	492, // 97: protocol.CMsgGCToClientBattlePassRollup_Winter2017.bracket:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.Bracket
	493, // 98: protocol.CMsgGCToClientBattlePassRollup_Winter2017.player_cards:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.PlayerCard
	494, // 99: protocol.CMsgGCToClientBattlePassRollup_Winter2017.fantasy_challenge:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017.FantasyChallenge
	495, // 100: protocol.CMsgGCToClientBattlePassRollup_TI7.questlines:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.Questlines
	496, // 101: protocol.CMsgGCToClientBattlePassRollup_TI7.wagering:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.Wagering
	497, // 102: protocol.CMsgGCToClientBattlePassRollup_TI7.achievements:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.Achievements
	498, // 103: protocol.CMsgGCToClientBattlePassRollup_TI7.battle_cup:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.BattleCup
	499, // 104: protocol.CMsgGCToClientBattlePassRollup_TI7.predictions:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.Predictions
	500, // 105: protocol.CMsgGCToClientBattlePassRollup_TI7.bracket:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.Bracket
	501, // 106: protocol.CMsgGCToClientBattlePassRollup_TI7.player_cards:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.PlayerCard
	502, // 107: protocol.CMsgGCToClientBattlePassRollup_TI7.fantasy_challenge:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7.FantasyChallenge
	503, // 108: protocol.CMsgGCToClientBattlePassRollup_TI8.cavern_crawl:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.CavernCrawl
	504, // 109: protocol.CMsgGCToClientBattlePassRollup_TI8.wagering:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.Wagering
	505, // 110: protocol.CMsgGCToClientBattlePassRollup_TI8.achievements:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.Achievements
	506, // 111: protocol.CMsgGCToClientBattlePassRollup_TI8.predictions:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.Predictions
	507, // 112: protocol.CMsgGCToClientBattlePassRollup_TI8.bracket:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.Bracket
	508, // 113: protocol.CMsgGCToClientBattlePassRollup_TI8.player_cards:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.PlayerCard
	509, // 114: protocol.CMsgGCToClientBattlePassRollup_TI8.fantasy_challenge:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8.FantasyChallenge
	241, // 115: protocol.CMsgGCToClientBattlePassRollupResponse.event_ti6:type_name -> protocol.CMsgGCToClientBattlePassRollup_International2016
	242, // 116: protocol.CMsgGCToClientBattlePassRollupResponse.event_fall2016:type_name -> protocol.CMsgGCToClientBattlePassRollup_Fall2016
	243, // 117: protocol.CMsgGCToClientBattlePassRollupResponse.event_winter2017:type_name -> protocol.CMsgGCToClientBattlePassRollup_Winter2017
	244, // 118: protocol.CMsgGCToClientBattlePassRollupResponse.event_ti7:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI7
	245, // 119: protocol.CMsgGCToClientBattlePassRollupResponse.event_ti8:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI8
	246, // 120: protocol.CMsgGCToClientBattlePassRollupResponse.event_ti9:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI9
	247, // 121: protocol.CMsgGCToClientBattlePassRollupResponse.event_ti10:type_name -> protocol.CMsgGCToClientBattlePassRollup_TI10
	510, // 122: protocol.CMsgGCToClientBattlePassRollupListResponse.event_info:type_name -> protocol.CMsgGCToClientBattlePassRollupListResponse.EventInfo
	555, // 123: protocol.CMsgDOTATriviaCurrentQuestions.questions:type_name -> protocol.CMsgDOTATriviaQuestion
	4,   // 124: protocol.CMsgDOTASubmitTriviaQuestionAnswerResponse.result:type_name -> protocol.EDOTATriviaAnswerResult
	25,  // 125: protocol.CMsgDOTAAnchorPhoneNumberResponse.result:type_name -> protocol.CMsgDOTAAnchorPhoneNumberResponse.Result
	26,  // 126: protocol.CMsgDOTAUnanchorPhoneNumberResponse.result:type_name -> protocol.CMsgDOTAUnanchorPhoneNumberResponse.Result
	268, // 127: protocol.CMsgDOTAClientToGCQuickStatsResponse.original_request:type_name -> protocol.CMsgDOTAClientToGCQuickStatsRequest
	511, // 128: protocol.CMsgDOTAClientToGCQuickStatsResponse.hero_stats:type_name -> protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	511, // 129: protocol.CMsgDOTAClientToGCQuickStatsResponse.item_stats:type_name -> protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	511, // 130: protocol.CMsgDOTAClientToGCQuickStatsResponse.item_hero_stats:type_name -> protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	511, // 131: protocol.CMsgDOTAClientToGCQuickStatsResponse.item_player_stats:type_name -> protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	511, // 132: protocol.CMsgDOTAClientToGCQuickStatsResponse.hero_player_stats:type_name -> protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	511, // 133: protocol.CMsgDOTAClientToGCQuickStatsResponse.full_set_stats:type_name -> protocol.CMsgDOTAClientToGCQuickStatsResponse.SimpleStats
	556, // 134: protocol.CMsgDOTASelectionPriorityChoiceRequest.choice:type_name -> protocol.DOTASelectionPriorityChoice
	27,  // 135: protocol.CMsgDOTASelectionPriorityChoiceResponse.result:type_name -> protocol.CMsgDOTASelectionPriorityChoiceResponse.Result
	28,  // 136: protocol.CMsgDOTAGameAutographRewardResponse.result:type_name -> protocol.CMsgDOTAGameAutographRewardResponse.Result
	29,  // 137: protocol.CMsgDOTADestroyLobbyResponse.result:type_name -> protocol.CMsgDOTADestroyLobbyResponse.Result
	543, // 138: protocol.CMsgPurchaseItemWithEventPoints.event_id:type_name -> protocol.EEvent
	30,  // 139: protocol.CMsgPurchaseItemWithEventPointsResponse.result:type_name -> protocol.CMsgPurchaseItemWithEventPointsResponse.Result
	557, // 140: protocol.CMsgPurchaseHeroRandomRelic.relic_rarity:type_name -> protocol.EHeroRelicRarity
	5,   // 141: protocol.CMsgPurchaseHeroRandomRelicResponse.result:type_name -> protocol.EPurchaseHeroRelicResult
	543, // 142: protocol.CMsgClientToGCRequestPlusWeeklyChallengeResult.event_id:type_name -> protocol.EEvent
	558, // 143: protocol.CMsgProfileResponse.background_item:type_name -> protocol.CSOEconItem
	512, // 144: protocol.CMsgProfileResponse.featured_heroes:type_name -> protocol.CMsgProfileResponse.FeaturedHero
	513, // 145: protocol.CMsgProfileResponse.recent_matches:type_name -> protocol.CMsgProfileResponse.MatchInfo
	559, // 146: protocol.CMsgProfileResponse.successful_heroes:type_name -> protocol.CMsgSuccessfulHero
	560, // 147: protocol.CMsgProfileResponse.recent_match_details:type_name -> protocol.CMsgRecentMatchInfo
	31,  // 148: protocol.CMsgProfileResponse.result:type_name -> protocol.CMsgProfileResponse.EResponse
	561, // 149: protocol.CMsgProfileResponse.stickerbook_page:type_name -> protocol.CMsgStickerbookPage
	32,  // 150: protocol.CMsgProfileUpdateResponse.result:type_name -> protocol.CMsgProfileUpdateResponse.Result
	516, // 151: protocol.CMsgHeroGlobalDataResponse.hero_data_per_chunk:type_name -> protocol.CMsgHeroGlobalDataResponse.HeroDataPerRankChunk
	291, // 152: protocol.CMsgHeroGlobalDataAllHeroes.heroes:type_name -> protocol.CMsgHeroGlobalDataResponse
	518, // 153: protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies.ranked_hero_data:type_name -> protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies.RankedHeroData
	33,  // 154: protocol.CMsgActivatePlusFreeTrialResponse.result:type_name -> protocol.CMsgActivatePlusFreeTrialResponse.Result
	519, // 155: protocol.CMsgGCToClientCavernCrawlMapPathCompleted.completed_paths:type_name -> protocol.CMsgGCToClientCavernCrawlMapPathCompleted.CompletedPathInfo
	34,  // 156: protocol.CMsgClientToGCCavernCrawlClaimRoomResponse.result:type_name -> protocol.CMsgClientToGCCavernCrawlClaimRoomResponse.Result
	35,  // 157: protocol.CMsgClientToGCCavernCrawlUseItemOnRoomResponse.result:type_name -> protocol.CMsgClientToGCCavernCrawlUseItemOnRoomResponse.Result
	36,  // 158: protocol.CMsgClientToGCCavernCrawlUseItemOnPathResponse.result:type_name -> protocol.CMsgClientToGCCavernCrawlUseItemOnPathResponse.Result
	37,  // 159: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.result:type_name -> protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.Result
	521, // 160: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.inventory_item:type_name -> protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.InventoryItem
	523, // 161: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.map_variants:type_name -> protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.MapVariant
	38,  // 162: protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.result:type_name -> protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.Result
	524, // 163: protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.map_variants:type_name -> protocol.CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse.MapVariant
	525, // 164: protocol.CMsgDOTAMutationList.mutations:type_name -> protocol.CMsgDOTAMutationList.Mutation
	543, // 165: protocol.CMsgEventTipsSummaryRequest.event_id:type_name -> protocol.EEvent
	526, // 166: protocol.CMsgEventTipsSummaryResponse.tips_received:type_name -> protocol.CMsgEventTipsSummaryResponse.Tipper
	39,  // 167: protocol.CMsgSocialFeedResponse.result:type_name -> protocol.CMsgSocialFeedResponse.Result
	527, // 168: protocol.CMsgSocialFeedResponse.feed_events:type_name -> protocol.CMsgSocialFeedResponse.FeedEvent
	40,  // 169: protocol.CMsgSocialFeedCommentsResponse.result:type_name -> protocol.CMsgSocialFeedCommentsResponse.Result
	528, // 170: protocol.CMsgSocialFeedCommentsResponse.feed_comments:type_name -> protocol.CMsgSocialFeedCommentsResponse.FeedComment
	41,  // 171: protocol.CMsgClientToGCPlayerCardSpecificPurchaseResponse.result:type_name -> protocol.CMsgClientToGCPlayerCardSpecificPurchaseResponse.Result
	42,  // 172: protocol.CMsgClientToGCRequestContestVotesResponse.result:type_name -> protocol.CMsgClientToGCRequestContestVotesResponse.EResponse
	529, // 173: protocol.CMsgClientToGCRequestContestVotesResponse.votes:type_name -> protocol.CMsgClientToGCRequestContestVotesResponse.ItemVote
	43,  // 174: protocol.CMsgGCToClientRecordContestVoteResponse.eresult:type_name -> protocol.CMsgGCToClientRecordContestVoteResponse.EResult
	543, // 175: protocol.CMsgDevGrantEventPoints.event_id:type_name -> protocol.EEvent
	6,   // 176: protocol.CMsgDevGrantEventPointsResponse.result:type_name -> protocol.EDevEventRequestResult
	543, // 177: protocol.CMsgDevGrantEventAction.event_id:type_name -> protocol.EEvent
	6,   // 178: protocol.CMsgDevGrantEventActionResponse.result:type_name -> protocol.EDevEventRequestResult
	543, // 179: protocol.CMsgDevDeleteEventActions.event_id:type_name -> protocol.EEvent
	6,   // 180: protocol.CMsgDevDeleteEventActionsResponse.result:type_name -> protocol.EDevEventRequestResult
	543, // 181: protocol.CMsgDevResetEventState.event_id:type_name -> protocol.EEvent
	6,   // 182: protocol.CMsgDevResetEventStateResponse.result:type_name -> protocol.EDevEventRequestResult
	7,   // 183: protocol.CMsgConsumeEventSupportGrantItemResponse.result:type_name -> protocol.ESupportEventRequestResult
	44,  // 184: protocol.CMsgGCToClientGetFilteredPlayersResponse.result:type_name -> protocol.CMsgGCToClientGetFilteredPlayersResponse.Result
	530, // 185: protocol.CMsgGCToClientGetFilteredPlayersResponse.filtered_players:type_name -> protocol.CMsgGCToClientGetFilteredPlayersResponse.CFilterEntry
	45,  // 186: protocol.CMsgGCToClientRemoveFilteredPlayerResponse.result:type_name -> protocol.CMsgGCToClientRemoveFilteredPlayerResponse.Result
	46,  // 187: protocol.CMsgGCToClientPurchaseFilteredPlayerSlotResponse.result:type_name -> protocol.CMsgGCToClientPurchaseFilteredPlayerSlotResponse.Result
	47,  // 188: protocol.CMsgGCToClientUpdateFilteredPlayerNoteResponse.result:type_name -> protocol.CMsgGCToClientUpdateFilteredPlayerNoteResponse.Result
	48,  // 189: protocol.CMsgClientToGCUpdatePartyBeacon.action:type_name -> protocol.CMsgClientToGCUpdatePartyBeacon.Action
	49,  // 190: protocol.CMsgGCToClientRequestActiveBeaconPartiesResponse.response:type_name -> protocol.CMsgGCToClientRequestActiveBeaconPartiesResponse.EResponse
	562, // 191: protocol.CMsgGCToClientRequestActiveBeaconPartiesResponse.active_parties:type_name -> protocol.CPartySearchClientParty
	50,  // 192: protocol.CMsgGCToClientJoinPartyFromBeaconResponse.response:type_name -> protocol.CMsgGCToClientJoinPartyFromBeaconResponse.EResponse
	51,  // 193: protocol.CMsgClientToGCManageFavorites.action:type_name -> protocol.CMsgClientToGCManageFavorites.Action
	52,  // 194: protocol.CMsgGCToClientManageFavoritesResponse.response:type_name -> protocol.CMsgGCToClientManageFavoritesResponse.EResponse
	340, // 195: protocol.CMsgGCToClientManageFavoritesResponse.player:type_name -> protocol.CMsgPartySearchPlayer
	53,  // 196: protocol.CMsgGCToClientGetFavoritePlayersResponse.response:type_name -> protocol.CMsgGCToClientGetFavoritePlayersResponse.EResponse
	340, // 197: protocol.CMsgGCToClientGetFavoritePlayersResponse.players:type_name -> protocol.CMsgPartySearchPlayer
	531, // 198: protocol.CMsgGCToClientVerifyFavoritePlayersResponse.results:type_name -> protocol.CMsgGCToClientVerifyFavoritePlayersResponse.Result
	54,  // 199: protocol.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse.result:type_name -> protocol.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse.EResponse
	563, // 200: protocol.CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse.player_accomplishments:type_name -> protocol.CMsgPlayerRecentAccomplishments
	55,  // 201: protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse.result:type_name -> protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse.EResponse
	564, // 202: protocol.CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse.hero_accomplishments:type_name -> protocol.CMsgPlayerHeroRecentAccomplishments
	56,  // 203: protocol.CMsgClientToGCSubmitPlayerMatchSurveyResponse.eresult:type_name -> protocol.CMsgClientToGCSubmitPlayerMatchSurveyResponse.EResponse
	8,   // 204: protocol.CMsgClientToGCUnderDraftResponse.result:type_name -> protocol.EUnderDraftResponse
	565, // 205: protocol.CMsgClientToGCUnderDraftResponse.draft_data:type_name -> protocol.CMsgUnderDraftData
	8,   // 206: protocol.CMsgClientToGCUnderDraftRerollResponse.result:type_name -> protocol.EUnderDraftResponse
	565, // 207: protocol.CMsgClientToGCUnderDraftRerollResponse.draft_data:type_name -> protocol.CMsgUnderDraftData
	8,   // 208: protocol.CMsgClientToGCUnderDraftBuyResponse.result:type_name -> protocol.EUnderDraftResponse
	565, // 209: protocol.CMsgClientToGCUnderDraftBuyResponse.draft_data:type_name -> protocol.CMsgUnderDraftData
	8,   // 210: protocol.CMsgClientToGCUnderDraftRollBackBenchResponse.result:type_name -> protocol.EUnderDraftResponse
	565, // 211: protocol.CMsgClientToGCUnderDraftRollBackBenchResponse.draft_data:type_name -> protocol.CMsgUnderDraftData
	8,   // 212: protocol.CMsgClientToGCUnderDraftSellResponse.result:type_name -> protocol.EUnderDraftResponse
	565, // 213: protocol.CMsgClientToGCUnderDraftSellResponse.draft_data:type_name -> protocol.CMsgUnderDraftData
	8,   // 214: protocol.CMsgClientToGCUnderDraftRedeemRewardResponse.result:type_name -> protocol.EUnderDraftResponse
	9,   // 215: protocol.CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse.result:type_name -> protocol.EDOTADraftTriviaAnswerResult
	57,  // 216: protocol.CMsgClientToGCRequestReporterUpdatesResponse.enum_result:type_name -> protocol.CMsgClientToGCRequestReporterUpdatesResponse.EResponse
	532, // 217: protocol.CMsgClientToGCRequestReporterUpdatesResponse.updates:type_name -> protocol.CMsgClientToGCRequestReporterUpdatesResponse.ReporterUpdate
	58,  // 218: protocol.CMsgClientToGCRecalibrateMMRResponse.result:type_name -> protocol.CMsgClientToGCRecalibrateMMRResponse.EResponse
	59,  // 219: protocol.CMsgClientToGCGetOWMatchDetailsResponse.result:type_name -> protocol.CMsgClientToGCGetOWMatchDetailsResponse.EResponse
	533, // 220: protocol.CMsgClientToGCGetOWMatchDetailsResponse.markers:type_name -> protocol.CMsgClientToGCGetOWMatchDetailsResponse.Marker
	566, // 221: protocol.CMsgClientToGCGetOWMatchDetailsResponse.report_reason:type_name -> protocol.EOverwatchReportReason
	567, // 222: protocol.CMsgClientToGCSubmitOWConviction.cheating_conviction:type_name -> protocol.EOverwatchConviction
	567, // 223: protocol.CMsgClientToGCSubmitOWConviction.griefing_conviction:type_name -> protocol.EOverwatchConviction
	60,  // 224: protocol.CMsgClientToGCSubmitOWConvictionResponse.result:type_name -> protocol.CMsgClientToGCSubmitOWConvictionResponse.EResponse
	61,  // 225: protocol.CMsgClientToGCGetDPCFavoritesResponse.result:type_name -> protocol.CMsgClientToGCGetDPCFavoritesResponse.EResponse
	534, // 226: protocol.CMsgClientToGCGetDPCFavoritesResponse.favorites:type_name -> protocol.CMsgClientToGCGetDPCFavoritesResponse.Favorite
	568, // 227: protocol.CMsgClientToGCSetDPCFavoriteState.favorite_type:type_name -> protocol.EDPCFavoriteType
	62,  // 228: protocol.CMsgClientToGCSetDPCFavoriteStateResponse.result:type_name -> protocol.CMsgClientToGCSetDPCFavoriteStateResponse.EResponse
	63,  // 229: protocol.CMsgClientToGCSetEventActiveSeasonIDResponse.result:type_name -> protocol.CMsgClientToGCSetEventActiveSeasonIDResponse.EResponse
	543, // 230: protocol.CMsgClientToGCPurchaseLabyrinthBlessings.event_id:type_name -> protocol.EEvent
	64,  // 231: protocol.CMsgClientToGCPurchaseLabyrinthBlessingsResponse.result:type_name -> protocol.CMsgClientToGCPurchaseLabyrinthBlessingsResponse.EResponse
	65,  // 232: protocol.CMsgClientToGCGetStickerbookResponse.response:type_name -> protocol.CMsgClientToGCGetStickerbookResponse.EResponse
	569, // 233: protocol.CMsgClientToGCGetStickerbookResponse.stickerbook:type_name -> protocol.CMsgStickerbook
	543, // 234: protocol.CMsgClientToGCCreateStickerbookPageRequest.event_id:type_name -> protocol.EEvent
	570, // 235: protocol.CMsgClientToGCCreateStickerbookPageRequest.page_type:type_name -> protocol.EStickerbookPageType
	66,  // 236: protocol.CMsgClientToGCCreateStickerbookPageResponse.response:type_name -> protocol.CMsgClientToGCCreateStickerbookPageResponse.EResponse
	67,  // 237: protocol.CMsgClientToGCDeleteStickerbookPageResponse.response:type_name -> protocol.CMsgClientToGCDeleteStickerbookPageResponse.EResponse
	535, // 238: protocol.CMsgClientToGCPlaceStickersRequest.sticker_items:type_name -> protocol.CMsgClientToGCPlaceStickersRequest.StickerItem
	68,  // 239: protocol.CMsgClientToGCPlaceStickersResponse.response:type_name -> protocol.CMsgClientToGCPlaceStickersResponse.EResponse
	536, // 240: protocol.CMsgClientToGCPlaceCollectionStickersRequest.slots:type_name -> protocol.CMsgClientToGCPlaceCollectionStickersRequest.Slot
	69,  // 241: protocol.CMsgClientToGCPlaceCollectionStickersResponse.response:type_name -> protocol.CMsgClientToGCPlaceCollectionStickersResponse.EResponse
	571, // 242: protocol.CMsgClientToGCOrderStickerbookTeamPageRequest.page_order_sequence:type_name -> protocol.CMsgStickerbookTeamPageOrderSequence
	70,  // 243: protocol.CMsgClientToGCOrderStickerbookTeamPageResponse.response:type_name -> protocol.CMsgClientToGCOrderStickerbookTeamPageResponse.EResponse
	71,  // 244: protocol.CMsgClientToGCSetHeroStickerResponse.response:type_name -> protocol.CMsgClientToGCSetHeroStickerResponse.EResponse
	72,  // 245: protocol.CMsgClientToGCGetHeroStickersResponse.response:type_name -> protocol.CMsgClientToGCGetHeroStickersResponse.EResponse
	572, // 246: protocol.CMsgClientToGCGetHeroStickersResponse.sticker_heroes:type_name -> protocol.CMsgStickerHeroes
	73,  // 247: protocol.CMsgClientToGCSetFavoritePageResponse.response:type_name -> protocol.CMsgClientToGCSetFavoritePageResponse.EResponse
	543, // 248: protocol.CMsgClientToGCClaimSwag.event_id:type_name -> protocol.EEvent
	74,  // 249: protocol.CMsgClientToGCClaimSwagResponse.response:type_name -> protocol.CMsgClientToGCClaimSwagResponse.EResponse
	537, // 250: protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse.votes:type_name -> protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse.Vote
	573, // 251: protocol.CMsgClientToGCUploadMatchClip.match_clip:type_name -> protocol.CMatchClip
	76,  // 252: protocol.CMsgGCToClientUploadMatchClipResponse.response:type_name -> protocol.CMsgGCToClientUploadMatchClipResponse.EResponse
	77,  // 253: protocol.CMsgGCToClientMapStatsResponse.response:type_name -> protocol.CMsgGCToClientMapStatsResponse.EResponse
	574, // 254: protocol.CMsgGCToClientMapStatsResponse.personal_stats:type_name -> protocol.CMsgMapStatsSnapshot
	575, // 255: protocol.CMsgGCToClientMapStatsResponse.global_stats:type_name -> protocol.CMsgGlobalMapStats
	430, // 256: protocol.CMsgRoadToTIUserData.quests:type_name -> protocol.CMsgRoadToTIAssignedQuest
	78,  // 257: protocol.CMsgClientToGCRoadToTIGetQuestsResponse.response:type_name -> protocol.CMsgClientToGCRoadToTIGetQuestsResponse.EResponse
	431, // 258: protocol.CMsgClientToGCRoadToTIGetQuestsResponse.quest_data:type_name -> protocol.CMsgRoadToTIUserData
	79,  // 259: protocol.CMsgClientToGCRoadToTIGetActiveQuestResponse.response:type_name -> protocol.CMsgClientToGCRoadToTIGetActiveQuestResponse.EResponse
	430, // 260: protocol.CMsgClientToGCRoadToTIGetActiveQuestResponse.quest_data:type_name -> protocol.CMsgRoadToTIAssignedQuest
	431, // 261: protocol.CMsgGCToClientRoadToTIQuestDataUpdated.quest_data:type_name -> protocol.CMsgRoadToTIUserData
	80,  // 262: protocol.CMsgClientToGCRoadToTIUseItemResponse.response:type_name -> protocol.CMsgClientToGCRoadToTIUseItemResponse.EResponse
	430, // 263: protocol.CMsgLobbyRoadToTIMatchQuestData.quest_data:type_name -> protocol.CMsgRoadToTIAssignedQuest
	576, // 264: protocol.CMsgClientToGCNewBloomGiftResponse.result:type_name -> protocol.ENewBloomGiftingResponse
	538, // 265: protocol.CMsgClientToGCUpdateComicBookStats.stats:type_name -> protocol.CMsgClientToGCUpdateComicBookStats.SingleStat
	539, // 266: protocol.CMsgClientToGCUpdateComicBookStats.language_stats:type_name -> protocol.CMsgClientToGCUpdateComicBookStats.LanguageStats
	540, // 267: protocol.CMsgDOTARequestMatchesResponse.Series.matches:type_name -> protocol.CMsgDOTAMatch
	122, // 268: protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer.all_stats:type_name -> protocol.CMatchPlayerTimedStatAverages
	122, // 269: protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer.winning_stats:type_name -> protocol.CMatchPlayerTimedStatAverages
	122, // 270: protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer.losing_stats:type_name -> protocol.CMatchPlayerTimedStatAverages
	123, // 271: protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer.winning_stddevs:type_name -> protocol.CMatchPlayerTimedStatStdDeviations
	123, // 272: protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer.losing_stddevs:type_name -> protocol.CMatchPlayerTimedStatStdDeviations
	450, // 273: protocol.CMsgGCGetHeroTimedStatsResponse.RankChunkedStats.timed_stats:type_name -> protocol.CMsgGCGetHeroTimedStatsResponse.TimedStatsContainer
	577, // 274: protocol.CMsgClientToGCSetProfileCardSlots.CardSlot.slot_type:type_name -> protocol.EProfileCardSlotType
	3,   // 275: protocol.CMsgDOTAPartyRichPresence.WeekendTourney.event:type_name -> protocol.EWeekendTourneyRichPresenceEvent
	460, // 276: protocol.CMsgClientToGCGetQuestProgressResponse.Quest.completed_challenges:type_name -> protocol.CMsgClientToGCGetQuestProgressResponse.Challenge
	543, // 277: protocol.CMsgEventGoals.EventGoal.event_id:type_name -> protocol.EEvent
	463, // 278: protocol.CMsgPredictionRankings.Prediction.prediction_lines:type_name -> protocol.CMsgPredictionRankings.PredictionLine
	465, // 279: protocol.CMsgPredictionResults.Result.result_breakdown:type_name -> protocol.CMsgPredictionResults.ResultBreakdown
	558, // 280: protocol.CMsgProfileResponse.FeaturedHero.equipped_econ_items:type_name -> protocol.CSOEconItem
	558, // 281: protocol.CMsgProfileResponse.FeaturedHero.plus_hero_relics_item:type_name -> protocol.CSOEconItem
	288, // 282: protocol.CMsgHeroGlobalDataResponse.HeroDataPerRankChunk.talent_win_rates:type_name -> protocol.CMsgTalentWinRates
	289, // 283: protocol.CMsgHeroGlobalDataResponse.HeroDataPerRankChunk.hero_averages:type_name -> protocol.CMsgGlobalHeroAverages
	514, // 284: protocol.CMsgHeroGlobalDataResponse.HeroDataPerRankChunk.graph_data:type_name -> protocol.CMsgHeroGlobalDataResponse.GraphData
	515, // 285: protocol.CMsgHeroGlobalDataResponse.HeroDataPerRankChunk.week_data:type_name -> protocol.CMsgHeroGlobalDataResponse.WeekData
	517, // 286: protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies.RankedHeroData.hero_data:type_name -> protocol.CMsgHeroGlobalDataHeroesAlliesAndEnemies.HeroData
	520, // 287: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.MapVariant.swapped_challenge:type_name -> protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.SwappedChallenge
	522, // 288: protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.MapVariant.treasure_map:type_name -> protocol.CMsgClientToGCCavernCrawlRequestMapStateResponse.TreasureMap
	340, // 289: protocol.CMsgGCToClientVerifyFavoritePlayersResponse.Result.player:type_name -> protocol.CMsgPartySearchPlayer
	568, // 290: protocol.CMsgClientToGCGetDPCFavoritesResponse.Favorite.favorite_type:type_name -> protocol.EDPCFavoriteType
	578, // 291: protocol.CMsgClientToGCPlaceStickersRequest.StickerItem.sticker:type_name -> protocol.CMsgStickerbookSticker
	75,  // 292: protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse.Vote.vote_type:type_name -> protocol.CMsgGCToClientCollectorsCacheAvailableDataResponse.Vote.EVoteType
	10,  // 293: protocol.CMsgClientToGCUpdateComicBookStats.SingleStat.stat_type:type_name -> protocol.CMsgClientToGCUpdateComicBookStat_Type
	294, // [294:294] is the sub-list for method output_type
	294, // [294:294] is the sub-list for method input_type
	294, // [294:294] is the sub-list for extension type_name
	294, // [294:294] is the sub-list for extension extendee
	0,   // [0:294] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_proto_init() }
func file_dota_gcmessages_client_proto_init() {
	if File_dota_gcmessages_client_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_dota_gcmessages_webapi_proto_init()
	file_gcsdk_gcmessages_proto_init()
	file_dota_gcmessages_common_lobby_proto_init()
	file_dota_gcmessages_common_match_management_proto_init()
	file_base_gcmessages_proto_init()
	file_econ_gcmessages_proto_init()
	file_valveextensions_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_client_proto_rawDesc), len(file_dota_gcmessages_client_proto_rawDesc)),
			NumEnums:      81,
			NumMessages:   459,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_proto = out.File
	file_dota_gcmessages_client_proto_goTypes = nil
	file_dota_gcmessages_client_proto_depIdxs = nil
}
