// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: dota_gcmessages_common_fighting_game.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgClientToGCFightingGameChallengeFriendResponse_EResponse int32

const (
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eInternalError                  CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 0
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eSuccess                        CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 1
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eTooBusy                        CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 2
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eDisabled                       CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 3
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eTimeout                        CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 4
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eInvalidAccountID               CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 5
	CMsgClientToGCFightingGameChallengeFriendResponse_k_eStillWaitingOnAnotherChallenge CMsgClientToGCFightingGameChallengeFriendResponse_EResponse = 6
)

// Enum value maps for CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.
var (
	CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidAccountID",
		6: "k_eStillWaitingOnAnotherChallenge",
	}
	CMsgClientToGCFightingGameChallengeFriendResponse_EResponse_value = map[string]int32{
		"k_eInternalError":                  0,
		"k_eSuccess":                        1,
		"k_eTooBusy":                        2,
		"k_eDisabled":                       3,
		"k_eTimeout":                        4,
		"k_eInvalidAccountID":               5,
		"k_eStillWaitingOnAnotherChallenge": 6,
	}
)

func (x CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) Enum() *CMsgClientToGCFightingGameChallengeFriendResponse_EResponse {
	p := new(CMsgClientToGCFightingGameChallengeFriendResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_fighting_game_proto_enumTypes[0].Descriptor()
}

func (CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_fighting_game_proto_enumTypes[0]
}

func (x CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFightingGameChallengeFriendResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFightingGameChallengeFriendResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{1, 0}
}

type CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse int32

const (
	CMsgClientToGCFightingGameAnswerChallengeResponse_k_eInternalError    CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse = 0
	CMsgClientToGCFightingGameAnswerChallengeResponse_k_eSuccess          CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse = 1
	CMsgClientToGCFightingGameAnswerChallengeResponse_k_eTooBusy          CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse = 2
	CMsgClientToGCFightingGameAnswerChallengeResponse_k_eDisabled         CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse = 3
	CMsgClientToGCFightingGameAnswerChallengeResponse_k_eTimeout          CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse = 4
	CMsgClientToGCFightingGameAnswerChallengeResponse_k_eInvalidChallenge CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse = 5
)

// Enum value maps for CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.
var (
	CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_name = map[int32]string{
		0: "k_eInternalError",
		1: "k_eSuccess",
		2: "k_eTooBusy",
		3: "k_eDisabled",
		4: "k_eTimeout",
		5: "k_eInvalidChallenge",
	}
	CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse_value = map[string]int32{
		"k_eInternalError":    0,
		"k_eSuccess":          1,
		"k_eTooBusy":          2,
		"k_eDisabled":         3,
		"k_eTimeout":          4,
		"k_eInvalidChallenge": 5,
	}
)

func (x CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) Enum() *CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse {
	p := new(CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse)
	*p = x
	return p
}

func (x CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_common_fighting_game_proto_enumTypes[1].Descriptor()
}

func (CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_common_fighting_game_proto_enumTypes[1]
}

func (x CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse(num)
	return nil
}

// Deprecated: Use CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.Descriptor instead.
func (CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{4, 0}
}

type CMsgClientToGCFightingGameChallengeFriend struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FriendAccountId *uint32                `protobuf:"varint,1,opt,name=friend_account_id,json=friendAccountId" json:"friend_account_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCFightingGameChallengeFriend) Reset() {
	*x = CMsgClientToGCFightingGameChallengeFriend{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFightingGameChallengeFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFightingGameChallengeFriend) ProtoMessage() {}

func (x *CMsgClientToGCFightingGameChallengeFriend) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFightingGameChallengeFriend.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFightingGameChallengeFriend) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientToGCFightingGameChallengeFriend) GetFriendAccountId() uint32 {
	if x != nil && x.FriendAccountId != nil {
		return *x.FriendAccountId
	}
	return 0
}

type CMsgClientToGCFightingGameChallengeFriendResponse struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	Response      *CMsgClientToGCFightingGameChallengeFriendResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCFightingGameChallengeFriendResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCFightingGameChallengeFriendResponse fields.
const (
	Default_CMsgClientToGCFightingGameChallengeFriendResponse_Response = CMsgClientToGCFightingGameChallengeFriendResponse_k_eInternalError
)

func (x *CMsgClientToGCFightingGameChallengeFriendResponse) Reset() {
	*x = CMsgClientToGCFightingGameChallengeFriendResponse{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFightingGameChallengeFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFightingGameChallengeFriendResponse) ProtoMessage() {}

func (x *CMsgClientToGCFightingGameChallengeFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFightingGameChallengeFriendResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFightingGameChallengeFriendResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientToGCFightingGameChallengeFriendResponse) GetResponse() CMsgClientToGCFightingGameChallengeFriendResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCFightingGameChallengeFriendResponse_Response
}

type CMsgClientToGCFightingGameCancelChallengeFriend struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FriendAccountId *uint32                `protobuf:"varint,1,opt,name=friend_account_id,json=friendAccountId" json:"friend_account_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientToGCFightingGameCancelChallengeFriend) Reset() {
	*x = CMsgClientToGCFightingGameCancelChallengeFriend{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFightingGameCancelChallengeFriend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFightingGameCancelChallengeFriend) ProtoMessage() {}

func (x *CMsgClientToGCFightingGameCancelChallengeFriend) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFightingGameCancelChallengeFriend.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFightingGameCancelChallengeFriend) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientToGCFightingGameCancelChallengeFriend) GetFriendAccountId() uint32 {
	if x != nil && x.FriendAccountId != nil {
		return *x.FriendAccountId
	}
	return 0
}

type CMsgClientToGCFightingGameAnswerChallenge struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ChallengerAccountId *uint32                `protobuf:"varint,1,opt,name=challenger_account_id,json=challengerAccountId" json:"challenger_account_id,omitempty"`
	Accept              *bool                  `protobuf:"varint,2,opt,name=accept" json:"accept,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgClientToGCFightingGameAnswerChallenge) Reset() {
	*x = CMsgClientToGCFightingGameAnswerChallenge{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFightingGameAnswerChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFightingGameAnswerChallenge) ProtoMessage() {}

func (x *CMsgClientToGCFightingGameAnswerChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFightingGameAnswerChallenge.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFightingGameAnswerChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientToGCFightingGameAnswerChallenge) GetChallengerAccountId() uint32 {
	if x != nil && x.ChallengerAccountId != nil {
		return *x.ChallengerAccountId
	}
	return 0
}

func (x *CMsgClientToGCFightingGameAnswerChallenge) GetAccept() bool {
	if x != nil && x.Accept != nil {
		return *x.Accept
	}
	return false
}

type CMsgClientToGCFightingGameAnswerChallengeResponse struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	Response      *CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse `protobuf:"varint,1,opt,name=response,enum=protocol.CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse,def=0" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgClientToGCFightingGameAnswerChallengeResponse fields.
const (
	Default_CMsgClientToGCFightingGameAnswerChallengeResponse_Response = CMsgClientToGCFightingGameAnswerChallengeResponse_k_eInternalError
)

func (x *CMsgClientToGCFightingGameAnswerChallengeResponse) Reset() {
	*x = CMsgClientToGCFightingGameAnswerChallengeResponse{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCFightingGameAnswerChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCFightingGameAnswerChallengeResponse) ProtoMessage() {}

func (x *CMsgClientToGCFightingGameAnswerChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCFightingGameAnswerChallengeResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCFightingGameAnswerChallengeResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientToGCFightingGameAnswerChallengeResponse) GetResponse() CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CMsgClientToGCFightingGameAnswerChallengeResponse_Response
}

type CMsgGCToClientFightingGameChallenge struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ChallengerAccountId *uint32                `protobuf:"varint,1,opt,name=challenger_account_id,json=challengerAccountId" json:"challenger_account_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCToClientFightingGameChallenge) Reset() {
	*x = CMsgGCToClientFightingGameChallenge{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientFightingGameChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFightingGameChallenge) ProtoMessage() {}

func (x *CMsgGCToClientFightingGameChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFightingGameChallenge.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFightingGameChallenge) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgGCToClientFightingGameChallenge) GetChallengerAccountId() uint32 {
	if x != nil && x.ChallengerAccountId != nil {
		return *x.ChallengerAccountId
	}
	return 0
}

type CMsgGCToClientFightingGameChallengeCanceled struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ChallengerAccountId *uint32                `protobuf:"varint,1,opt,name=challenger_account_id,json=challengerAccountId" json:"challenger_account_id,omitempty"`
	ResponderAccountId  *uint32                `protobuf:"varint,2,opt,name=responder_account_id,json=responderAccountId" json:"responder_account_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCToClientFightingGameChallengeCanceled) Reset() {
	*x = CMsgGCToClientFightingGameChallengeCanceled{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientFightingGameChallengeCanceled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFightingGameChallengeCanceled) ProtoMessage() {}

func (x *CMsgGCToClientFightingGameChallengeCanceled) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFightingGameChallengeCanceled.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFightingGameChallengeCanceled) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgGCToClientFightingGameChallengeCanceled) GetChallengerAccountId() uint32 {
	if x != nil && x.ChallengerAccountId != nil {
		return *x.ChallengerAccountId
	}
	return 0
}

func (x *CMsgGCToClientFightingGameChallengeCanceled) GetResponderAccountId() uint32 {
	if x != nil && x.ResponderAccountId != nil {
		return *x.ResponderAccountId
	}
	return 0
}

type CMsgGCToClientFightingGameStartMatch struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ChallengerAccountId *uint32                `protobuf:"varint,1,opt,name=challenger_account_id,json=challengerAccountId" json:"challenger_account_id,omitempty"`
	ResponderAccountId  *uint32                `protobuf:"varint,2,opt,name=responder_account_id,json=responderAccountId" json:"responder_account_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGCToClientFightingGameStartMatch) Reset() {
	*x = CMsgGCToClientFightingGameStartMatch{}
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientFightingGameStartMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientFightingGameStartMatch) ProtoMessage() {}

func (x *CMsgGCToClientFightingGameStartMatch) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_common_fighting_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientFightingGameStartMatch.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientFightingGameStartMatch) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGCToClientFightingGameStartMatch) GetChallengerAccountId() uint32 {
	if x != nil && x.ChallengerAccountId != nil {
		return *x.ChallengerAccountId
	}
	return 0
}

func (x *CMsgGCToClientFightingGameStartMatch) GetResponderAccountId() uint32 {
	if x != nil && x.ResponderAccountId != nil {
		return *x.ResponderAccountId
	}
	return 0
}

var File_dota_gcmessages_common_fighting_game_proto protoreflect.FileDescriptor

var file_dota_gcmessages_common_fighting_game_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x64, 0x6f, 0x74,
	0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x29, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x31, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2,
	0x01, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x65, 0x53, 0x74, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x6e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x10, 0x06, 0x22, 0x5d, 0x0a, 0x2f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x77, 0x0a, 0x29, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x31,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x73, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x46, 0x69, 0x67,
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x10, 0x6b, 0x5f, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x09, 0x45, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x5f, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f, 0x65,
	0x54, 0x6f, 0x6f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x5f, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x5f,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x10, 0x05, 0x22, 0x59, 0x0a, 0x23, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x93,
	0x01, 0x0a, 0x2b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x24, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c,
})

var (
	file_dota_gcmessages_common_fighting_game_proto_rawDescOnce sync.Once
	file_dota_gcmessages_common_fighting_game_proto_rawDescData []byte
)

func file_dota_gcmessages_common_fighting_game_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_common_fighting_game_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_common_fighting_game_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_common_fighting_game_proto_rawDesc), len(file_dota_gcmessages_common_fighting_game_proto_rawDesc)))
	})
	return file_dota_gcmessages_common_fighting_game_proto_rawDescData
}

var file_dota_gcmessages_common_fighting_game_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dota_gcmessages_common_fighting_game_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dota_gcmessages_common_fighting_game_proto_goTypes = []any{
	(CMsgClientToGCFightingGameChallengeFriendResponse_EResponse)(0), // 0: protocol.CMsgClientToGCFightingGameChallengeFriendResponse.EResponse
	(CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse)(0), // 1: protocol.CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse
	(*CMsgClientToGCFightingGameChallengeFriend)(nil),                // 2: protocol.CMsgClientToGCFightingGameChallengeFriend
	(*CMsgClientToGCFightingGameChallengeFriendResponse)(nil),        // 3: protocol.CMsgClientToGCFightingGameChallengeFriendResponse
	(*CMsgClientToGCFightingGameCancelChallengeFriend)(nil),          // 4: protocol.CMsgClientToGCFightingGameCancelChallengeFriend
	(*CMsgClientToGCFightingGameAnswerChallenge)(nil),                // 5: protocol.CMsgClientToGCFightingGameAnswerChallenge
	(*CMsgClientToGCFightingGameAnswerChallengeResponse)(nil),        // 6: protocol.CMsgClientToGCFightingGameAnswerChallengeResponse
	(*CMsgGCToClientFightingGameChallenge)(nil),                      // 7: protocol.CMsgGCToClientFightingGameChallenge
	(*CMsgGCToClientFightingGameChallengeCanceled)(nil),              // 8: protocol.CMsgGCToClientFightingGameChallengeCanceled
	(*CMsgGCToClientFightingGameStartMatch)(nil),                     // 9: protocol.CMsgGCToClientFightingGameStartMatch
}
var file_dota_gcmessages_common_fighting_game_proto_depIdxs = []int32{
	0, // 0: protocol.CMsgClientToGCFightingGameChallengeFriendResponse.response:type_name -> protocol.CMsgClientToGCFightingGameChallengeFriendResponse.EResponse
	1, // 1: protocol.CMsgClientToGCFightingGameAnswerChallengeResponse.response:type_name -> protocol.CMsgClientToGCFightingGameAnswerChallengeResponse.EResponse
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_common_fighting_game_proto_init() }
func file_dota_gcmessages_common_fighting_game_proto_init() {
	if File_dota_gcmessages_common_fighting_game_proto != nil {
		return
	}
	file_steammessages_proto_init()
	file_dota_shared_enums_proto_init()
	file_dota_gcmessages_common_proto_init()
	file_gcsdk_gcmessages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_common_fighting_game_proto_rawDesc), len(file_dota_gcmessages_common_fighting_game_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_common_fighting_game_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_common_fighting_game_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_common_fighting_game_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_common_fighting_game_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_common_fighting_game_proto = out.File
	file_dota_gcmessages_common_fighting_game_proto_goTypes = nil
	file_dota_gcmessages_common_fighting_game_proto_depIdxs = nil
}
