// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: dota_gcmessages_client_chat.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgGCToClientPrivateChatResponse_Result int32

const (
	CMsgGCToClientPrivateChatResponse_SUCCESS                       CMsgGCToClientPrivateChatResponse_Result = 0
	CMsgGCToClientPrivateChatResponse_FAILURE_CREATION_LOCK         CMsgGCToClientPrivateChatResponse_Result = 1
	CMsgGCToClientPrivateChatResponse_FAILURE_SQL_TRANSACTION       CMsgGCToClientPrivateChatResponse_Result = 2
	CMsgGCToClientPrivateChatResponse_FAILURE_SDO_LOAD              CMsgGCToClientPrivateChatResponse_Result = 3
	CMsgGCToClientPrivateChatResponse_FAILURE_NO_PERMISSION         CMsgGCToClientPrivateChatResponse_Result = 4
	CMsgGCToClientPrivateChatResponse_FAILURE_ALREADY_MEMBER        CMsgGCToClientPrivateChatResponse_Result = 5
	CMsgGCToClientPrivateChatResponse_FAILURE_NOT_A_MEMBER          CMsgGCToClientPrivateChatResponse_Result = 7
	CMsgGCToClientPrivateChatResponse_FAILURE_NO_REMAINING_ADMINS   CMsgGCToClientPrivateChatResponse_Result = 8
	CMsgGCToClientPrivateChatResponse_FAILURE_NO_ROOM               CMsgGCToClientPrivateChatResponse_Result = 9
	CMsgGCToClientPrivateChatResponse_FAILURE_CREATION_RATE_LIMITED CMsgGCToClientPrivateChatResponse_Result = 10
	CMsgGCToClientPrivateChatResponse_FAILURE_UNKNOWN_CHANNEL_NAME  CMsgGCToClientPrivateChatResponse_Result = 11
	CMsgGCToClientPrivateChatResponse_FAILURE_UNKNOWN_USER          CMsgGCToClientPrivateChatResponse_Result = 12
	CMsgGCToClientPrivateChatResponse_FAILURE_UNKNOWN_ERROR         CMsgGCToClientPrivateChatResponse_Result = 13
	CMsgGCToClientPrivateChatResponse_FAILURE_CANNOT_KICK_ADMIN     CMsgGCToClientPrivateChatResponse_Result = 14
	CMsgGCToClientPrivateChatResponse_FAILURE_ALREADY_ADMIN         CMsgGCToClientPrivateChatResponse_Result = 15
)

// Enum value maps for CMsgGCToClientPrivateChatResponse_Result.
var (
	CMsgGCToClientPrivateChatResponse_Result_name = map[int32]string{
		0:  "SUCCESS",
		1:  "FAILURE_CREATION_LOCK",
		2:  "FAILURE_SQL_TRANSACTION",
		3:  "FAILURE_SDO_LOAD",
		4:  "FAILURE_NO_PERMISSION",
		5:  "FAILURE_ALREADY_MEMBER",
		7:  "FAILURE_NOT_A_MEMBER",
		8:  "FAILURE_NO_REMAINING_ADMINS",
		9:  "FAILURE_NO_ROOM",
		10: "FAILURE_CREATION_RATE_LIMITED",
		11: "FAILURE_UNKNOWN_CHANNEL_NAME",
		12: "FAILURE_UNKNOWN_USER",
		13: "FAILURE_UNKNOWN_ERROR",
		14: "FAILURE_CANNOT_KICK_ADMIN",
		15: "FAILURE_ALREADY_ADMIN",
	}
	CMsgGCToClientPrivateChatResponse_Result_value = map[string]int32{
		"SUCCESS":                       0,
		"FAILURE_CREATION_LOCK":         1,
		"FAILURE_SQL_TRANSACTION":       2,
		"FAILURE_SDO_LOAD":              3,
		"FAILURE_NO_PERMISSION":         4,
		"FAILURE_ALREADY_MEMBER":        5,
		"FAILURE_NOT_A_MEMBER":          7,
		"FAILURE_NO_REMAINING_ADMINS":   8,
		"FAILURE_NO_ROOM":               9,
		"FAILURE_CREATION_RATE_LIMITED": 10,
		"FAILURE_UNKNOWN_CHANNEL_NAME":  11,
		"FAILURE_UNKNOWN_USER":          12,
		"FAILURE_UNKNOWN_ERROR":         13,
		"FAILURE_CANNOT_KICK_ADMIN":     14,
		"FAILURE_ALREADY_ADMIN":         15,
	}
)

func (x CMsgGCToClientPrivateChatResponse_Result) Enum() *CMsgGCToClientPrivateChatResponse_Result {
	p := new(CMsgGCToClientPrivateChatResponse_Result)
	*p = x
	return p
}

func (x CMsgGCToClientPrivateChatResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGCToClientPrivateChatResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_chat_proto_enumTypes[0].Descriptor()
}

func (CMsgGCToClientPrivateChatResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_chat_proto_enumTypes[0]
}

func (x CMsgGCToClientPrivateChatResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGCToClientPrivateChatResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGCToClientPrivateChatResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgGCToClientPrivateChatResponse_Result.Descriptor instead.
func (CMsgGCToClientPrivateChatResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{4, 0}
}

type CMsgDOTAJoinChatChannelResponse_Result int32

const (
	CMsgDOTAJoinChatChannelResponse_JOIN_SUCCESS                     CMsgDOTAJoinChatChannelResponse_Result = 0
	CMsgDOTAJoinChatChannelResponse_INVALID_CHANNEL_TYPE             CMsgDOTAJoinChatChannelResponse_Result = 1
	CMsgDOTAJoinChatChannelResponse_ACCOUNT_NOT_FOUND                CMsgDOTAJoinChatChannelResponse_Result = 2
	CMsgDOTAJoinChatChannelResponse_ACH_FAILED                       CMsgDOTAJoinChatChannelResponse_Result = 3
	CMsgDOTAJoinChatChannelResponse_USER_IN_TOO_MANY_CHANNELS        CMsgDOTAJoinChatChannelResponse_Result = 4
	CMsgDOTAJoinChatChannelResponse_RATE_LIMIT_EXCEEDED              CMsgDOTAJoinChatChannelResponse_Result = 5
	CMsgDOTAJoinChatChannelResponse_CHANNEL_FULL                     CMsgDOTAJoinChatChannelResponse_Result = 6
	CMsgDOTAJoinChatChannelResponse_CHANNEL_FULL_OVERFLOWED          CMsgDOTAJoinChatChannelResponse_Result = 7
	CMsgDOTAJoinChatChannelResponse_FAILED_TO_ADD_USER               CMsgDOTAJoinChatChannelResponse_Result = 8
	CMsgDOTAJoinChatChannelResponse_CHANNEL_TYPE_DISABLED            CMsgDOTAJoinChatChannelResponse_Result = 9
	CMsgDOTAJoinChatChannelResponse_PRIVATE_CHAT_CREATE_FAILED       CMsgDOTAJoinChatChannelResponse_Result = 10
	CMsgDOTAJoinChatChannelResponse_PRIVATE_CHAT_NO_PERMISSION       CMsgDOTAJoinChatChannelResponse_Result = 11
	CMsgDOTAJoinChatChannelResponse_PRIVATE_CHAT_CREATE_LOCK_FAILED  CMsgDOTAJoinChatChannelResponse_Result = 12
	CMsgDOTAJoinChatChannelResponse_PRIVATE_CHAT_KICKED              CMsgDOTAJoinChatChannelResponse_Result = 13
	CMsgDOTAJoinChatChannelResponse_USER_NOT_ALLOWED                 CMsgDOTAJoinChatChannelResponse_Result = 14
	CMsgDOTAJoinChatChannelResponse_ENSURE_SPECIAL_PRIVILEGES_FAILED CMsgDOTAJoinChatChannelResponse_Result = 15
	CMsgDOTAJoinChatChannelResponse_NEW_PLAYER_USER_NOT_ELIGIBLE     CMsgDOTAJoinChatChannelResponse_Result = 16
	CMsgDOTAJoinChatChannelResponse_SILENT_ERROR                     CMsgDOTAJoinChatChannelResponse_Result = 17
	CMsgDOTAJoinChatChannelResponse_NEW_PLAYER_USER_BANNED           CMsgDOTAJoinChatChannelResponse_Result = 18
)

// Enum value maps for CMsgDOTAJoinChatChannelResponse_Result.
var (
	CMsgDOTAJoinChatChannelResponse_Result_name = map[int32]string{
		0:  "JOIN_SUCCESS",
		1:  "INVALID_CHANNEL_TYPE",
		2:  "ACCOUNT_NOT_FOUND",
		3:  "ACH_FAILED",
		4:  "USER_IN_TOO_MANY_CHANNELS",
		5:  "RATE_LIMIT_EXCEEDED",
		6:  "CHANNEL_FULL",
		7:  "CHANNEL_FULL_OVERFLOWED",
		8:  "FAILED_TO_ADD_USER",
		9:  "CHANNEL_TYPE_DISABLED",
		10: "PRIVATE_CHAT_CREATE_FAILED",
		11: "PRIVATE_CHAT_NO_PERMISSION",
		12: "PRIVATE_CHAT_CREATE_LOCK_FAILED",
		13: "PRIVATE_CHAT_KICKED",
		14: "USER_NOT_ALLOWED",
		15: "ENSURE_SPECIAL_PRIVILEGES_FAILED",
		16: "NEW_PLAYER_USER_NOT_ELIGIBLE",
		17: "SILENT_ERROR",
		18: "NEW_PLAYER_USER_BANNED",
	}
	CMsgDOTAJoinChatChannelResponse_Result_value = map[string]int32{
		"JOIN_SUCCESS":                     0,
		"INVALID_CHANNEL_TYPE":             1,
		"ACCOUNT_NOT_FOUND":                2,
		"ACH_FAILED":                       3,
		"USER_IN_TOO_MANY_CHANNELS":        4,
		"RATE_LIMIT_EXCEEDED":              5,
		"CHANNEL_FULL":                     6,
		"CHANNEL_FULL_OVERFLOWED":          7,
		"FAILED_TO_ADD_USER":               8,
		"CHANNEL_TYPE_DISABLED":            9,
		"PRIVATE_CHAT_CREATE_FAILED":       10,
		"PRIVATE_CHAT_NO_PERMISSION":       11,
		"PRIVATE_CHAT_CREATE_LOCK_FAILED":  12,
		"PRIVATE_CHAT_KICKED":              13,
		"USER_NOT_ALLOWED":                 14,
		"ENSURE_SPECIAL_PRIVILEGES_FAILED": 15,
		"NEW_PLAYER_USER_NOT_ELIGIBLE":     16,
		"SILENT_ERROR":                     17,
		"NEW_PLAYER_USER_BANNED":           18,
	}
)

func (x CMsgDOTAJoinChatChannelResponse_Result) Enum() *CMsgDOTAJoinChatChannelResponse_Result {
	p := new(CMsgDOTAJoinChatChannelResponse_Result)
	*p = x
	return p
}

func (x CMsgDOTAJoinChatChannelResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgDOTAJoinChatChannelResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_dota_gcmessages_client_chat_proto_enumTypes[1].Descriptor()
}

func (CMsgDOTAJoinChatChannelResponse_Result) Type() protoreflect.EnumType {
	return &file_dota_gcmessages_client_chat_proto_enumTypes[1]
}

func (x CMsgDOTAJoinChatChannelResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgDOTAJoinChatChannelResponse_Result) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgDOTAJoinChatChannelResponse_Result(num)
	return nil
}

// Deprecated: Use CMsgDOTAJoinChatChannelResponse_Result.Descriptor instead.
func (CMsgDOTAJoinChatChannelResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{11, 0}
}

type CMsgClientToGCPrivateChatInvite struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PrivateChatChannelName *string                `protobuf:"bytes,1,opt,name=private_chat_channel_name,json=privateChatChannelName" json:"private_chat_channel_name,omitempty"`
	InvitedAccountId       *uint32                `protobuf:"varint,2,opt,name=invited_account_id,json=invitedAccountId" json:"invited_account_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientToGCPrivateChatInvite) Reset() {
	*x = CMsgClientToGCPrivateChatInvite{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPrivateChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateChatInvite) ProtoMessage() {}

func (x *CMsgClientToGCPrivateChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateChatInvite.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateChatInvite) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientToGCPrivateChatInvite) GetPrivateChatChannelName() string {
	if x != nil && x.PrivateChatChannelName != nil {
		return *x.PrivateChatChannelName
	}
	return ""
}

func (x *CMsgClientToGCPrivateChatInvite) GetInvitedAccountId() uint32 {
	if x != nil && x.InvitedAccountId != nil {
		return *x.InvitedAccountId
	}
	return 0
}

type CMsgClientToGCPrivateChatKick struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PrivateChatChannelName *string                `protobuf:"bytes,1,opt,name=private_chat_channel_name,json=privateChatChannelName" json:"private_chat_channel_name,omitempty"`
	KickAccountId          *uint32                `protobuf:"varint,2,opt,name=kick_account_id,json=kickAccountId" json:"kick_account_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientToGCPrivateChatKick) Reset() {
	*x = CMsgClientToGCPrivateChatKick{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPrivateChatKick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateChatKick) ProtoMessage() {}

func (x *CMsgClientToGCPrivateChatKick) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateChatKick.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateChatKick) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientToGCPrivateChatKick) GetPrivateChatChannelName() string {
	if x != nil && x.PrivateChatChannelName != nil {
		return *x.PrivateChatChannelName
	}
	return ""
}

func (x *CMsgClientToGCPrivateChatKick) GetKickAccountId() uint32 {
	if x != nil && x.KickAccountId != nil {
		return *x.KickAccountId
	}
	return 0
}

type CMsgClientToGCPrivateChatPromote struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PrivateChatChannelName *string                `protobuf:"bytes,1,opt,name=private_chat_channel_name,json=privateChatChannelName" json:"private_chat_channel_name,omitempty"`
	PromoteAccountId       *uint32                `protobuf:"varint,2,opt,name=promote_account_id,json=promoteAccountId" json:"promote_account_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientToGCPrivateChatPromote) Reset() {
	*x = CMsgClientToGCPrivateChatPromote{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPrivateChatPromote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateChatPromote) ProtoMessage() {}

func (x *CMsgClientToGCPrivateChatPromote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateChatPromote.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateChatPromote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientToGCPrivateChatPromote) GetPrivateChatChannelName() string {
	if x != nil && x.PrivateChatChannelName != nil {
		return *x.PrivateChatChannelName
	}
	return ""
}

func (x *CMsgClientToGCPrivateChatPromote) GetPromoteAccountId() uint32 {
	if x != nil && x.PromoteAccountId != nil {
		return *x.PromoteAccountId
	}
	return 0
}

type CMsgClientToGCPrivateChatDemote struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PrivateChatChannelName *string                `protobuf:"bytes,1,opt,name=private_chat_channel_name,json=privateChatChannelName" json:"private_chat_channel_name,omitempty"`
	DemoteAccountId        *uint32                `protobuf:"varint,2,opt,name=demote_account_id,json=demoteAccountId" json:"demote_account_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgClientToGCPrivateChatDemote) Reset() {
	*x = CMsgClientToGCPrivateChatDemote{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientToGCPrivateChatDemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientToGCPrivateChatDemote) ProtoMessage() {}

func (x *CMsgClientToGCPrivateChatDemote) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientToGCPrivateChatDemote.ProtoReflect.Descriptor instead.
func (*CMsgClientToGCPrivateChatDemote) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientToGCPrivateChatDemote) GetPrivateChatChannelName() string {
	if x != nil && x.PrivateChatChannelName != nil {
		return *x.PrivateChatChannelName
	}
	return ""
}

func (x *CMsgClientToGCPrivateChatDemote) GetDemoteAccountId() uint32 {
	if x != nil && x.DemoteAccountId != nil {
		return *x.DemoteAccountId
	}
	return 0
}

type CMsgGCToClientPrivateChatResponse struct {
	state                  protoimpl.MessageState                    `protogen:"open.v1"`
	PrivateChatChannelName *string                                   `protobuf:"bytes,1,opt,name=private_chat_channel_name,json=privateChatChannelName" json:"private_chat_channel_name,omitempty"`
	Result                 *CMsgGCToClientPrivateChatResponse_Result `protobuf:"varint,2,opt,name=result,enum=protocol.CMsgGCToClientPrivateChatResponse_Result,def=0" json:"result,omitempty"`
	Username               *string                                   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for CMsgGCToClientPrivateChatResponse fields.
const (
	Default_CMsgGCToClientPrivateChatResponse_Result = CMsgGCToClientPrivateChatResponse_SUCCESS
)

func (x *CMsgGCToClientPrivateChatResponse) Reset() {
	*x = CMsgGCToClientPrivateChatResponse{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCToClientPrivateChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCToClientPrivateChatResponse) ProtoMessage() {}

func (x *CMsgGCToClientPrivateChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCToClientPrivateChatResponse.ProtoReflect.Descriptor instead.
func (*CMsgGCToClientPrivateChatResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgGCToClientPrivateChatResponse) GetPrivateChatChannelName() string {
	if x != nil && x.PrivateChatChannelName != nil {
		return *x.PrivateChatChannelName
	}
	return ""
}

func (x *CMsgGCToClientPrivateChatResponse) GetResult() CMsgGCToClientPrivateChatResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgGCToClientPrivateChatResponse_Result
}

func (x *CMsgGCToClientPrivateChatResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type CMsgDOTAJoinChatChannel struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChannelName     *string                `protobuf:"bytes,2,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	ChannelType     *DOTAChatChannelTypeT  `protobuf:"varint,4,opt,name=channel_type,json=channelType,enum=protocol.DOTAChatChannelTypeT,def=0" json:"channel_type,omitempty"`
	SilentRejection *bool                  `protobuf:"varint,5,opt,name=silent_rejection,json=silentRejection" json:"silent_rejection,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgDOTAJoinChatChannel fields.
const (
	Default_CMsgDOTAJoinChatChannel_ChannelType = DOTAChatChannelTypeT_DOTAChannelType_Regional
)

func (x *CMsgDOTAJoinChatChannel) Reset() {
	*x = CMsgDOTAJoinChatChannel{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAJoinChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAJoinChatChannel) ProtoMessage() {}

func (x *CMsgDOTAJoinChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAJoinChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTAJoinChatChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgDOTAJoinChatChannel) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *CMsgDOTAJoinChatChannel) GetChannelType() DOTAChatChannelTypeT {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return Default_CMsgDOTAJoinChatChannel_ChannelType
}

func (x *CMsgDOTAJoinChatChannel) GetSilentRejection() bool {
	if x != nil && x.SilentRejection != nil {
		return *x.SilentRejection
	}
	return false
}

type CMsgDOTALeaveChatChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint64                `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTALeaveChatChannel) Reset() {
	*x = CMsgDOTALeaveChatChannel{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTALeaveChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTALeaveChatChannel) ProtoMessage() {}

func (x *CMsgDOTALeaveChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTALeaveChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTALeaveChatChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgDOTALeaveChatChannel) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

type CMsgGCChatReportPublicSpam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint64                `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	ChannelUserId *uint32                `protobuf:"varint,2,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGCChatReportPublicSpam) Reset() {
	*x = CMsgGCChatReportPublicSpam{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGCChatReportPublicSpam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGCChatReportPublicSpam) ProtoMessage() {}

func (x *CMsgGCChatReportPublicSpam) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGCChatReportPublicSpam.ProtoReflect.Descriptor instead.
func (*CMsgGCChatReportPublicSpam) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGCChatReportPublicSpam) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgGCChatReportPublicSpam) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

type CMsgDOTAChatModeratorBan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint64                `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AccountId     *uint32                `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Duration      *uint32                `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAChatModeratorBan) Reset() {
	*x = CMsgDOTAChatModeratorBan{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatModeratorBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatModeratorBan) ProtoMessage() {}

func (x *CMsgDOTAChatModeratorBan) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatModeratorBan.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatModeratorBan) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgDOTAChatModeratorBan) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgDOTAChatModeratorBan) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAChatModeratorBan) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CMsgDOTAChatMessage struct {
	state                       protoimpl.MessageState                `protogen:"open.v1"`
	AccountId                   *uint32                               `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ChannelId                   *uint64                               `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	PersonaName                 *string                               `protobuf:"bytes,3,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Text                        *string                               `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Timestamp                   *uint32                               `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	SuggestInviteAccountId      *uint32                               `protobuf:"varint,6,opt,name=suggest_invite_account_id,json=suggestInviteAccountId" json:"suggest_invite_account_id,omitempty"`
	SuggestInviteName           *string                               `protobuf:"bytes,7,opt,name=suggest_invite_name,json=suggestInviteName" json:"suggest_invite_name,omitempty"`
	FantasyDraftOwnerAccountId  *uint32                               `protobuf:"varint,8,opt,name=fantasy_draft_owner_account_id,json=fantasyDraftOwnerAccountId" json:"fantasy_draft_owner_account_id,omitempty"`
	FantasyDraftPlayerAccountId *uint32                               `protobuf:"varint,9,opt,name=fantasy_draft_player_account_id,json=fantasyDraftPlayerAccountId" json:"fantasy_draft_player_account_id,omitempty"`
	EventId                     *uint32                               `protobuf:"varint,10,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	SuggestInviteToLobby        *bool                                 `protobuf:"varint,11,opt,name=suggest_invite_to_lobby,json=suggestInviteToLobby" json:"suggest_invite_to_lobby,omitempty"`
	CoinFlip                    *bool                                 `protobuf:"varint,13,opt,name=coin_flip,json=coinFlip" json:"coin_flip,omitempty"`
	PlayerId                    *int32                                `protobuf:"varint,14,opt,name=player_id,json=playerId,def=-1" json:"player_id,omitempty"`
	ShareProfileAccountId       *uint32                               `protobuf:"varint,15,opt,name=share_profile_account_id,json=shareProfileAccountId" json:"share_profile_account_id,omitempty"`
	ChannelUserId               *uint32                               `protobuf:"varint,16,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	DiceRoll                    *CMsgDOTAChatMessage_DiceRoll         `protobuf:"bytes,17,opt,name=dice_roll,json=diceRoll" json:"dice_roll,omitempty"`
	SharePartyId                *uint64                               `protobuf:"varint,18,opt,name=share_party_id,json=sharePartyId" json:"share_party_id,omitempty"`
	ShareLobbyId                *uint64                               `protobuf:"varint,19,opt,name=share_lobby_id,json=shareLobbyId" json:"share_lobby_id,omitempty"`
	ShareLobbyCustomGameId      *uint64                               `protobuf:"varint,20,opt,name=share_lobby_custom_game_id,json=shareLobbyCustomGameId" json:"share_lobby_custom_game_id,omitempty"`
	ShareLobbyPasskey           *string                               `protobuf:"bytes,21,opt,name=share_lobby_passkey,json=shareLobbyPasskey" json:"share_lobby_passkey,omitempty"`
	PrivateChatChannelId        *uint32                               `protobuf:"varint,22,opt,name=private_chat_channel_id,json=privateChatChannelId" json:"private_chat_channel_id,omitempty"`
	Status                      *uint32                               `protobuf:"varint,23,opt,name=status" json:"status,omitempty"`
	LegacyBattleCupVictory      *bool                                 `protobuf:"varint,24,opt,name=legacy_battle_cup_victory,json=legacyBattleCupVictory" json:"legacy_battle_cup_victory,omitempty"`
	BattleCupStreak             *uint32                               `protobuf:"varint,29,opt,name=battle_cup_streak,json=battleCupStreak" json:"battle_cup_streak,omitempty"`
	BadgeLevel                  *uint32                               `protobuf:"varint,25,opt,name=badge_level,json=badgeLevel" json:"badge_level,omitempty"`
	SuggestPickHeroId           *int32                                `protobuf:"varint,26,opt,name=suggest_pick_hero_id,json=suggestPickHeroId" json:"suggest_pick_hero_id,omitempty"`
	SuggestPickHeroRole         *string                               `protobuf:"bytes,27,opt,name=suggest_pick_hero_role,json=suggestPickHeroRole" json:"suggest_pick_hero_role,omitempty"`
	SuggestBanHeroId            *int32                                `protobuf:"varint,30,opt,name=suggest_ban_hero_id,json=suggestBanHeroId" json:"suggest_ban_hero_id,omitempty"`
	TriviaAnswer                *CMsgDOTAChatMessage_TriviaAnswered   `protobuf:"bytes,32,opt,name=trivia_answer,json=triviaAnswer" json:"trivia_answer,omitempty"`
	RequestedAbilityId          *int32                                `protobuf:"varint,33,opt,name=requested_ability_id,json=requestedAbilityId,def=-1" json:"requested_ability_id,omitempty"`
	ChatFlags                   *uint32                               `protobuf:"varint,34,opt,name=chat_flags,json=chatFlags" json:"chat_flags,omitempty"`
	StartedFindingMatch         *bool                                 `protobuf:"varint,35,opt,name=started_finding_match,json=startedFindingMatch" json:"started_finding_match,omitempty"`
	CtrlIsDown                  *bool                                 `protobuf:"varint,36,opt,name=ctrl_is_down,json=ctrlIsDown" json:"ctrl_is_down,omitempty"`
	FavoriteTeamId              *uint32                               `protobuf:"varint,37,opt,name=favorite_team_id,json=favoriteTeamId" json:"favorite_team_id,omitempty"`
	FavoriteTeamQuality         *uint32                               `protobuf:"varint,38,opt,name=favorite_team_quality,json=favoriteTeamQuality" json:"favorite_team_quality,omitempty"`
	SuggestPlayerDraftPick      *int32                                `protobuf:"varint,39,opt,name=suggest_player_draft_pick,json=suggestPlayerDraftPick,def=-1" json:"suggest_player_draft_pick,omitempty"`
	PlayerDraftPick             *CMsgDOTAChatMessage_PlayerDraftPick  `protobuf:"bytes,40,opt,name=player_draft_pick,json=playerDraftPick" json:"player_draft_pick,omitempty"`
	ChatWheelMessage            *CMsgDOTAChatMessage_ChatWheelMessage `protobuf:"bytes,41,opt,name=chat_wheel_message,json=chatWheelMessage" json:"chat_wheel_message,omitempty"`
	EventLevel                  *uint32                               `protobuf:"varint,42,opt,name=event_level,json=eventLevel" json:"event_level,omitempty"`
	SuggestPickHeroFacet        *uint32                               `protobuf:"varint,43,opt,name=suggest_pick_hero_facet,json=suggestPickHeroFacet" json:"suggest_pick_hero_facet,omitempty"`
	RequestedHeroId             *int32                                `protobuf:"varint,44,opt,name=requested_hero_id,json=requestedHeroId" json:"requested_hero_id,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for CMsgDOTAChatMessage fields.
const (
	Default_CMsgDOTAChatMessage_PlayerId               = int32(-1)
	Default_CMsgDOTAChatMessage_RequestedAbilityId     = int32(-1)
	Default_CMsgDOTAChatMessage_SuggestPlayerDraftPick = int32(-1)
)

func (x *CMsgDOTAChatMessage) Reset() {
	*x = CMsgDOTAChatMessage{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatMessage) ProtoMessage() {}

func (x *CMsgDOTAChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatMessage.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatMessage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgDOTAChatMessage) GetAccountId() uint32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgDOTAChatMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CMsgDOTAChatMessage) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestInviteAccountId() uint32 {
	if x != nil && x.SuggestInviteAccountId != nil {
		return *x.SuggestInviteAccountId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestInviteName() string {
	if x != nil && x.SuggestInviteName != nil {
		return *x.SuggestInviteName
	}
	return ""
}

func (x *CMsgDOTAChatMessage) GetFantasyDraftOwnerAccountId() uint32 {
	if x != nil && x.FantasyDraftOwnerAccountId != nil {
		return *x.FantasyDraftOwnerAccountId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetFantasyDraftPlayerAccountId() uint32 {
	if x != nil && x.FantasyDraftPlayerAccountId != nil {
		return *x.FantasyDraftPlayerAccountId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetEventId() uint32 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestInviteToLobby() bool {
	if x != nil && x.SuggestInviteToLobby != nil {
		return *x.SuggestInviteToLobby
	}
	return false
}

func (x *CMsgDOTAChatMessage) GetCoinFlip() bool {
	if x != nil && x.CoinFlip != nil {
		return *x.CoinFlip
	}
	return false
}

func (x *CMsgDOTAChatMessage) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return Default_CMsgDOTAChatMessage_PlayerId
}

func (x *CMsgDOTAChatMessage) GetShareProfileAccountId() uint32 {
	if x != nil && x.ShareProfileAccountId != nil {
		return *x.ShareProfileAccountId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetDiceRoll() *CMsgDOTAChatMessage_DiceRoll {
	if x != nil {
		return x.DiceRoll
	}
	return nil
}

func (x *CMsgDOTAChatMessage) GetSharePartyId() uint64 {
	if x != nil && x.SharePartyId != nil {
		return *x.SharePartyId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetShareLobbyId() uint64 {
	if x != nil && x.ShareLobbyId != nil {
		return *x.ShareLobbyId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetShareLobbyCustomGameId() uint64 {
	if x != nil && x.ShareLobbyCustomGameId != nil {
		return *x.ShareLobbyCustomGameId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetShareLobbyPasskey() string {
	if x != nil && x.ShareLobbyPasskey != nil {
		return *x.ShareLobbyPasskey
	}
	return ""
}

func (x *CMsgDOTAChatMessage) GetPrivateChatChannelId() uint32 {
	if x != nil && x.PrivateChatChannelId != nil {
		return *x.PrivateChatChannelId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetLegacyBattleCupVictory() bool {
	if x != nil && x.LegacyBattleCupVictory != nil {
		return *x.LegacyBattleCupVictory
	}
	return false
}

func (x *CMsgDOTAChatMessage) GetBattleCupStreak() uint32 {
	if x != nil && x.BattleCupStreak != nil {
		return *x.BattleCupStreak
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetBadgeLevel() uint32 {
	if x != nil && x.BadgeLevel != nil {
		return *x.BadgeLevel
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestPickHeroId() int32 {
	if x != nil && x.SuggestPickHeroId != nil {
		return *x.SuggestPickHeroId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestPickHeroRole() string {
	if x != nil && x.SuggestPickHeroRole != nil {
		return *x.SuggestPickHeroRole
	}
	return ""
}

func (x *CMsgDOTAChatMessage) GetSuggestBanHeroId() int32 {
	if x != nil && x.SuggestBanHeroId != nil {
		return *x.SuggestBanHeroId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetTriviaAnswer() *CMsgDOTAChatMessage_TriviaAnswered {
	if x != nil {
		return x.TriviaAnswer
	}
	return nil
}

func (x *CMsgDOTAChatMessage) GetRequestedAbilityId() int32 {
	if x != nil && x.RequestedAbilityId != nil {
		return *x.RequestedAbilityId
	}
	return Default_CMsgDOTAChatMessage_RequestedAbilityId
}

func (x *CMsgDOTAChatMessage) GetChatFlags() uint32 {
	if x != nil && x.ChatFlags != nil {
		return *x.ChatFlags
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetStartedFindingMatch() bool {
	if x != nil && x.StartedFindingMatch != nil {
		return *x.StartedFindingMatch
	}
	return false
}

func (x *CMsgDOTAChatMessage) GetCtrlIsDown() bool {
	if x != nil && x.CtrlIsDown != nil {
		return *x.CtrlIsDown
	}
	return false
}

func (x *CMsgDOTAChatMessage) GetFavoriteTeamId() uint32 {
	if x != nil && x.FavoriteTeamId != nil {
		return *x.FavoriteTeamId
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetFavoriteTeamQuality() uint32 {
	if x != nil && x.FavoriteTeamQuality != nil {
		return *x.FavoriteTeamQuality
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestPlayerDraftPick() int32 {
	if x != nil && x.SuggestPlayerDraftPick != nil {
		return *x.SuggestPlayerDraftPick
	}
	return Default_CMsgDOTAChatMessage_SuggestPlayerDraftPick
}

func (x *CMsgDOTAChatMessage) GetPlayerDraftPick() *CMsgDOTAChatMessage_PlayerDraftPick {
	if x != nil {
		return x.PlayerDraftPick
	}
	return nil
}

func (x *CMsgDOTAChatMessage) GetChatWheelMessage() *CMsgDOTAChatMessage_ChatWheelMessage {
	if x != nil {
		return x.ChatWheelMessage
	}
	return nil
}

func (x *CMsgDOTAChatMessage) GetEventLevel() uint32 {
	if x != nil && x.EventLevel != nil {
		return *x.EventLevel
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetSuggestPickHeroFacet() uint32 {
	if x != nil && x.SuggestPickHeroFacet != nil {
		return *x.SuggestPickHeroFacet
	}
	return 0
}

func (x *CMsgDOTAChatMessage) GetRequestedHeroId() int32 {
	if x != nil && x.RequestedHeroId != nil {
		return *x.RequestedHeroId
	}
	return 0
}

type CMsgDOTAChatMember struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PersonaName   *string                `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	ChannelUserId *uint32                `protobuf:"varint,3,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	Status        *uint32                `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAChatMember) Reset() {
	*x = CMsgDOTAChatMember{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatMember) ProtoMessage() {}

func (x *CMsgDOTAChatMember) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatMember.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatMember) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgDOTAChatMember) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAChatMember) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgDOTAChatMember) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

func (x *CMsgDOTAChatMember) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type CMsgDOTAJoinChatChannelResponse struct {
	state             protoimpl.MessageState                  `protogen:"open.v1"`
	Response          *uint32                                 `protobuf:"varint,1,opt,name=response" json:"response,omitempty"`
	ChannelName       *string                                 `protobuf:"bytes,2,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	ChannelId         *uint64                                 `protobuf:"fixed64,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	MaxMembers        *uint32                                 `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	Members           []*CMsgDOTAChatMember                   `protobuf:"bytes,5,rep,name=members" json:"members,omitempty"`
	ChannelType       *DOTAChatChannelTypeT                   `protobuf:"varint,6,opt,name=channel_type,json=channelType,enum=protocol.DOTAChatChannelTypeT,def=0" json:"channel_type,omitempty"`
	Result            *CMsgDOTAJoinChatChannelResponse_Result `protobuf:"varint,7,opt,name=result,enum=protocol.CMsgDOTAJoinChatChannelResponse_Result,def=0" json:"result,omitempty"`
	GcInitiatedJoin   *bool                                   `protobuf:"varint,8,opt,name=gc_initiated_join,json=gcInitiatedJoin" json:"gc_initiated_join,omitempty"`
	ChannelUserId     *uint32                                 `protobuf:"varint,9,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	WelcomeMessage    *string                                 `protobuf:"bytes,10,opt,name=welcome_message,json=welcomeMessage" json:"welcome_message,omitempty"`
	SpecialPrivileges *EChatSpecialPrivileges                 `protobuf:"varint,11,opt,name=special_privileges,json=specialPrivileges,enum=protocol.EChatSpecialPrivileges,def=0" json:"special_privileges,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CMsgDOTAJoinChatChannelResponse fields.
const (
	Default_CMsgDOTAJoinChatChannelResponse_ChannelType       = DOTAChatChannelTypeT_DOTAChannelType_Regional
	Default_CMsgDOTAJoinChatChannelResponse_Result            = CMsgDOTAJoinChatChannelResponse_JOIN_SUCCESS
	Default_CMsgDOTAJoinChatChannelResponse_SpecialPrivileges = EChatSpecialPrivileges_k_EChatSpecialPrivileges_None
)

func (x *CMsgDOTAJoinChatChannelResponse) Reset() {
	*x = CMsgDOTAJoinChatChannelResponse{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAJoinChatChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAJoinChatChannelResponse) ProtoMessage() {}

func (x *CMsgDOTAJoinChatChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAJoinChatChannelResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAJoinChatChannelResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgDOTAJoinChatChannelResponse) GetResponse() uint32 {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return 0
}

func (x *CMsgDOTAJoinChatChannelResponse) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *CMsgDOTAJoinChatChannelResponse) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgDOTAJoinChatChannelResponse) GetMaxMembers() uint32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgDOTAJoinChatChannelResponse) GetMembers() []*CMsgDOTAChatMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CMsgDOTAJoinChatChannelResponse) GetChannelType() DOTAChatChannelTypeT {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return Default_CMsgDOTAJoinChatChannelResponse_ChannelType
}

func (x *CMsgDOTAJoinChatChannelResponse) GetResult() CMsgDOTAJoinChatChannelResponse_Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Default_CMsgDOTAJoinChatChannelResponse_Result
}

func (x *CMsgDOTAJoinChatChannelResponse) GetGcInitiatedJoin() bool {
	if x != nil && x.GcInitiatedJoin != nil {
		return *x.GcInitiatedJoin
	}
	return false
}

func (x *CMsgDOTAJoinChatChannelResponse) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

func (x *CMsgDOTAJoinChatChannelResponse) GetWelcomeMessage() string {
	if x != nil && x.WelcomeMessage != nil {
		return *x.WelcomeMessage
	}
	return ""
}

func (x *CMsgDOTAJoinChatChannelResponse) GetSpecialPrivileges() EChatSpecialPrivileges {
	if x != nil && x.SpecialPrivileges != nil {
		return *x.SpecialPrivileges
	}
	return Default_CMsgDOTAJoinChatChannelResponse_SpecialPrivileges
}

type CMsgDOTAOtherJoinedChatChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint64                `protobuf:"fixed64,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	PersonaName   *string                `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	SteamId       *uint64                `protobuf:"fixed64,3,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	ChannelUserId *uint32                `protobuf:"varint,4,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	Status        *uint32                `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAOtherJoinedChatChannel) Reset() {
	*x = CMsgDOTAOtherJoinedChatChannel{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAOtherJoinedChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAOtherJoinedChatChannel) ProtoMessage() {}

func (x *CMsgDOTAOtherJoinedChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAOtherJoinedChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTAOtherJoinedChatChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgDOTAOtherJoinedChatChannel) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgDOTAOtherJoinedChatChannel) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgDOTAOtherJoinedChatChannel) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAOtherJoinedChatChannel) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

func (x *CMsgDOTAOtherJoinedChatChannel) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type CMsgDOTAOtherLeftChatChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     *uint64                `protobuf:"fixed64,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	SteamId       *uint64                `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	ChannelUserId *uint32                `protobuf:"varint,3,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAOtherLeftChatChannel) Reset() {
	*x = CMsgDOTAOtherLeftChatChannel{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAOtherLeftChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAOtherLeftChatChannel) ProtoMessage() {}

func (x *CMsgDOTAOtherLeftChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAOtherLeftChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTAOtherLeftChatChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgDOTAOtherLeftChatChannel) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgDOTAOtherLeftChatChannel) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAOtherLeftChatChannel) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

type CMsgDOTARequestChatChannelList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTARequestChatChannelList) Reset() {
	*x = CMsgDOTARequestChatChannelList{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARequestChatChannelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestChatChannelList) ProtoMessage() {}

func (x *CMsgDOTARequestChatChannelList) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestChatChannelList.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestChatChannelList) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{14}
}

type CMsgDOTARequestChatChannelListResponse struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Channels      []*CMsgDOTARequestChatChannelListResponse_ChatChannel `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTARequestChatChannelListResponse) Reset() {
	*x = CMsgDOTARequestChatChannelListResponse{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARequestChatChannelListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestChatChannelListResponse) ProtoMessage() {}

func (x *CMsgDOTARequestChatChannelListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestChatChannelListResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestChatChannelListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgDOTARequestChatChannelListResponse) GetChannels() []*CMsgDOTARequestChatChannelListResponse_ChatChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type CMsgDOTAChatGetUserListResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	ChannelId     *uint64                                   `protobuf:"fixed64,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Members       []*CMsgDOTAChatGetUserListResponse_Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAChatGetUserListResponse) Reset() {
	*x = CMsgDOTAChatGetUserListResponse{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatGetUserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatGetUserListResponse) ProtoMessage() {}

func (x *CMsgDOTAChatGetUserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatGetUserListResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatGetUserListResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgDOTAChatGetUserListResponse) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CMsgDOTAChatGetUserListResponse) GetMembers() []*CMsgDOTAChatGetUserListResponse_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type CMsgDOTAChatGetMemberCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelName   *string                `protobuf:"bytes,1,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	ChannelType   *DOTAChatChannelTypeT  `protobuf:"varint,2,opt,name=channel_type,json=channelType,enum=protocol.DOTAChatChannelTypeT,def=0" json:"channel_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAChatGetMemberCount fields.
const (
	Default_CMsgDOTAChatGetMemberCount_ChannelType = DOTAChatChannelTypeT_DOTAChannelType_Regional
)

func (x *CMsgDOTAChatGetMemberCount) Reset() {
	*x = CMsgDOTAChatGetMemberCount{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatGetMemberCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatGetMemberCount) ProtoMessage() {}

func (x *CMsgDOTAChatGetMemberCount) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatGetMemberCount.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatGetMemberCount) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgDOTAChatGetMemberCount) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *CMsgDOTAChatGetMemberCount) GetChannelType() DOTAChatChannelTypeT {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return Default_CMsgDOTAChatGetMemberCount_ChannelType
}

type CMsgDOTAChatGetMemberCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelName   *string                `protobuf:"bytes,1,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	ChannelType   *DOTAChatChannelTypeT  `protobuf:"varint,2,opt,name=channel_type,json=channelType,enum=protocol.DOTAChatChannelTypeT,def=0" json:"channel_type,omitempty"`
	MemberCount   *uint32                `protobuf:"varint,3,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAChatGetMemberCountResponse fields.
const (
	Default_CMsgDOTAChatGetMemberCountResponse_ChannelType = DOTAChatChannelTypeT_DOTAChannelType_Regional
)

func (x *CMsgDOTAChatGetMemberCountResponse) Reset() {
	*x = CMsgDOTAChatGetMemberCountResponse{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatGetMemberCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatGetMemberCountResponse) ProtoMessage() {}

func (x *CMsgDOTAChatGetMemberCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatGetMemberCountResponse.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatGetMemberCountResponse) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgDOTAChatGetMemberCountResponse) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *CMsgDOTAChatGetMemberCountResponse) GetChannelType() DOTAChatChannelTypeT {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return Default_CMsgDOTAChatGetMemberCountResponse_ChannelType
}

func (x *CMsgDOTAChatGetMemberCountResponse) GetMemberCount() uint32 {
	if x != nil && x.MemberCount != nil {
		return *x.MemberCount
	}
	return 0
}

type CMsgDOTAChatRegionsEnabled struct {
	state            protoimpl.MessageState               `protogen:"open.v1"`
	EnableAllRegions *bool                                `protobuf:"varint,1,opt,name=enable_all_regions,json=enableAllRegions" json:"enable_all_regions,omitempty"`
	EnabledRegions   []*CMsgDOTAChatRegionsEnabled_Region `protobuf:"bytes,2,rep,name=enabled_regions,json=enabledRegions" json:"enabled_regions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgDOTAChatRegionsEnabled) Reset() {
	*x = CMsgDOTAChatRegionsEnabled{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatRegionsEnabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatRegionsEnabled) ProtoMessage() {}

func (x *CMsgDOTAChatRegionsEnabled) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatRegionsEnabled.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatRegionsEnabled) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgDOTAChatRegionsEnabled) GetEnableAllRegions() bool {
	if x != nil && x.EnableAllRegions != nil {
		return *x.EnableAllRegions
	}
	return false
}

func (x *CMsgDOTAChatRegionsEnabled) GetEnabledRegions() []*CMsgDOTAChatRegionsEnabled_Region {
	if x != nil {
		return x.EnabledRegions
	}
	return nil
}

type CMsgDOTAChatMessage_DiceRoll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RollMin       *int32                 `protobuf:"varint,1,opt,name=roll_min,json=rollMin" json:"roll_min,omitempty"`
	RollMax       *int32                 `protobuf:"varint,2,opt,name=roll_max,json=rollMax" json:"roll_max,omitempty"`
	Result        *int32                 `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAChatMessage_DiceRoll) Reset() {
	*x = CMsgDOTAChatMessage_DiceRoll{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatMessage_DiceRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatMessage_DiceRoll) ProtoMessage() {}

func (x *CMsgDOTAChatMessage_DiceRoll) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatMessage_DiceRoll.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatMessage_DiceRoll) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CMsgDOTAChatMessage_DiceRoll) GetRollMin() int32 {
	if x != nil && x.RollMin != nil {
		return *x.RollMin
	}
	return 0
}

func (x *CMsgDOTAChatMessage_DiceRoll) GetRollMax() int32 {
	if x != nil && x.RollMax != nil {
		return *x.RollMax
	}
	return 0
}

func (x *CMsgDOTAChatMessage_DiceRoll) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type CMsgDOTAChatMessage_TriviaAnswered struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	QuestionId            *uint32                `protobuf:"varint,1,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	AnswerIndex           *uint32                `protobuf:"varint,2,opt,name=answer_index,json=answerIndex" json:"answer_index,omitempty"`
	PartyQuestionsCorrect *uint32                `protobuf:"varint,3,opt,name=party_questions_correct,json=partyQuestionsCorrect" json:"party_questions_correct,omitempty"`
	PartyQuestionsViewed  *uint32                `protobuf:"varint,4,opt,name=party_questions_viewed,json=partyQuestionsViewed" json:"party_questions_viewed,omitempty"`
	PartyTriviaPoints     *uint32                `protobuf:"varint,5,opt,name=party_trivia_points,json=partyTriviaPoints" json:"party_trivia_points,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) Reset() {
	*x = CMsgDOTAChatMessage_TriviaAnswered{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatMessage_TriviaAnswered) ProtoMessage() {}

func (x *CMsgDOTAChatMessage_TriviaAnswered) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatMessage_TriviaAnswered.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatMessage_TriviaAnswered) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{9, 1}
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) GetQuestionId() uint32 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) GetAnswerIndex() uint32 {
	if x != nil && x.AnswerIndex != nil {
		return *x.AnswerIndex
	}
	return 0
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) GetPartyQuestionsCorrect() uint32 {
	if x != nil && x.PartyQuestionsCorrect != nil {
		return *x.PartyQuestionsCorrect
	}
	return 0
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) GetPartyQuestionsViewed() uint32 {
	if x != nil && x.PartyQuestionsViewed != nil {
		return *x.PartyQuestionsViewed
	}
	return 0
}

func (x *CMsgDOTAChatMessage_TriviaAnswered) GetPartyTriviaPoints() uint32 {
	if x != nil && x.PartyTriviaPoints != nil {
		return *x.PartyTriviaPoints
	}
	return 0
}

type CMsgDOTAChatMessage_PlayerDraftPick struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      *int32                 `protobuf:"varint,1,opt,name=player_id,json=playerId,def=-1" json:"player_id,omitempty"`
	Team          *int32                 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAChatMessage_PlayerDraftPick fields.
const (
	Default_CMsgDOTAChatMessage_PlayerDraftPick_PlayerId = int32(-1)
)

func (x *CMsgDOTAChatMessage_PlayerDraftPick) Reset() {
	*x = CMsgDOTAChatMessage_PlayerDraftPick{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatMessage_PlayerDraftPick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatMessage_PlayerDraftPick) ProtoMessage() {}

func (x *CMsgDOTAChatMessage_PlayerDraftPick) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatMessage_PlayerDraftPick.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatMessage_PlayerDraftPick) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{9, 2}
}

func (x *CMsgDOTAChatMessage_PlayerDraftPick) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return Default_CMsgDOTAChatMessage_PlayerDraftPick_PlayerId
}

func (x *CMsgDOTAChatMessage_PlayerDraftPick) GetTeam() int32 {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return 0
}

type CMsgDOTAChatMessage_ChatWheelMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     *uint32                `protobuf:"varint,1,opt,name=message_id,json=messageId,def=4294967295" json:"message_id,omitempty"`
	EmoticonId    *uint32                `protobuf:"varint,2,opt,name=emoticon_id,json=emoticonId" json:"emoticon_id,omitempty"`
	MessageText   *string                `protobuf:"bytes,3,opt,name=message_text,json=messageText" json:"message_text,omitempty"`
	HeroBadgeTier *uint32                `protobuf:"varint,4,opt,name=hero_badge_tier,json=heroBadgeTier" json:"hero_badge_tier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTAChatMessage_ChatWheelMessage fields.
const (
	Default_CMsgDOTAChatMessage_ChatWheelMessage_MessageId = uint32(4294967295)
)

func (x *CMsgDOTAChatMessage_ChatWheelMessage) Reset() {
	*x = CMsgDOTAChatMessage_ChatWheelMessage{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatMessage_ChatWheelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatMessage_ChatWheelMessage) ProtoMessage() {}

func (x *CMsgDOTAChatMessage_ChatWheelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatMessage_ChatWheelMessage.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatMessage_ChatWheelMessage) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{9, 3}
}

func (x *CMsgDOTAChatMessage_ChatWheelMessage) GetMessageId() uint32 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return Default_CMsgDOTAChatMessage_ChatWheelMessage_MessageId
}

func (x *CMsgDOTAChatMessage_ChatWheelMessage) GetEmoticonId() uint32 {
	if x != nil && x.EmoticonId != nil {
		return *x.EmoticonId
	}
	return 0
}

func (x *CMsgDOTAChatMessage_ChatWheelMessage) GetMessageText() string {
	if x != nil && x.MessageText != nil {
		return *x.MessageText
	}
	return ""
}

func (x *CMsgDOTAChatMessage_ChatWheelMessage) GetHeroBadgeTier() uint32 {
	if x != nil && x.HeroBadgeTier != nil {
		return *x.HeroBadgeTier
	}
	return 0
}

type CMsgDOTARequestChatChannelListResponse_ChatChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelName   *string                `protobuf:"bytes,1,opt,name=channel_name,json=channelName" json:"channel_name,omitempty"`
	NumMembers    *uint32                `protobuf:"varint,2,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	ChannelType   *DOTAChatChannelTypeT  `protobuf:"varint,3,opt,name=channel_type,json=channelType,enum=protocol.DOTAChatChannelTypeT,def=0" json:"channel_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgDOTARequestChatChannelListResponse_ChatChannel fields.
const (
	Default_CMsgDOTARequestChatChannelListResponse_ChatChannel_ChannelType = DOTAChatChannelTypeT_DOTAChannelType_Regional
)

func (x *CMsgDOTARequestChatChannelListResponse_ChatChannel) Reset() {
	*x = CMsgDOTARequestChatChannelListResponse_ChatChannel{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTARequestChatChannelListResponse_ChatChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTARequestChatChannelListResponse_ChatChannel) ProtoMessage() {}

func (x *CMsgDOTARequestChatChannelListResponse_ChatChannel) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTARequestChatChannelListResponse_ChatChannel.ProtoReflect.Descriptor instead.
func (*CMsgDOTARequestChatChannelListResponse_ChatChannel) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CMsgDOTARequestChatChannelListResponse_ChatChannel) GetChannelName() string {
	if x != nil && x.ChannelName != nil {
		return *x.ChannelName
	}
	return ""
}

func (x *CMsgDOTARequestChatChannelListResponse_ChatChannel) GetNumMembers() uint32 {
	if x != nil && x.NumMembers != nil {
		return *x.NumMembers
	}
	return 0
}

func (x *CMsgDOTARequestChatChannelListResponse_ChatChannel) GetChannelType() DOTAChatChannelTypeT {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return Default_CMsgDOTARequestChatChannelListResponse_ChatChannel_ChannelType
}

type CMsgDOTAChatGetUserListResponse_Member struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PersonaName   *string                `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	ChannelUserId *uint32                `protobuf:"varint,3,opt,name=channel_user_id,json=channelUserId" json:"channel_user_id,omitempty"`
	Status        *uint32                `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAChatGetUserListResponse_Member) Reset() {
	*x = CMsgDOTAChatGetUserListResponse_Member{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatGetUserListResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatGetUserListResponse_Member) ProtoMessage() {}

func (x *CMsgDOTAChatGetUserListResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatGetUserListResponse_Member.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatGetUserListResponse_Member) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CMsgDOTAChatGetUserListResponse_Member) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgDOTAChatGetUserListResponse_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgDOTAChatGetUserListResponse_Member) GetChannelUserId() uint32 {
	if x != nil && x.ChannelUserId != nil {
		return *x.ChannelUserId
	}
	return 0
}

func (x *CMsgDOTAChatGetUserListResponse_Member) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type CMsgDOTAChatRegionsEnabled_Region struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinLatitude   *float32               `protobuf:"fixed32,1,opt,name=min_latitude,json=minLatitude" json:"min_latitude,omitempty"`
	MaxLatitude   *float32               `protobuf:"fixed32,2,opt,name=max_latitude,json=maxLatitude" json:"max_latitude,omitempty"`
	MinLongitude  *float32               `protobuf:"fixed32,3,opt,name=min_longitude,json=minLongitude" json:"min_longitude,omitempty"`
	MaxLongitude  *float32               `protobuf:"fixed32,4,opt,name=max_longitude,json=maxLongitude" json:"max_longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgDOTAChatRegionsEnabled_Region) Reset() {
	*x = CMsgDOTAChatRegionsEnabled_Region{}
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDOTAChatRegionsEnabled_Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDOTAChatRegionsEnabled_Region) ProtoMessage() {}

func (x *CMsgDOTAChatRegionsEnabled_Region) ProtoReflect() protoreflect.Message {
	mi := &file_dota_gcmessages_client_chat_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDOTAChatRegionsEnabled_Region.ProtoReflect.Descriptor instead.
func (*CMsgDOTAChatRegionsEnabled_Region) Descriptor() ([]byte, []int) {
	return file_dota_gcmessages_client_chat_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CMsgDOTAChatRegionsEnabled_Region) GetMinLatitude() float32 {
	if x != nil && x.MinLatitude != nil {
		return *x.MinLatitude
	}
	return 0
}

func (x *CMsgDOTAChatRegionsEnabled_Region) GetMaxLatitude() float32 {
	if x != nil && x.MaxLatitude != nil {
		return *x.MaxLatitude
	}
	return 0
}

func (x *CMsgDOTAChatRegionsEnabled_Region) GetMinLongitude() float32 {
	if x != nil && x.MinLongitude != nil {
		return *x.MinLongitude
	}
	return 0
}

func (x *CMsgDOTAChatRegionsEnabled_Region) GetMaxLongitude() float32 {
	if x != nil && x.MaxLongitude != nil {
		return *x.MaxLongitude
	}
	return 0
}

var File_dota_gcmessages_client_chat_proto protoreflect.FileDescriptor

var file_dota_gcmessages_client_chat_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x67, 0x63, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x17, 0x64,
	0x6f, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x47, 0x43, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xf0, 0x04, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x43, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x53,
	0x44, 0x4f, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x09,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x4b, 0x49, 0x43,
	0x4b, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0x0f, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54,
	0x41, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x3a, 0x18, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x53, 0x70, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x18,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x92, 0x14, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x69,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x46, 0x6c, 0x69,
	0x70, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x08,
	0x64, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x73, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x63, 0x75, 0x70, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x43, 0x75, 0x70, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x43, 0x75, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69,
	0x63, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x50, 0x69, 0x63, 0x6b, 0x48, 0x65, 0x72, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0d,
	0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x74, 0x72, 0x6c,
	0x5f, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x74, 0x72, 0x6c, 0x49, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x19, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52,
	0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x50, 0x69, 0x63,
	0x6b, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x50, 0x69,
	0x63, 0x6b, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10,
	0x63, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x48,
	0x65, 0x72, 0x6f, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x1a, 0x58, 0x0a, 0x08, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xf2,
	0x01, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x72, 0x69,
	0x76, 0x69, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x79, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x1a, 0x46, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x1a, 0xa9, 0x01, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x74, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x0a, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x35,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfd, 0x08, 0x0a,
	0x1f, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x3a, 0x18,
	0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x0c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x63, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x63, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x65, 0x6c, 0x63,
	0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x73, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x22, 0xff, 0x03, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x48, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0d,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x53, 0x55, 0x52, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45,
	0x47, 0x45, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x45, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x12, 0x22, 0xbd, 0x01, 0x0a,
	0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x1c, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65,
	0x66, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x20, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb4, 0x02, 0x0a, 0x26, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f,
	0x54, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x74, 0x3a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x68, 0x61, 0x74, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x3a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xc8, 0x01, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x4f, 0x54, 0x41,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x74, 0x3a, 0x18, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x1a,
	0x43, 0x4d, 0x73, 0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x44, 0x4f, 0x54, 0x41, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x98,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
})

var (
	file_dota_gcmessages_client_chat_proto_rawDescOnce sync.Once
	file_dota_gcmessages_client_chat_proto_rawDescData []byte
)

func file_dota_gcmessages_client_chat_proto_rawDescGZIP() []byte {
	file_dota_gcmessages_client_chat_proto_rawDescOnce.Do(func() {
		file_dota_gcmessages_client_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dota_gcmessages_client_chat_proto_rawDesc), len(file_dota_gcmessages_client_chat_proto_rawDesc)))
	})
	return file_dota_gcmessages_client_chat_proto_rawDescData
}

var file_dota_gcmessages_client_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dota_gcmessages_client_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_dota_gcmessages_client_chat_proto_goTypes = []any{
	(CMsgGCToClientPrivateChatResponse_Result)(0),              // 0: protocol.CMsgGCToClientPrivateChatResponse.Result
	(CMsgDOTAJoinChatChannelResponse_Result)(0),                // 1: protocol.CMsgDOTAJoinChatChannelResponse.Result
	(*CMsgClientToGCPrivateChatInvite)(nil),                    // 2: protocol.CMsgClientToGCPrivateChatInvite
	(*CMsgClientToGCPrivateChatKick)(nil),                      // 3: protocol.CMsgClientToGCPrivateChatKick
	(*CMsgClientToGCPrivateChatPromote)(nil),                   // 4: protocol.CMsgClientToGCPrivateChatPromote
	(*CMsgClientToGCPrivateChatDemote)(nil),                    // 5: protocol.CMsgClientToGCPrivateChatDemote
	(*CMsgGCToClientPrivateChatResponse)(nil),                  // 6: protocol.CMsgGCToClientPrivateChatResponse
	(*CMsgDOTAJoinChatChannel)(nil),                            // 7: protocol.CMsgDOTAJoinChatChannel
	(*CMsgDOTALeaveChatChannel)(nil),                           // 8: protocol.CMsgDOTALeaveChatChannel
	(*CMsgGCChatReportPublicSpam)(nil),                         // 9: protocol.CMsgGCChatReportPublicSpam
	(*CMsgDOTAChatModeratorBan)(nil),                           // 10: protocol.CMsgDOTAChatModeratorBan
	(*CMsgDOTAChatMessage)(nil),                                // 11: protocol.CMsgDOTAChatMessage
	(*CMsgDOTAChatMember)(nil),                                 // 12: protocol.CMsgDOTAChatMember
	(*CMsgDOTAJoinChatChannelResponse)(nil),                    // 13: protocol.CMsgDOTAJoinChatChannelResponse
	(*CMsgDOTAOtherJoinedChatChannel)(nil),                     // 14: protocol.CMsgDOTAOtherJoinedChatChannel
	(*CMsgDOTAOtherLeftChatChannel)(nil),                       // 15: protocol.CMsgDOTAOtherLeftChatChannel
	(*CMsgDOTARequestChatChannelList)(nil),                     // 16: protocol.CMsgDOTARequestChatChannelList
	(*CMsgDOTARequestChatChannelListResponse)(nil),             // 17: protocol.CMsgDOTARequestChatChannelListResponse
	(*CMsgDOTAChatGetUserListResponse)(nil),                    // 18: protocol.CMsgDOTAChatGetUserListResponse
	(*CMsgDOTAChatGetMemberCount)(nil),                         // 19: protocol.CMsgDOTAChatGetMemberCount
	(*CMsgDOTAChatGetMemberCountResponse)(nil),                 // 20: protocol.CMsgDOTAChatGetMemberCountResponse
	(*CMsgDOTAChatRegionsEnabled)(nil),                         // 21: protocol.CMsgDOTAChatRegionsEnabled
	(*CMsgDOTAChatMessage_DiceRoll)(nil),                       // 22: protocol.CMsgDOTAChatMessage.DiceRoll
	(*CMsgDOTAChatMessage_TriviaAnswered)(nil),                 // 23: protocol.CMsgDOTAChatMessage.TriviaAnswered
	(*CMsgDOTAChatMessage_PlayerDraftPick)(nil),                // 24: protocol.CMsgDOTAChatMessage.PlayerDraftPick
	(*CMsgDOTAChatMessage_ChatWheelMessage)(nil),               // 25: protocol.CMsgDOTAChatMessage.ChatWheelMessage
	(*CMsgDOTARequestChatChannelListResponse_ChatChannel)(nil), // 26: protocol.CMsgDOTARequestChatChannelListResponse.ChatChannel
	(*CMsgDOTAChatGetUserListResponse_Member)(nil),             // 27: protocol.CMsgDOTAChatGetUserListResponse.Member
	(*CMsgDOTAChatRegionsEnabled_Region)(nil),                  // 28: protocol.CMsgDOTAChatRegionsEnabled.Region
	(DOTAChatChannelTypeT)(0),                                  // 29: protocol.DOTAChatChannelType_t
	(EChatSpecialPrivileges)(0),                                // 30: protocol.EChatSpecialPrivileges
}
var file_dota_gcmessages_client_chat_proto_depIdxs = []int32{
	0,  // 0: protocol.CMsgGCToClientPrivateChatResponse.result:type_name -> protocol.CMsgGCToClientPrivateChatResponse.Result
	29, // 1: protocol.CMsgDOTAJoinChatChannel.channel_type:type_name -> protocol.DOTAChatChannelType_t
	22, // 2: protocol.CMsgDOTAChatMessage.dice_roll:type_name -> protocol.CMsgDOTAChatMessage.DiceRoll
	23, // 3: protocol.CMsgDOTAChatMessage.trivia_answer:type_name -> protocol.CMsgDOTAChatMessage.TriviaAnswered
	24, // 4: protocol.CMsgDOTAChatMessage.player_draft_pick:type_name -> protocol.CMsgDOTAChatMessage.PlayerDraftPick
	25, // 5: protocol.CMsgDOTAChatMessage.chat_wheel_message:type_name -> protocol.CMsgDOTAChatMessage.ChatWheelMessage
	12, // 6: protocol.CMsgDOTAJoinChatChannelResponse.members:type_name -> protocol.CMsgDOTAChatMember
	29, // 7: protocol.CMsgDOTAJoinChatChannelResponse.channel_type:type_name -> protocol.DOTAChatChannelType_t
	1,  // 8: protocol.CMsgDOTAJoinChatChannelResponse.result:type_name -> protocol.CMsgDOTAJoinChatChannelResponse.Result
	30, // 9: protocol.CMsgDOTAJoinChatChannelResponse.special_privileges:type_name -> protocol.EChatSpecialPrivileges
	26, // 10: protocol.CMsgDOTARequestChatChannelListResponse.channels:type_name -> protocol.CMsgDOTARequestChatChannelListResponse.ChatChannel
	27, // 11: protocol.CMsgDOTAChatGetUserListResponse.members:type_name -> protocol.CMsgDOTAChatGetUserListResponse.Member
	29, // 12: protocol.CMsgDOTAChatGetMemberCount.channel_type:type_name -> protocol.DOTAChatChannelType_t
	29, // 13: protocol.CMsgDOTAChatGetMemberCountResponse.channel_type:type_name -> protocol.DOTAChatChannelType_t
	28, // 14: protocol.CMsgDOTAChatRegionsEnabled.enabled_regions:type_name -> protocol.CMsgDOTAChatRegionsEnabled.Region
	29, // 15: protocol.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type:type_name -> protocol.DOTAChatChannelType_t
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dota_gcmessages_client_chat_proto_init() }
func file_dota_gcmessages_client_chat_proto_init() {
	if File_dota_gcmessages_client_chat_proto != nil {
		return
	}
	file_dota_shared_enums_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dota_gcmessages_client_chat_proto_rawDesc), len(file_dota_gcmessages_client_chat_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dota_gcmessages_client_chat_proto_goTypes,
		DependencyIndexes: file_dota_gcmessages_client_chat_proto_depIdxs,
		EnumInfos:         file_dota_gcmessages_client_chat_proto_enumTypes,
		MessageInfos:      file_dota_gcmessages_client_chat_proto_msgTypes,
	}.Build()
	File_dota_gcmessages_client_chat_proto = out.File
	file_dota_gcmessages_client_chat_proto_goTypes = nil
	file_dota_gcmessages_client_chat_proto_depIdxs = nil
}
